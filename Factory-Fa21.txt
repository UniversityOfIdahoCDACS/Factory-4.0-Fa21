// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Nick\Documents\gitRepos\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
8d01235b62908a5c10fefe9698485471543322b1c4564e004c22bf236b9aa315882088c799af14b8
0a0d07e6d1073fa902ca0c7ec6a2b5a25adcdb0bc4ba457c804d86c54e93fbce9d20d87e7e58e310
74a5b60ef52be381e5d23bc1fe31f92950a41bd3c3cec1c0a4dac71cd010127b29a443ed18739eed
c63c17b77b40fb0ea456d7024b376962acc5aee4998137b7e2d15e94834ab5cf75a7e3481de6ece2
88e833ac4cc3ef4847e12441f2bb4bbbf4f1098f4090e9c09914d36c910bc5ef688a6f7bfb426ff3
bd02a07eee6a14f98c10efe44e5f622e65c0c00a7ca24c77752622815eb1d87bc32cfa37171b7880
4cde5e727727c1a00f23dbab0ff8bf160d54943695cfd22bfb5c8b45268e1753c6d8186b2a9531cc
5090840b374d5bd190f0d25f808f5be6476a5ffa587f27e97558fd6d24fb0240cbcfad0290d7ab39
316dcb6670e4045b66e34db92442d6b15372b997925b8565198e5586a8e2f7f91c0af95c34540cb4
91010b56b85f920da2900db1d4479d77604ce88f0cdb7b873c88bcf4ac84b5e254370b3d2edb69f8
2abcda15a5fda8ef0f0c4b736860268458e3e5b16d8bb6b29a929d77179104bac1ef216fd2cbbea4
b7af953887e1c7d0f2b74c26a7788345036f32ccafc3f1c702f1be67294a1a3d901364a7a726e309
590bf9948d7ca7abde62c07e9f876296bd60fe5ffe7155bd21a8da41884e4e9bb2ac2ef2180a50be
416ebe0641bc7f10c2f18a2bdc6b1a419a9370fc567a8248c7acb6499f8ecaa1b6fe1d1a700f1f24
b7e36543819350e11c1e0152457dc3d18e2bcd5eb88dcc445a36fc27cd58ad4c440d2319808bed83
7b1c0e4f911f0f946fa56fb0455751eb97a2cfada8a4b4bcaf285d7908c1e827cd4350784431c17b
2deacaee9f116bdf81a3e84d536e773c49c81643810d72a448e2a41637b0c545b5a4019427e74154
5f04b9d2f48659a7685803d1bc39119247fd345b1451535562964a46d1ffcd558c1e62971f6e2bae
63ded1c72177fab5c3c16eae59b8292c3b2fc1a7569edbbd7d8f22915aa96f1c1e9969abb93102ae
0a23ee341c432c17973a87ab2c44212cb72bcfbb4aab2a9bdff89eea46be04901a85d2cae82abc94
bbf0bdabc476f0965fce038f6f32d06467f2ad107aaf33fbdd6fb02a3aba7881977719f7b1ee4721
13b9cc8257799e9bfd1d9400c214ba36228cf5e66a1817c53aeb8b7cc71fde09b928aa4397636d50
d91a1612a024987e0ccedc423b5967a2db2448a4dfe741575fae727ad451b712f0dd600028063cd1
d2ee35bd89e75616cc1c9bbe4e4c1b74d815e99bcbdc58e78aa9c8ad8fdd3903d54ac1566da0c444
a7f90731303bbf1926cf285b7a1eefd8e6bda39800cda14079777a653edfeeb100c0e1cbfcec67c2
44c6f675c1adfd9a62f03d2be35caf82250a562a358186708b69c99e2f55986c2677d9c23880edab
8237d6520ce0f7ffc29bcb4c13773a27062e3307e5021b8b2ab7055ea58aa931c03b0a6302486b19
c4c54bc418bddb2c55a4097ae7b6f13a401bae28a8fce28c7a4a5f5f947f935aa25d4c989a3381b0
96413ebd6847d2b4d3c6f3ec13acda74e92d06bccda4907647a94581abf497a62a304f17e36189d1
fbb97022f0ac47d2bfaa35a6df74b0a9473483a8abc8739249e48db6219ea165f3f81b5c15531d3c
592563f633f414f363beca7a59c7ffd594e3d4ca3b9e791e16f5b18a8aaa7a9b2640a36af9ce0ff0
fa799d296373f28e1720088137274ee4edab4a6ccddfcb3ef9950a1838198019b66790f5dc421d87
b2a3a91c3d6327c506aa8b1ee10d30505895cab9902e27dbf0f0ba23c168157ad0099512e171c7d7
8ebea47052cb52bd3ce239f051066c645b71b324657d2bb4de7db435aae4ce38ad49783c51a43fa3
d4aa35abb643f2a8821f551ce45366f8415587f2a413ae06b3072f4a3035ccf170d2d0a3e92ed705
72b87031e99a1b83698f20d3a33b5a8b3ca6abad30f3f8c6cfa0c0860bcd0a460519152121455480
d0d6f4dbc7497555b22856b0e42e90268532961578c9497da84d0e3b960b6c66c4fc75b99f5e219f
b66cff912be837add1374de67676abacf6e1f9ef6fe030f6facb023f6d8e9f1c70e3b09513472752
fcee5a66d530540235338c8ac9e829c339c777e125695e99839a539c84da6deb21378910ef110c88
d1e0e64f6d322c01f10b49cbc5b97cb2cb924b98f98f2a23fd4b9e453e120eb44d53f5b6771eb889
a4d42e6f2d7508cd076e3798402177525b853de833bb3f4578b4f3783789b4428ebc20397ac2a375
e976c471c0fe452978b89e1a595aa3ee793be8c853b8091f8471834fd4e6df4dc13ea42d29f9dc62
520a91cb7b2053dcbb5d9548b902ea9dc33bfe8c4bddef8e4d07f6999f54dd832ba72738c3c74edb
e57be6c0371fb4bf1cdbb9fedbd984f9f499fd193d0cb620d614261fe76184a626a4c8cdabbc9bef
2d155d93871495b0f34c7d65b77fee6003e6446e8060c4a8e854690d341db89a93803462fbee1aac
ed5d142c41bee7a9620fdbef6377b54fe604745684615e3ed9beaccff983c32a808b0594854bd9ab
f83d68c321dde8661cbb84f5bacf256ce6ba71029bcdd441ae6c84c3d6bc4a3ca677b70a3a5b615d
ecbaa3e40b505daa520489175c9bf0b59ade01e178e1c68dd93ab98bf4b42b8cddf31e21b89e334c
40cd350de7bd3122af48d90d97b333f9fc41a44eb11bc4b44bb5a0362cfc328f00db6e879334865c
d74136d6f85997d53eefe66a0c570358fd96b01f013269808fdf2307fb6c8794468c50c1025e4a4c
c157dc6c4320fc74dd1e63985975191abbc7be5acc1dfcc8ca932ff8b9f54e956c587b538bdf0ce3
b31c1be4d77da25427fed886aa973c5de182acbc626f503fac1ae62bb4e53aefac0d3313d900dbf1
a851fef03accc5b85211525cf21f89e639df8b13bef0a1b01472c100076a9885942dda325bd629da
19fa222f7ec8ab3fb85931fafe7bad62e3dededbcd611373dbd1f3b5fe99e841127ea1896dbd6fd7
343e4c275de8cc847ca3284c8fca6b7f8f53f91177f6a6a2e5f51e292d6e5acc4d8c4aab0e72a264
3b905f376443b22ad334fa195c04dbd142806e44827fb6c396effdc0bca35b30585baa6d7df6338e
e892947eb9038701de0bea4a2fed734063cea96befba62da1e392104dd6108e61459c992de3a302d
d882f60e36e4c3f58d1476a0b45a73b10ae8afcc2dbd54d88dba700ff58db1de134dcb720ac1e401
cd4412a57334feaf0f90e64c5111a1d669f864d0c24b4673c4b07b8c3248f3cbcafbcdde967ee6cc
791c48162975a36d2b22cce5271c1b3cb708eaac46edf57b0c3b7c9e448de0adb03087b346fd1d4c
7b116390d14949949359c93b0a7fbea8b1fd480ac363c67942ebb42e51b3d7557043abf41ecac630
b770a5fa3acc14fab84934172c75e699acd9180eef22614f750dd213aaf5ccbc2be0ed04aa329f88
4ce63db52f9fdecc085cc3ead50222dfe5bd00e0f014224c21d936e62ff0eed5e6ccc0748231e8ad
88339044243f5f9e124775ad12ba8eb8d6bb43ae7ed5ac0cf179dff29b463055c75a9fe8e0cffb2b
d7a2214da830c1259bcdac6b80e745e793cdc557fa3ca3a0c94f675bb3e481a3c586394b19675c2c
638aa1aac86f04bceb36fd708352950a099017129c4aa87f6812c9bfdac8574e005b135430bca82a
46a363141bc9399d5c037cced0609ade96d13fc3f0affd875819a0bf84f4634847b41c84293eda70
9d595e232fbdcff481c4558eae5f653d80584806e62f14ca2459cb691d4333a1401fba2240c6230a
e2b5d0deb8b5f11dedc5c8390dee271cc22d70d5e092c7f5ebd136a76781c45979ff90013732b352
4a1c6209f8dc0fb3be37d9a4b5be791e341ed9cbf3a6f5b0cd459371a6ba80d48ff5ca04c1d12b1d
731e96f9ef4d780a5f67f967290b725d68aa61abcfe77d7671d36fa13849212906328da10a635c92
09b9463dce6eeb0797320775a084aebdbad1edfeb0550fec11973690bcf5761aff679733e75b56df
3548d270045a753772846e5b75f689e3571a539187f5591e2cf441e9ff1fd6ed33dde02cf3edd6fd
d73032c9ae4d77e46607b5af0adcab0621066ac1dd6ec49ab3faccf3c7dc8bf0f98cce5cef04d7de
a5bba114533e1b0e8298e064adae5383639a1632fd5a33b50522c027cb528c5bdcb9b0a033a0c218
0ca79ccc6f1a6c63be3c80d42428fb7d98dde8554f32773f2e2d99b1ecdd8989d922cdbd70d3afef
ea1dab538703100b9ee181f433253c70f574cff13ed9cc8e02b462d100040ad6614e96ef24b5a7cd
892e3c3c65706e6bcb474cf24e7f6947a664f5bc816681134114ec2a8b995586afb247f992734658
5dfd010d7e9ce40be5fb73a51ff83283ab26d7c33b8788618251f3651f8328d8344a6612441340f7
94e1a0f121b5fcf3a5dae1945bc01bf90e545c92701f3db8aa2c7f5243d0665633f7168663313a09
a1e2d3cfbe7874be0f82aa087d126fd76ccd82a7079965e16694b7dd613834be545c8ba9dfe38726
7e1e8ebdd90a310fb0b3b4ecf324322a5cdff01d82ed9b0e8f1ba91ad5e7f99583501e1fc50162a0
e63eb2285f7bd9b44dd44dd2873b3eb0cff883348c7ac4686816fcd6bff41c5504563e2946cf29c0
2d505c29a2c4a79852523f9bf7d62c5ab6576669fff91017756d42d49f6a2469878930d5c546f511
fdc8156f251c5ad983b64fb7876223fca819be8027ecadbbdc56b4f3bd01ce363aaed4586a32184b
406871b18691f67c9e6239994e4038104825ab55357c278411eec89a5c4517df4ab2d7b98bb4cfea
c3ab782234f13559c2e0f7f9238d73b3aa46e5c8c85dbd624a9cfc0e17a6611d448d90c0203ba7b1
ec74105efca8c33f998f8a359fe6769c9448a4bf233583f41d205e7465d372eea1d4415151b6be02
4ecd0fb342648282d559df83733bb7b8522a712453c2586d0f3fa79d0feb8fac7a76aa3169d3d120
66b1f84aa7410b243140bf5873abfce0f92d951b39190ecee69de79115d12fcf0635ac364143add5
e846e32a0d5c0643860292b6d54fe3df4d270d1dab2edde38b25c877dd7f2849570853f820c4a022
cb688f7f88702b3dad0c7721a21dbf798971b0b65cda881f3e5ad297bd91dc4f96467b8e8683be89
a55dd2118212c6bb9a1d8268587ebd7ff83f597532d77615da59888876f72b942cfb84a82fef609f
054f0238bd63702a976a4fb730b5953a96a19eb7dc8cfe91bc37101e6f80ca0873a0960b6ad742d9
24ffa2938faa2dc1b251d0e145246125377c5067e62cb98f88524055048b70c4309330b1c5a8a5db
be868ae1555dbe2b2f28043c53828036361cb2fb15a3c6f4e4ef6aecdb4c9cfb2653f71b0b8e53c2
9be5d404880b0fde4061516bb0f31206d4d5da8ed2abd376543f71f22dbb7e59848778c40adf299a
b6c5abeca150c528fb47d3b958aa10c7979c7fb6edcd9f564a48f9c53cb8168da44d4be151703cdc
9fd4763ec3ff3791488960989f017f4d9e27bd93d1289b3cea4f06c09de8392df8ee6a41e8bb3e28
fa6943bc38a215348a18e4549141a2b0f2c4ee00db0662a3e9d8478716198b7fdf2e1c019e871846
7dca83fdaca715167e67d5b2cae1b6670938c4747347e8bd1fa4979c4d63b8a4641e94c8f21fdbb3
adbfbcff2b40cc5e0b35cbbe8af6ae87becba795a5d9d2b00c3d53437c98d61d1ac5d832f6df88b3
0f4f0190f70b037bb8fe8d3406dcd9ba8df2c31eb715f21acbd924581a0e902559355f6f87613ae7
73c4d5cd9e33ec80ae8baaea39c374bab49f284e866430aa3e56f5141caee2007a68909e47515ebf
d55056efeecc1c77ce945b266f1f0e96974caca2a083719350669fbca2f9a3840d2d49d21dcdc324
2b7aa8c8b012ff8eda5fac144ecc57d4f92baf5ad69f1a9d21e1066fc1cc14bc8433e9c560fcb380
04fe44a113d996c59b082b61e506f2e2d505baf809158b16d414f9f00483f06b4906f730096c854b
f0be3a1f632a66fcd4d3b8de9796274a16731bdb868f3ba0b43627882c23e32f129e1576a0d6a79c
349dd1f44ba5e9e43286856a3a74e6d86cc24eaa9bf8d273108000d5c705829ff96bf94293496cbb
474b5deba437fd0abd2576627a6ed82cde3c349dbd54044d5c24ddb8ac4518880d9ebff1882ed086
28eb4b97f0b6c2e6041f705c6165da9807606296e999ffa142db4e5f63db6ff7b16feb7f192a82a9
31360b3830fb9d759fc1448d83e26159a693090999baf55809952c2917fec6d8706157dcb136deae
bdf94125d5ae1ee439152e41c86d4aaa464c40298fa9345f5f466690b9c46a006870bac21f3f5b4c
46383aec73cb58860e74f4a3d319feecf3b19c36ec9586886a20ca3cb48b9b5605e7d17ceca3fa67
84feedcdc994dccb44b90559ebc5848fbdf0a80bfb859cf1534602ce4a0416721ff988608d40f8bd
b36715973c4447570f58ca501d1240fe635d02a76d00fa5860197ac03b47e2eaf22e23e8850dd5c1
f30a7206ecd6786824301bcc4eba49a9469a8de35c7e25d7fe3addaabfa801e99c2fa27c86b035c7
dc46f585bda5b44bcc0ad9337099486a0124d2cfc4d10c25f0e48d69d3d9e959f6fd199c22a74b08
e99f90e36fb5358191c9be2e31935d30b8718d3683f9feabe16023e3c2116d794ceac24d08b25186
21c33496348ea6c8daffa0ada474a921704f1436bf59c328ddcbab01c7c0c2470d5e0006315d7a5c
029aa2cb6210ed6a7e2bbcb6accacfddd34832dd1262b0d433027d8053b0fa2c1d5a83a19ad333c1
6b30963e517a1f88ba94296508aa2812960f35c608bcaca3fc8e303e33014a480545a9085157c5e4
269502c544a19b090f7229d81b030a086628695ec07d493aebdf3a1e9f11dbdac3933420ff259139
c7dc7463645f538e51aa76d11a2bf4cc03d9f1df38abed864f2b45216f13a28a4be633748d3969f3
503b94e9eb78d9241722afc6adb035eaee1a46ed6af7b12c7216796a2d1d35e102f62e190ec23537
b4e0e7e7f4d99f2ef09ca572fe8f76b1f1dcdd1f9a5f524f6b3ba5567c3675dbc7117da9cca2f38f
d079ee9cc756dd497b32d7f95b63ead5cf751fc682ae50e316b9295e66481d0bc0477f51c06e87e4
6a983db3aaf1dac3d4d045679682d58674390bbf23c31251d363bc16b0a573bb57a0d75a59f5aace
e04a58eab86adea5ee642ebb03d8e0f915715c4bc20262cf2ab7323a0e80366da2bd49b0d204c1f0
3bf9799aa8054490b95a9776455ac62ca348cb8482134f129a54b6661f1e44ac174f61ed44a4533d
be2a620ecfc4a967cc897766d26d0ba6e49b07be2f8fff75cdcfa07d14be96fd4b2025cbe8982815
98eb57347652803fe27017c59a8526028808331df35ec406323e9be058fec8e7ad386c6b74176190
2bc9047d6caca13b0a1bb507f2e1d983cef2b1a4a54d45870021e167db57f33a4643f390b946eefb
94767f97fcebc983fcc70fa490aa9eb49cb2f8d964b7126b495f9597c13e3eab2c9a2df6e981b6a7
d88570cd7cf392fd5c4fafacffac5130477583ba114f4ecb0c69798e1f6e353eb20e209ff2c98371
4ff858b251715d5fff1ac9265b04b70a4c20bf9393230524d0af814e24820e0a2b8cb4c55d54d8ba
3eb186bdd5a25bd39e1410908129125ba4511510a69d2c7fc7e534b794d7a1421f7ba92f695057a1
41e2005d5929b3a26a1a49f7aef1a5f848f478305cf505af4bce892ee8e3676468fa02f8cf0f4e5f
87d678207290e47005d740c22d0bbf91c2d9f376b3df2b3c8c60056d4acd3d0e98027857d0257884
9f80c980898e9cca21faba36c4ee3647064f3df361c3d1074afe91e909676f1cdd5b90f39d7e6a02
996d36e1823736f8143a4308cfc60c7740fbc9002043ffbeb783148041c72fe9e7c1820affdc0e14
883a9817a1da71a32efd648fafbf9dc7e1ff89bb9ee135eca97f954fa600a2549192774310a9953f
c5d5ba7c288649a0c2b7064fbede3d167f1e2e47dafb7396b007f478358f1b312e184b2040b8fbae
1b60ab8bcb2a63a33d1f1bb0a85158ea82d706152a5bb67184b408b041369af36116e9f0c03c5634
dc6622803afe9c30b3c7432ced9b33715817fddd12e7be8764e2d4e0a3368a9ee499c460ec1c829d
22fa860918e4a46e1db7740932cecff6424b4cafafefe2cb304cc4fff64601f7c549e0d6d28c7bab
b790c7b47cf813b5d207fe73b9df911361065fc8c7fe06ad8f0b9d912eaeafdf654125b28768e08a
47dd42103d09cac6a7b0c51d4cd2504d5d23a727659c219e3650d974397724d260b18a18a4608e95
45f1cdd6d113be2ed743381150ecff36acd43d6dc206fb0dfb672f027322f9e8a45302e5ca908974
2e0f6010f6b234705772e21dc0340396dd3301d558a32693cdda1cb746a6fb37381bea9778214dfc
75e08eda23911a62752233b3b474cae0dee109fb2e7e295e28038a71a9057d6624cf0f613c07538e
1bf3045610642de929eb0d557da8e86e2b5f00f6c359dc8826bafc7b5cc2a94c89ce1c25e7fe4be3
c914e0a558ce0feb5788eed4e629965dfb571ecb3a8a115018a41a19c61db52bcffe2f7063e9b827
00245dff00ab08f7ca3cfb5bf8b2a173ab2bf4c46a4525d6abb807737f638afd83a98499f80bf846
35d80ac55720bb2ed39d091b6bbbf0f98a2df3580b7ea6a93731428d780d31d20600a02695d8dc75
8263f0c10ee67094e4be7778879f6a9783817cf4fead8e0636443026f57ea4990567a2df3e321c46
d4664cc8db3759ed1f1dc92a5048678d48fccf654b9ec23af2d2384f11ac3ae222bba70b0c76e9d4
19c41dcfac0f5ae5a4871ca53d7374d28d167970aced43d1b8fded6fa0d79db49c015617fd0f8da6
517c6dae469ae4607eb8acdce38a40fccae4d335ff7b94b790c05dc62d5992f3e9c5970d0315d533
df20b744a0941a1970145e0698257037b7c79f10832b55ea5d1c0f3660a217ee3f1b582e9782dad8
1a5fd2ba35e5c56ad1b9afc4f2965bddc3842dab052be7645254786b181a3c20605c21c7eece1963
4b0457783199a98242d7077c01f13fe35c6380659c3beea952707c0fec9dad0e7668de2171a4be96
d8fb51bb96b67dadf48cf10a378af38a9bf162b6c07c4b0f650afb393c92fe1272320c43685ea0ac
014c2470b94c4cc9c74c51b816a64d26472546e8fe9484d0a12256d32690b54c288d13e91c2fdbdf
1b6ffe594263d8b46775842b815c4c74b791924cd601e3e4bbf1d022725d02788c2e1f63b7165ee4
c49d0836159bbf6cf534809ebc8c31042d26decf0ca49a77dcd6e3dc0912785992a0fef300e346e6
e2ee877ab8f6bf83a8cd1a6cb666b20fc261ae946d026c9533d0bb093d0487f73e706ef55876fec8
792994e637dbd6a487c1701f3c3b77131a4ad7f951b973526350928ef4b424ee50531f4a18a976f6
5fe2699afcd21adbd84990184e663e9e5e48a9f20551551fd4d1b2d47c116b21ac1d6889864ef88e
3f528181bdfdd647ee26b42978e4bf0d3293d371c4b9350988856f9724cf2863e40bc4909c77dec3
3ca6c80aacc42c6959e3f30912b05b9e7e641024b588845a3c218b50aae9134bdf26a1a989fe2938
675c8db452254e1dbc9bdc65604538021690cf75a02fddea55dc6d4d9c8047280bfe1f8434c08756
e2bfef062529eefad0bb56d9596393b06e6eca136b4fcea1c8b8858fe9a614249acb082e54d77d03
7a1ab5502080f1f5ac7a2a5cc16ccf163f16d682b617597da3b4e91ada281fc1cae36587d0a51429
b02a9059119fbf71745d406c4a33a5def1141aa9f19cb34562925c299ed8e6d85696a7a09faaf139
b89a1961c356f9a7bdae42871b36414613a2c01ac4bf6fe7871330d2ad5dd7292e8e08a5d133821b
270e0bd052ea4a937efe497ad94291f65b9d9e63d40b534655e487c685c87338716304d9a5e7bf4a
c08b78a553618f239f437f40d23aec81a3eb52db401a7b2b0fbd9c7416b30fb28123d993e3b5f3df
c0bca6aeea483c9c02fd9ac14286cb8a5ef501c6893d54519a6901e3cd7d7781619296910607b9ff
1f00ceaa6021dd2b5ffd7d66127312791ff6ada6871d282511ab5ca2f22607979b79df8dd1545c20
80f7614dbf738f381bca6e0058a04c9a310381473c9d6ffb407165bfd959fd297c1aa36807f09d46
bb75c30ee19ca3e555a72268e6d19b0efb723f1701af3bb61c805b9e253a6a701a7c138ad688e415
5174166c7bf886dbbe774eaf35ded2d16a2860c5c9b3a2a48b47a6a13f6796b58db446b4399806c8
1466a70bdbf299bd4ec3161248293a3c157c78b9f53fd121c9ce566421eab29a82ba8ec1deab92d6
bc13c2e5105745f060905abe294796e27c842a3e1b2a272e26e629f998cbd7f17aace06ba6abcf74
2d29dcdba43f5fbe297353d881750d9bc07791f286e7011cea9e0453dbbc9afdb0881d425a2600a7
b1bf5bc45c4fc435a35fc80a9b4a0ffc2ca49b5fbfb8b1a70adf7d96974f13b1022083fee60b0b90
b3ebfb31373aebb041075793bad03a2d30c0a033a3118f699ba2ec5a93b04612365d33641ef3f420
6f4f82b6b91095253b4e73221d6dfb2f4b16a0b62b777c3037d259217a6b8fd30f4ee45be7e5025c
4cce7950474aefc736ca7ef15f124942506c6a68344a21ce01e5284fee462d90eb86b0a9495dabd2
cfb502ed607252c593519590f8551a549aae83043f413e18eadedafc3d08e05fa7464d4e09a72e92
325ae5a4d2fb247035dea1daf73dc6caa5cca66c8ac10d28cb64b32193d48522f32332c9d9330dc1
28854d86103d7850dd1e08631c5b08e998abe91eaed758096f4bc061c05ce7589eacaa7918a58fbf
a6c8f3de70752b9944a9ab6ddca24d39a3318cea2910302714dcb286824e08e542e0754af603ad0a
230295200098733c38a755f42f1f0a45f54bbd46cb20f037a8b30a28a8545e3fbce1173aac21fec4
f5a7eaf6ee63d72890b4480885b7798ca1ea5fea0b1150d2762d0b8ea603d320137db113bbed0c2d
4aff6cd20bb25df11e92a580dc98d7c86793956148a1c69b1ecbe6c97b903c3c12d706281ec9a269
aafd7e5f82c24c74d052c2705f3bd17eed166a1943f2acd782558e7eaca45bddb9e0ac98032c9542
476757d996b5f32a2902b83ae4429c444a846651210cda30c2fedbe6dae591d151cca7f182622464
4cde8d003b4f3f7a69288ee5a4206e47d447df19d2a913998e65bbb8c1ad84689585d65f645c95d2
1fd9cd8c6d93660dc8e2147d0606b1fc68f014e954814d6f73bb5002b2da85ac9c01c8b42979b123
75760021a21ed75da0b1380b501f1d7086957edb6c36de228dda62c6ee058df9795ed7c0e798594c
612dda81699479339fb8a785cd5ec86742cca221837a6772c793c579d2a5e974994c5be67bf787f7
276fa89299b28647937439ef0bbc85c2255181f7c522b7280fa2734bc6cb8a58c09d9e6404a0a1d6
6654ff713734828362f34f19c030216bc8527219e0f3235f7592e7acaaf761566b200041e528791e
3157c2d3289db9b783a315a41124233c2f67801477e9ed390929e29a52d4f7312e9125ce71cf2ef6
1a47b85f8b2f6630a49f94346c0ca9a266d7e736025be72112c82e1562c156b8467a21ccd7687f99
e0be6164a50fb6b09dff4820691e54ec9a913d204295b39830e3488bbe2480aac4dc30e64cfcdd6a
33c6cde45137fbe1d771f624b1925a116b1881420908f188d5fc8ba1f239536443c4c1f1f84f63b7
d73c89a972f1abf47f90ae35a19c94b113eb4c4027eb6fd562712ecc592e3420cc6ae73167b58099
212d45f19395d31eed6863ba84a90dbed516e572b6485fea400bc488d268a60af5580b3607b44d63
5581bb09c29608e4866cd75b97610465f1a45cf1f126889a2ea3fb627b8fd98b24c7f7c668606fe2
2e74a4fe1d5a10f8cd9e2f46e32f07a697d25e77e25203c336f48f03aa57ead39a0a11c653cdc05d
7c9006f5a0abf26179af40361515f190820c89c26010d5f3c2020c2aa9f8d6a1e2a983319f9edd7e
27aa52b495c45792b0c33b62c59e05a5dd6e831ded5c6fefa6544e90f5
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 1345 V810 1 0x0 180 V811 1 0x0 175 V812 1 0x0 860 V813 1 0x0 200 V814 1 0x0 400 V820 1 0x0 420 V821 1 0x0 440 V822 1"

// Rung VGR_Copy_State#2
// Offset 51
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1"

// Rung MPO_Copy_State#2
// Offset 31
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 MC808 C1621 1"

// Rung SLD_Copy_State#2
// Offset 25
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
#BEGIN FMT_COMMENT 
"Deadband for X position difference"
#END

STR ST1
DEADBAND D140 5 D1

// Rung HBW_Move_XZ#10
// Offset 48
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#11
// Offset 63
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D1 0
OUT Y50

// Rung HBW_Move_XZ#12
// Offset 69
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D1 0
OUT Y51

// Rung HBW_Move_XZ#13
// Offset 75
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"Deadband for Z position difference"
#END

STR ST1
DEADBAND D142 5 D2

// Rung HBW_Move_XZ#15
// Offset 89
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V120

// Rung HBW_Move_XZ#16
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D2 0
OUT Y4

// Rung HBW_Move_XZ#17
// Offset 110
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D2 0
OUT Y5

// Rung HBW_Move_XZ#18
// Offset 116
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D1 -40
ANDLE D1 40
ANDGE D2 -40
ANDLE D2 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#19
// Offset 135
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5310 V140
POPBOOL
DUPBOOL
ANDE V105 3
MOVE 2990 V140
POPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181

// Rung HBW_Program#9
// Offset 53
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
DUPBOOL
ANDE V106 3
MOVE 3240 V142
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#10
// Offset 85
#BEGIN FMT_COMMENT 
"Task Send<br>Validate X and Y input are not 0 (unselected)"
#END

STR C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S7
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#11
// Offset 109
#BEGIN FMT_COMMENT 
"Task Recieve<br>Validate X and Y input are not 0 (unselected)"
#END

STR C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S1
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#12
// Offset 133
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#13
// Offset 135
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#14
// Offset 137
#BEGIN FMT_COMMENT 
"Task Send - Move<br>Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#15
// Offset 139
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#16
// Offset 142
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#17
// Offset 147
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 150
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 153
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 155
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 157
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 160
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 166
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 169
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 171
#BEGIN FMT_COMMENT 
"Task Send - Move<br>Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 173
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 176
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 100 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 181
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 186
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 189
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 192
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 194
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 196
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 199
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 205
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 208
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 210
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 212
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 215
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 231
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 2000 C99

// Rung HBW_Program#41
// Offset 235
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C99
JMP HBW_Program.S2
MOVE 99 V181

// Rung HBW_Program#42
// Offset 239
NOP

// Rung HBW_Program#43
// Offset 240
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 242
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 244
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#46
// Offset 246
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#47
// Offset 248
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#48
// Offset 251
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#49
// Offset 253
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#50
// Offset 255
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#51
// Offset 258
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#52
// Offset 273
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#53
// Offset 275
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#54
// Offset 278
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#55
// Offset 293
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#56
// Offset 296
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#57
// Offset 299
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#58
// Offset 314
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#59
// Offset 317
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#60
// Offset 319
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#61
// Offset 334
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#62
// Offset 336
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#63
// Offset 338
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#64
// Offset 340
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#65
// Offset 342
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#66
// Offset 344
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#67
// Offset 347
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#68
// Offset 350
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 100 MHR120 1"

// Rung HBW_Program#69
// Offset 366
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#70
// Offset 369
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#71
// Offset 386
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#72
// Offset 402
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#73
// Offset 419
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#74
// Offset 435
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#75
// Offset 439
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#76
// Offset 441
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#77
// Offset 443
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#78
// Offset 446
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#79
// Offset 450
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#80
// Offset 453
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#8
// Offset 56
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#9
// Offset 73
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#10
// Offset 77
SG VGR_Program.S2

// Rung VGR_Program#11
// Offset 79
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 87
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S2

// Rung VGR_Program#13
// Offset 89
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#14
// Offset 91
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#15
// Offset 93
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#16
// Offset 95
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#17
// Offset 97
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S7

// Rung VGR_Program#18
// Offset 99
SG VGR_Program.S3

// Rung VGR_Program#19
// Offset 101
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 109
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 111
SG VGR_Program.S4

// Rung VGR_Program#22
// Offset 113
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 121
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#24
// Offset 123
SG VGR_Program.S5

// Rung VGR_Program#25
// Offset 125
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#26
// Offset 133
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#27
// Offset 135
SG VGR_Program.S6

// Rung VGR_Program#28
// Offset 137
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#29
// Offset 145
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#30
// Offset 147
SG VGR_Program.S7

// Rung VGR_Program#31
// Offset 149
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#32
// Offset 157
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#33
// Offset 172
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#34
// Offset 175
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#35
// Offset 177
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#36
// Offset 192
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#37
// Offset 194
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#38
// Offset 197
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#39
// Offset 212
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#40
// Offset 214
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 217
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#42
// Offset 219
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#43
// Offset 221
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#44
// Offset 223
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#45
// Offset 225
STRN C500
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#19
// Offset 56
STR Y20
AND X17
RST Y20

// Rung MPO_Program#20
// Offset 59
STRND Y20
AND X17
RST Y17

// Rung MPO_Program#21
// Offset 63
STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#22
// Offset 69
STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#23
// Offset 73
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 75
SG MPO_Program.S2

// Rung MPO_Program#25
// Offset 77
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#26
// Offset 85
STR X17
SET Y17

// Rung MPO_Program#27
// Offset 87
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#28
// Offset 90
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#29
// Offset 93
STR X18
RST Y17

// Rung MPO_Program#30
// Offset 95
STR X18
RST Y20

// Rung MPO_Program#31
// Offset 97
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 99
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#33
// Offset 101
SG MPO_Program.S3

// Rung MPO_Program#34
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#35
// Offset 111
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#36
// Offset 129
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#37
// Offset 132
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#38
// Offset 137
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#39
// Offset 143
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#40
// Offset 147
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#41
// Offset 149
SG MPO_Program.S4

// Rung MPO_Program#42
// Offset 151
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#43
// Offset 159
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#44
// Offset 176
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#45
// Offset 181
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#46
// Offset 187
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#47
// Offset 191
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 193
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 195
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 203
STRN X15
AND C800
OUT Y45

// Rung MPO_Program#51
// Offset 206
STRPD X15
OFFDTMR T103 3000 Y43

// Rung MPO_Program#52
// Offset 211
STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#53
// Offset 216
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 218
SG MPO_Program.S6

// Rung MPO_Program#55
// Offset 220
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 228
STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#57
// Offset 231
STRPD X13
SET Y18

// Rung MPO_Program#58
// Offset 234
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#59
// Offset 239
STRPD X13
SET Y47

// Rung MPO_Program#60
// Offset 242
STRPD X14
RST Y47

// Rung MPO_Program#61
// Offset 245
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#62
// Offset 247
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 249
NOP

// Rung MPO_Program#64
// Offset 250
SG MPO_Program.S7

// Rung MPO_Program#65
// Offset 252
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#66
// Offset 260
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#67
// Offset 265
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#68
// Offset 270
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#69
// Offset 275
STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#70
// Offset 292
STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#71
// Offset 309
STRN C801
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STRPD C1610
COPY 0x1 "4 0x0 1 C1621 1"

// Rung SLD_Program#8
// Offset 33
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STRPD C1610
JMP SLD_Program.S2

// Rung SLD_Program#9
// Offset 36
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 38
SG SLD_Program.S10

// Rung SLD_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 48
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#13
// Offset 50
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#14
// Offset 52
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#15
// Offset 54
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#16
// Offset 56
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#17
// Offset 58
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#18
// Offset 63
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#19
// Offset 65
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#20
// Offset 67
SG SLD_Program.S2

// Rung SLD_Program#21
// Offset 69
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#22
// Offset 77
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#23
// Offset 83
#BEGIN FMT_COMMENT 
"This timer gives a delay for the color detection to get "
"correct color."
#END

STRND T200.Timing
OFFDTMR T201 2000 C1601

// Rung SLD_Program#24
// Offset 88
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T201.Timing
JMP SLD_Program.S3

// Rung SLD_Program#25
// Offset 91
SG SLD_Program.S3

// Rung SLD_Program#26
// Offset 93
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#27
// Offset 101
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#28
// Offset 106
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3200 0x1 10000 8000 C1602

// Rung SLD_Program#29
// Offset 111
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#30
// Offset 113
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3200 0x1 20000 18000 C1619

// Rung SLD_Program#31
// Offset 118
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#32
// Offset 120
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3200 0x1 24500 21000 C1620

// Rung SLD_Program#33
// Offset 125
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#34
// Offset 127
#BEGIN FMT_COMMENT 
"Increment W counter when W is in color detection range."
#END

STRPD C1602
INC V3202

// Rung SLD_Program#35
// Offset 130
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 3, jump to S4."
#END

STR C1602
ANDLT V3202 3
JMP SLD_Program.S4

// Rung SLD_Program#36
// Offset 136
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 3, jump to S5."
#END

STR C1619
ANDLT V3203 3
JMP SLD_Program.S5

// Rung SLD_Program#37
// Offset 142
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 3, jump to S6."
#END

STR C1620
ANDLT V3204 3
JMP SLD_Program.S6

// Rung SLD_Program#38
// Offset 148
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#39
// Offset 155
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#40
// Offset 162
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#41
// Offset 169
SG SLD_Program.S4

// Rung SLD_Program#42
// Offset 171
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#43
// Offset 179
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#44
// Offset 183
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#45
// Offset 185
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#46
// Offset 190
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#47
// Offset 192
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#48
// Offset 197
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#49
// Offset 199
STRND C1604
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#50
// Offset 206
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#51
// Offset 209
#BEGIN FMT_COMMENT 
" "
#END

SG SLD_Program.S5

// Rung SLD_Program#52
// Offset 211
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#53
// Offset 219
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#54
// Offset 223
STRN C1606
OUT Y30

// Rung SLD_Program#55
// Offset 225
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#56
// Offset 230
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#57
// Offset 232
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#58
// Offset 237
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#59
// Offset 239
STRND C1607
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#60
// Offset 246
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#61
// Offset 249
SG SLD_Program.S6

// Rung SLD_Program#62
// Offset 251
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#63
// Offset 259
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#64
// Offset 263
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#65
// Offset 265
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#66
// Offset 270
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#67
// Offset 272
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#68
// Offset 277
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#69
// Offset 279
STRND C1612
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#70
// Offset 286
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#71
// Offset 289
SG SLD_Program.S7

// Rung SLD_Program#72
// Offset 291
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#73
// Offset 299
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 10000 C1630

// Rung SLD_Program#74
// Offset 303
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#75
// Offset 305
STRND Y30
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#76
// Offset 312
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRND X37
DEC V3202

// Rung SLD_Storage#2
// Offset 3
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRND X38
DEC V3203

// Rung SLD_Storage#3
// Offset 6
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRND X39
DEC V3204

// Rung SLD_Storage#4
// Offset 9
STR ST1
COPY 0x1 "4 0x0 V3202 MC808 1 0x0 V3203 MC809 1 0x0 V3204 MC810 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"T3","T_HBW_S6","",""
#END

