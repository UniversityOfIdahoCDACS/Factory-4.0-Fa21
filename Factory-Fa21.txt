// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\keepe\Desktop\Factory-4.0-Fa-21-CONTROL\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
52e41f2edcc6105cb2b937497d743d934ee54e1bcf31519ee8a250f621f3fdd7db72b7a6996c3f70
a80e659842ef9ec63430540d8b8831a268154a183b85fb3ef2c77987a5c54c01a15f5a8b9abaf64c
d3b3e3ece993749fd52235bb2d1053b229cfab54d709c5299d1fe1547a64cdcc6f8215e1d86366ba
d0feb9b71e4090595be9f86bf81c13949b3b3291a8d4a64eadef107c886ec4d6043e575529abadec
c194fd894550e6586fae5a30ba3bf2a85c1936d6a4dfd6469b5902cf039fd90c0e2385e8cdab27ca
a7601e525f3f3ff78b2bb44fd533e4b0a35bcbe7c3c03b77ea4ee75fdb0bbdccab33ab27099f1f97
79242fb4aa4a300175001ede521286297844c5fadc938e53c3c978ecad33a9b28f80ec65bde05347
9f667d55731f1d49811d6053641e43983c81d6ec67bc098d12b1a3e04eb6adc0901c7ca9da739e69
2db46727ead0b3ea7a62c8a4c9ad69b5fe6424476fc674f523de458e592c74e99e1ea3629e73e26e
ca4c7347ab5eb3f315d9254cfb1848297103007d9a6b6f16260b0a487a50392fc5970a282e9f81bb
32b68e732ffcf386bc3d7173b21d5011b3e97e1328501eeff93b4a74a82150abea173c4601f7980b
aa3f99486eaf489237aef6a3befa029e1f399a6e13ddb044d9f66362dd267d1a1cf97bde6a8c5f2f
753f5eaa811f9f208ba993fb80422e94089a09480b03ac3ad49b1117c954ef00d2718e45a24aaabf
167801147702465de08c681723cf8998f7d6f2dcde604f24d8ea9f44c96410fe1cbd294aae647b53
9fb8fa43307703e502c3d133f73c026404d46168ebbeb3f92d944a11661be3019cf129e2eb4e54fa
7b0d8e0834e0dbffd8b166f609d37245f214367640d69e8b0b2b82d4eeb16966296972f6e3b04626
f6e1b57c44c346b48ed60d23db935827101b669b2b5aa4c768e4c7a1b50eba86b80d6145caf91a95
87eccb791917bff21d05e5107675a5b602151a0565ebd7c62df4232465fe95978f28e25ea289551e
4e783a3a33cd5d1ba4f6733fcb9ef101df8318de1c48cdd491aa56cf4492c990b392c0f01c6cf2b9
95eec002838460525b28a8de80632c45a82730763281d76033502c10cf4823769c65a9695202a7d2
08fbd9f0d9c818d59c23dafd499df12dee738472dced72df04fa5ca8a65433370124995f9abbf9ce
f0e36c113512f7edd4a9d6bdaab0f1c65d4a07a813641066e8ed0c5ff0078db7f4c60ef98ec06fed
f271362053427af01cbded1068d77a2ef3301fb2c29e865091f69305a98308b35eadb977a601811d
6de9a95e039f1d5996564c6057a213b0f2db584c0300f52f5a17ddbb4245ffaa7375bac6dc580056
7945242cc34cfb59a69152db77f24e7602f343fd341c8abf0e2d2f351005e72e711a31b5089099c7
84971babfc0723a88d5e4f1dae690bcf4ead7a13c977187f9f542006fba1dffd57fd2f3dc078e7dd
40812172b90bf352a41a754970332b2885ad5413c77b2355ab4f73d5865865a7571ef9da8739b012
7f4e83b6286205482e98cc42623f8c7ffbc436dbff85006f26655da51daaef0693eceac0c48474d1
47879945f600689f68d7e2aadf31210733cdf0ed7237a833540aed1774f8c63d60856b5a6cf4e168
b5852e5b510f5cd9629e9a705e870333923f2578567f264c2fbe9105c8b28b095445aca4dbb0bc9b
c9ff56baf9af9933d208c6a4ad475af3bf64379c5d1f8bfbb96008d1ef0d4416c9062b053dbda0cb
18bc605827da11950e891a8fc232cf14b151294c2bcba8ad3474e6fad9760e81d615860f1be2ca25
9100f00f1da417be7f3d285d1f1f157c3bb866df3ab695eeabc2d069da73b8faef9ad8d8d233a009
734d8860112db0058ee8999afa581fb4b54e1a72f813124a6ddc37abdc223110a4f46d2113de6bac
d331f90fd08d40da2df4120ac3a633933605495936fa257dddcf7f6344a9d264410b1c214c745e56
5250b94958650a9f9dce6088d80b0b84a57514dce6570a6a8a821fd0480c3b119b7c5f2461406cd5
b685437ef11acb07f914396776bac727941d3e10a7ef1c478a87e6c2c4e001e113c07fbd093c0de7
5c4870f36f7a3299114f44a1e1ccb0559f15032256a3b14fe720950a7c89d5ea0110c837bc879141
b2182b499ce326de8ba7a4093f59761af0d77c1b7acf0d96add7cf435e9d1ec06f7c3e12853fbb31
eaafce796d9743da32eeaf87ddd471dbce8206ac8bd7f8cd531e359fc852e981b0218816d330f9a6
b21d4618de99bd12a990b9812b0c5275408dc5ee5443d9fabf8e9f36aa6fb47d22f99558dbd3f060
63a4cd24885d0a5b6ab54d286586fed60e67e0ec905e6aa74e243d15b4fe01c8dd0067a788f636ca
5aa39dc7021290ab5eb91cb35f697d2846ec00aac16970e39281c59610259b4aea12eb15ca1967ed
714e27ace6ea83266e6955f5958339dc68f6691a62b034cf6ea1fef1c7ba030d03e9871983f03953
a675c512f29677e805f87c1d6bf2b13741dc4843b4b23553472e85676cc4158d5102ad1553872e79
200672d131187d8d003ca1ed18374d47e294b638aa80abf7d8ed1f44ab5bfb21b135a48947d74515
d085dcd49d9f34414d25679e6271580dcfcfa62b632c96811bb0b4a2668369a057ebe6f0f0b1b330
36465f8a590edcf09ba0f0423c49d22f5207a010889cd4f67592c1e2ee33840894cb635cc8a2c53a
79632e474e02f9bdd3b989f4fe5bfc430b52cdfbf49fa6f372586f4a83321bcf9e3bdb4797495334
cd30f8bda15098caeac041265660a03ff9c184919782a82a1a2238c244a22329f291fc319818883c
29da4633f2a3dfd031ba1c2ef20d7766991bafa3831a7360b121dcba45e5d945b4d7a1d39da92531
bec73d5ffd2eaac64313f1017b0dd8761ec35e448e22cb6594a710efcad08c622a82e07a8161afa4
661efc5bdb603d8acf25d623c65c1f6aa4f4c6fc6d6e5b94a3eb2d4383a8c39a9294ee341476a584
2d67da6465c19c5fe4c345a03931715406a746311299c9e5faf70927b789ea33f35743e1a3cd854a
255147de1289949249989e084fe51b2c7f96536c11939ccdaab8217860242229c7ccbf97c6ce621e
7a34e335beda9625f2617b0efa161c620d414001d4d72e34ac909bcd422000125dcdd7227b481814
7407798cd12876c3fde929516967c10e0fda0635cdf76b8402e2c364c21b1bd1c6532c666e9882fc
0be030c5ca979b10ea6f88c446921466b08b758e7f6cacf26bce0418b2a6ec07d64f0ffb814ed35e
a99b628e9a7c699777be5e3b343c70898f9a2b8e1e8f393e9cca102248504c8c1d54c5fa2c6eab28
f3137693cb3c9bdb7ebf316061191201b7a54db84fd376bca0aabc0a22b747d3ef723f3a17090386
fb6e1befe4987a9e193cdb73990b08be197e6c6f1dedfddfa5a6f65b8ce77963d325fd760c418572
ff9bd5bcfad011071207be8ac2482b5ea466e035925934a9bc4efe3d474414b961daf2855bf8ef13
b9028a2898392aeeb9e6ce11c23855c62a2ea363c7f1a7ca224caa0df88bdeeab4317f5a2306e3cb
eb024d766c616e4cf33db8c9e7bce8af0b879fc5d97d39dbe561709708c81e5ba61a873a094b3be8
d994ddfa582fa0cd4ff0ab4e9df5a2478c6d5fab5d77438d09ec6223c91506b08b744c2455fe754c
8f46bebb35210069ae0418ef19a18fc791c6953ac262e615c1db157827913be796a8069bc1f7dc68
28afe6bf0ed04abdb73db535af32d92650c23a313cda9047ada7c15cc631afc4467c783bef7f6489
81a31c128cc9a7fca8ef2509f8d1327bf7865391babfdd1da60057b2796417d04dcd97d75813c773
064ff1a6f73c510e389a323aaa169de3cd80aca23ca10afdd141c19bdb509bbb530366402689a3e4
da3d97dcc4cc8dd82597a319c3a66250a5c99541c6da541fdfcd52fd8b3d867b432b5af3f8412b58
19510f37663202044c3fa86d12118809ecd33b6b0e006623af02da9bf2a4147f132c627a51e5a522
4b12b36df7008a00100a3a3ccc3fbe4e64507ef40b24cc9cf98d3b90ba29649712bd4b767f9a3b17
9d45f639936f9ff3b460e7fb652ec470054c6e780aa86f5e862d85fb8102a29ff0c60f504d765d77
4284fbf861e643a11d9029292748922f23a9bfcf5dbf2ee112fc4c8d32fd714ad440ce4e58560ba4
bc549c654f160220d35318335bd53dab08b3aee007a5ef88d168b602884982adfa318791a3877bf1
6adb3f14be224a791702be54eff003100180790f80fccff44dd7d28c2db1b3fbb58d965ffb5e615b
f2f96318fa1e99fccddd5ecdaf7f6bd6edb51683f86dba3880d4a4acff7ab09a60bcdf693817102e
c963a87d4077d55fcb3a4612bffc291982095476cdc35510ca93e7a01a36674459ab1562834e465c
a0050c51210a632caf349f8f519932e821eef3c72e7e6fd318a31120319f59f370fd1faf5ecc9e4a
136720c44898b6ab59673bb20f1eae3af1fd940e661a988e15beb46aa209472e6cc98a9c65502943
1cb0fca1f0291e6612c3e9c5498a57549d774e0de0fd66694a94e25deb457caf69f29e2b1b9b5a77
46bfc5ad64c74f2af4cb25cea72dcdb5d51acf90973f3e5ee50a4d41b047cee0d69db5402092aa8e
0ff07ec3b3d1f91e39df4079257fd6ea4a36ca0ef4d32698f840f1776dd51a7b9e373bb6a154a232
7004af75f5f2c6f7762e8c7673dd332800d95efe56504b0b2b303463df596e28e729afbaf8cd972e
b104f2510bfe302908acbfcc95ce25356369a55c90403ac9182fb26fd3604b58b043ac764028ab5e
53b43d0b0fea965b6d3fbe6cd02957b9fd2711797a9224cc4b03bb719cafc4c866a9bd21b9c8701e
dc82bbef545faaca9595697e4f818ec8faf5de6d0efe60485726326b0ab9ec559259a4b9bbfb6236
70ae669913c9b81dedff49a221693b13a30fc43c03553c0323f7886a06609381379c348abc2fb2ef
1ff026b8cd269c11f90776936371c72cafe775edadc46684e2960b9665dfa9335f25ed2104a23278
9cf1306f6130e41ed6c4adafb9db84bc5b14d3e4c44a9b879abca2a2ea54dad7ecb37162ebb741ef
930630d7c57afebcd8ca75b6b52589f9a93d4ed455b6ec8b04a44f88941d27a0b1955b97e7780fe3
4c6a8d8dc82bda1e842b41d77b70cf8c5206a5d9d97e17be777ef7480c02c8286648496875ea8f36
56c3d0e8dec006608336fc46e9340304ce94a08265a7775414ce1aa54cd124234e283fe63516deaf
59eacd8ffc8d7411f9535b46596c38eaada20249c4046fab95a4978efeb0be94323b3ce6ca235785
8f4b971a557f4798fd2032bd0c2e6df19d9c251ff51ef2e28d92bfaa967754d2ce36909b406ad5d1
dc94554d4f7f1c2f27f0ea4907b5d22f2a20cc4723740401ce2b1631d97f77a8b9a65af5880edd1b
33ffc9e9b039e86ad54bc28e25bc389d03be9eecdc897cb99d71182abd72a769bb2c9f3e985c663e
4d53c07f5a01eee7ae96e0be7bc436f0eca7cf85f59b53d7aa06ed64e6ceef7cc6b69b09dd3e644e
db78ec5f9a3436533294eef01feb9825bbb16fae9b69957cb954dca978d4b73bc6a1ee744ba68536
55ae6d37abc7a00cfe9e08ec45f64009f943981faadc515359a84f0dc5f7c8ddb35854d1c0e16277
6730fcd32419a78315a2ccf3e25d575e07bcd9f7d36f01a4ca615c88b4aa9cf8b94fac815c98733f
29aacf7ae7699b1a7d7f6fe19e7c864bb20ac2b9a77cc7b308eedcefc3ab4e5dd38abf4e1c89729a
a1aee46f1c6fa48172ed855bf4d053c6eca9d3dc974f04a1818c773447fc1361e3d50bca0d9d77bb
6e13a2394ae753051529d15fdd46842375886498db5cc7eb9ed8e1feacbdb548b341890a89260313
26c571ffc9b7558da9100e02c48533a02394f795cb27cc6622968974ee41b42f3de8b806202bcbf1
a131c8f0c8d0d8612bdc2bd2ede70127f814fbf7dd6d23bd0e0fed03aad55d1491d72bcb3c59d7da
62ca72c517391db9f6c541b713fa4e86c5762fbc93a97cbc2cbd28864226d4c856cb09c9242db920
74f1a5654034152a5dd1b7826c9695a5800a78b2f8644b78b8238c711f422b909218b31788c64b6d
be730586968294822d6cbfcf447bf4ae0ea79d2c5e9338647c1289568a229b702c1bd5545849789a
691f792dadf36414e4e5e213d1cfd385935f00639916e7e55d5672208220b229e655113c88976a7d
393c3763ace11074357eeecd1db838976b48783351386406c8cf53978920b20ad9f3b63f973ea52e
d1f1495e882bf657027dc210b8df3a63a1e6700cb726ae1924ef9124e55e668c85c2bea070852de6
f1da607c5cd2f6399c91441a9b6a991c74cabba8bce0007af63ec27b54ead9d5a277d003dbfdfa30
d9b9259cab30c314a33c472d1fd76303c7b3b8fc4a00e44158ffc5612fe1e678989083277dc83958
bd913c5da2f186fc1d5fdf17ebb2bac0dae01ceddb984fedffd0dde9720cd94db75e3f8f1618f622
a006e2f739e260232d296270167b9dec6588e52b8e853042c368111202dabd2fcdf5ba188988012a
9f244ea8536db3409220c5eeaef62f7854168e9aeeb0cf8a93509c890cac780244890f0aaa02ab43
7667b634fffcba6bdb90f0e7b5ccb9391fb64907b6e3cb85a116c0d751adbb839a89a3489484d9f0
9996f57dbab0a657a46eb610b8073550dceac4f97a176dcff5b182a4770f5ad0f46b1cdbfa32e71d
d629f360e0adf4bb002971f9f19f0753848d67018c9b36c26ef11e7c93d71db49206cdfeeabd9e74
8529bc0534d6a9789246c8a46de24e28dc5bcee4fbf8010720331d3adfb1b23d06928b866773579e
62c81f95a7ac854c4b411f27742b5ea361891081eb144780a165803c5d80bdef8a91c775b8ca0d7d
c8290323b772bd62af7cc6eab3d3a8a80d7b3bbdb15ff928ea5774e6a3659261b641e41cc6c57232
d7f24f681ef9821153936ae2036e0e0041f1e1ed68efc99c931c3d03b9afc69e7d21d2ad13211aa8
6e0b415374f24a75043cc6a949b7125ecfb79f5a984ad0404a8b57301c06acd49041e8f4e4136782
ca237ccb87e4d426f8f6d553b863b69b5f2dd08f5c1a4776c6aa6a40ff44155ad54db8b58d9ff291
5b3a433cde7c9c4f4b482010ee654e5210b851d53dbd0730877f689be24a034f6cbdfcce8a0d19d6
5143b06d2335a37c9ac8964adb7ecf793358b104cd2ea0d4c7b39372f0f22b01037cc79b69255a83
61e7eb533c05327e864cc756d3af8583d08d600fdeb366734cdf1f51d707452d29b2bc7fde4042df
789ff13f4ac262b97ac1a2e6a34c8fefeb3b03537f60638d53716c301b8f06f8e3ee49555db6e0b9
74014c5780cc95e46fc194ab2fad52d3b1a77e9eb97596dabd4ba7e8cf8c4ffaf7a532fa9405c50f
30404d923a22dae9adb10b832f74ebcc02e115f916357e06bcdf988c036368237fb091123730e807
ae961a00290ffe3cfef02055667bdc911fba50d9bbd0949bd1c30e663e8072ac669a9d6e292914fa
14648a93edd44e01cd3ac337314958f78374e9dab59ee1db31c811e53e666a0c50e071bc82fdd166
f0a3d3a22bb8932d8096feba6c558686316967c8de73a9c4392ad3b20a12648604c3d8bb0ed4881c
2e40543f76508e9ad4177a379dd8f2ac967d324bff0b32ade900832a786181d2f1edc4360ef8a601
f3267222efb3b67b6e05a5282c0daa922313d9bb01d4ae5f9b0936fe1fa0352a304defa15936020b
f5a66725659f94e6962df17f584459b1b23954af5ef6b597ec213cc2d2600e07f927e0709ef13ef4
9bc8e6a1629226698259dbe311a5d4c2dcb1977e2c91181eb810c29ac027a27877351fd511ad0316
2691b3f463b820d1d92db7f00a33075b19244336be8888204215153e11335cde7e5198ee80c45e28
948d80c6fbbfa4765e04fbd6b3c0ca616cb1b436ae5e8addcbefdae4d132545cd89bed79006f2397
b56f2e7f0e2cb04c63e7352e5af1eae43b198c5f06b41239043fce897edeb99c89772d34b4d2a8ae
6a1a79f3da157bc8d1a18908d7723934128fc93c5200c646636b4012676032d0f4f9ff25d7048be8
a2c10043700a54594204ad67e6bdbbf1c652eb284df57bae9b590a61521ce8b7e874d8978224293c
7db97435554d0a5f5efd71db82bccd9256eac906aa496a5ca6c8a5d4729b55344c59ea8882679475
341ed264d72533ee341b063236e344738d967f119c540b41c15bf895d6620a05ca2dca7d70d8b18e
8556038e0ef4cbcb4271a7c2dca86469e59ef0ec5efe65fc4ff600c947fc014123755c13eab5424f
79b7dd132cd9e6404c3768a465e3d544e91432b8e296af6253239e20aa1d70c62dc5960d03dca2fc
5a19b5ec96f9b99af0c3e21cb60bd006c641465ca9a2e706be11611e8cf1e78ec85df1b55575332c
c94aa384513b1a1fb65843fd23c3b5fe028ade5d067f2e93783abd49cc6147669fcdaa6daf7397f9
bd65b65ba1cb49d7441f1a614af11bd5beee05ef6edb36806bb71363fda03c0945b44577f6d21084
1a88778e7f09959a8fa70b845643f8549c88f03c368053a27a7b00278437f6c963d38cc7328a8186
d307fc96686fa5a05777a5a63be18be897f6fb1aba8dccb1cfa6f92a1d9055ed4e791c56b9f30cca
fa9a93b1b062890db6fe4d66b915816fb84df1b3a4aa376fc6d0e8bca084272afc2d0779fcd3a72d
0ea67ddb845c9a373f796ba12d001552313325c83bd45e4f157257736bd3d62b761d6adc4669db78
bbefa35be5008072a54c207031e1e7651035b4a87f329cc84ac4ad713e02896bd6223e0f0672e588
60282510e889c29802c897581e7f9d080565f34c9cb23476d028dacc35d8b9f9010e89cda4580a2f
14b7eff6e305efcebce0847ba4c2715ffdeced047d72519a7c830eff0ee21961fc27027ccf8cdbf7
e09eb6a6281e210fa4815070cbde8f9d6b37b4f0830f87772cb820275400f24dfa8960097bf1d002
fc3f974b6ee4d1ccb69e984de314d3c6842107652b786348b98e65b121526225e39a0e395844f2d2
e2821047d5ed945b5fc0fd0ba79d694e490894543f10549ebe0ee7d9ac1950cde87a2b6ac06e643d
1400f235264db0c9e65e68ecce711498498d43ad08f3222da79b89a1c217ed8ddb2c3d09d4808b70
ee0bfc52c4c56b64dd772bbefbd1f54e55bc61305c361dc23e0f43da5b89f743fc6e4536a3776443
5af380f12f70cfea1dd6a5563a8ccf84b5001d5933615ea3abd37f5704077d69d0b569f36e0c9877
74bd388531069b782cbd6f08422f0e1cc35c95e024a20ead0a4f564b4a5648db13678ca82d93234c
2480c733aee85ce3acd153ddf119ba7ad5b7924185bc51274030741da14094d05e2e99b283c46515
8fcb330e257b4f60084da52016df3421750d63e3320cee9f1004eab81f30119caa3dbd64a0d8da4e
4365def5e8318095c08499c89f2a4ac870d9b38a600d2ad9d7bbf0563a2c115c9946c0477cdb938f
7a9239b38be1db53f5af0240f5b9406a09bd882f0f953e6cb56c46a06ff3f2c9e71e50fc5ede8809
f6359d1832a99d06d438786e4f395637de9d100f8047d68c7ea3ad112f6389e35250be9792d33d30
3cd809670e5b73bdfda08fd85026928f14afedff09dc1ef56beeb5675e477867617a6dbb386582c1
8ca4e881c1871c59f8c12eb2f71389471149e14b251150082757c4a7397c410afbb5edb9599ea026
d9ddc982b02af3df41ce13b41454cf5bfa92d6a3876d91bf1a3de6e3326cfc58ed0176d4e94628bc
c85ca1eb831d191f64f061bd524a8376536a55dd0edfb1bd5984b1936fdc2bb8fbb36903056eb25f
4ad2a4c81d62b1fdafc3d447115516d2db8f9c394def7634c6cec893b0f8774ef66dc5ae565bf026
3f23f8e925f989136ee31d6a057fb8898cb35115e87c5eab257f5a8d1c78206f40e0d6c1628cda04
ece81bf2d97d45a6017ddfa6059f9d77e810b7b22783cd39edcf25b7dd4875a9c9265257bc33298a
0561a6f48256fbcfef884e774accdcc66a2761da9f8ed46b17a5dc33588c08719e42a6f02f56e719
74f991546c5a9f5f927e2f6299c6e79d9bb6fce385b3c73696b5a98896ce06114f0cb70ca9f0c353
68d5065d26430ba98a9c2d791c07d103036c131a0024351de734ea7f98995f798954504fe7c9c422
610f0bfa69cdd799fe0cad93780649b55f0a8fd966dce4c6928796a2782fb1a11534c5fe7e5c0d58
252d51f1961c38e63a1066367b92f203753adfda99a5ee46192d5aed3c88b9c363c7e3b4dae3ce4c
3bcc7dfa57a12ec50c6f20c58157d2557303e20c15c5f347ef7636332a678db041b5d21640e70151
e57187aa1b30835ff03679341d57cc485c2100decc74b3da4b12e587c0d737e04c0bea8e15295531
a7cd2a375056351b6d2c63a568afa4e570e15ef4fad82ef4381ef375ce59e0ae0c63d9873f54f471
c21101999fd8ebf4d6e8c6867ae408d1469828efa13d16f9935a142d3ee346d57090d8e79189410c
41a70efda6a454380b979c7cbc0f071cd00a671be415f89d01f79a2b80e38dda1b0e1a6fcd0c4ebc
67196cab21cec2e190dc84c8f32db0a9b118b8af66dc12fb56a4f2d31ba693a91303e8af6637dc97
732eb26783e84864ea2de45520b6b08bf9c94a2bb7cf6b6e0b334794db080c84bc642b3b4aac5a11
d4111096edbbd4e2ecb9fd2e6c743d6e1f09a378ea39eed7f6df4ece11191a5dd3421e1c1f4ec8be
46cc10e7969389a9bee48c1a7fe2d01e3af9d06a6b31c3c815866e7760f0c9b848aa22a476a16da5
ee2f2ba681a8163076bbe0d5b28ec8cdd0631dc70b872f8e95715429b8213e6f4f7c0ef66399e064
c064b473263b48d1ebd3d5d95ce41dfe60c3a9d3c66215c6b20b67f4660e6bd7bcbed8acc41db463
ce35da84cb0f1d4c3245109fff123dfc74cf74aaecbd661e1a4c60a256a6167bc815c3a4e0e267ab
662893e75fcddc01fe236f08d6ef96dd9f7710098affe7ec46b3f78c165599859b362eea72053cde
ae45c1c389eb198a6e1b848843367e0d6495d41111057085525ec853f257db2a5e8aa733d3779492
9421ddaa58b7282b242f8c67bd8681f30e51e6d297d3e0045db0f0bf0206a7b9cd7dd9b096fa341b
8fc7f9bb61dd27af73fca1fa7778c8078aa097a1fc6d7c4745747d6d176b71a96b842aa310790f75
acbe92a7b9514cbfef09a79cce830ea346d7af1c7f1df5aac60568daf79197304b5fc36e0352a598
6a7086cc238782c47e123d744bffdbd5eb7eae35bed734a44a6a0c91ff61c4e5153121da28400986
ba2cab6fb1a95da646e0633d8a7217eac37958edbbce62415f719a14e98b4d32512104cc425870fa
e097290ca31bc8c22102ed2f75d7dc9236ee2f2d3d4201e9bf3cfbee09104637f3949637310f869e
621e2fb292b82b45705e09a01791f7f90d367e24766bd7ea395c47e903f80648798e001d7ff0a4f0
dae8e5c053a47cdc86eef0509e4e2f7adc1efa91807f1e3c4e4a66555a0937d5810a1dcb65559c93
443bc265f62423674f3405b5a3ed4625f4a56527f2f3256598a435891371986fcc4183e7f077a034
d56652d8d990b4f8d068a2e7c894086e41d29a07fd492bfc73322591c0e28a4d47e070c40a855be3
69884122d8f4eefb50c4d9a760f7193125988c5137810b67f16cd913d09878f23cb4783c0c1ae3ef
f96771845534cf2207b47e9f66debb31e6f6585ff3fdeb1c64bd6ccdfbd606ce42dcba57cd9e4b03
b4916fe06509197af2bd18d5fdaa073368fcade3b4189a19e1f2663db1b5cb5cd00b1d1cd64631f3
7e1dc660fc829c1089f6c020f37b01eb9f56e7b90ef50283f1297eebd578e2f48acda7adac527d15
c765be3143b9805396d1c9b36fbbdad8238817a073025075c2a4b8e8a96b4fcab973837414cb5eca
98d534f7c4bca8337406c7974f3c7bd87395ebd8876a194703853cd071e33c28182702837b7a803f
5583c74cd5d1d633df066d92c2ce89e860396a7ddfe4edcda6240569e3d1a253bdc9453ec9f7e84e
c2903986f15a51b44aa9ea22edecb7f46d1e99020661e750809fe7dae5527a25035b7f740ecf7355
0665eee8ef6964e734b957b37812b8ad13e5076fb969352b3a5f2b82dd5159405ee755e88dc72689
e1bdaf805fc340481f95f12f020e38fb3497624cf414503a412a2b964cc6eaa60a1ea3d8720145f7
fd75768ccfaf47bf3433690ec7e9c1ca068a3ba298482fd9919166969b343b3f04c1bedf8d71c000
d779edd294f9584a98625134e3891add525558752ff9a38d8b25c41b95acff6a5139e55a93624bf7
29cff4d4d005fa0f834e4f0e9a81a631aa263b1ff4619046055d8f97414e381d13fbaab8d6539c3d
4e8bad9c5b5365efbe906426755fedd2d59c8ac348d2395586754c751c3c65c29a31e1e053ba5ed5
b8a3034fbda7399e
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
 HBW_SetTarget_XZ <Virtual>  0
 PID_10 PID  0
 VGR_Movement TASK  0 -1
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 V801 MHR799 1"

// Rung VGR_Copy_State#2
// Offset 37
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1"

// Rung MPO_Copy_State#2
// Offset 31
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 MC808 C1621 1"

// Rung SLD_Copy_State#2
// Offset 25
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_SetTarget_XZ
$LGCMOD HBW_SetTarget_XZ

// Rung HBW_SetTarget_XZ#1
// Offset 0
NOP

// Rung HBW_SetTarget_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5280 V140
POPBOOL
ANDE V105 3
MOVE 2990 V140

// Rung HBW_SetTarget_XZ#3
// Offset 24
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
ANDE V106 3
MOVE 3240 V142

// Rung HBW_SetTarget_XZ#4
// Offset 47
NOP

// Rung HBW_SetTarget_XZ#5
// Offset 48
RET

// End of Code Block HBW_SetTarget_XZ
$LGCEND HBW_SetTarget_XZ

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
STR ST1
PID PID_10 0x60 $HBW_Encoder_X.Acc 0 8100 0.0 8100.0 """""" 20 100 WY0 DST511

// Rung HBW_Move_XZ#10
// Offset 57
STR ST1
MOVE V140 PID_10.SP

// Rung HBW_Move_XZ#11
// Offset 60
STR ST1
MOVE $HBW_Encoder_X.Acc PID_10.PV

// Rung HBW_Move_XZ#12
// Offset 63
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#13
// Offset 78
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D140 0
OUT Y50

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D140 0
OUT Y51

// Rung HBW_Move_XZ#15
// Offset 90
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#16
// Offset 99
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V120

// Rung HBW_Move_XZ#17
// Offset 114
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D142 0
OUT Y4

// Rung HBW_Move_XZ#18
// Offset 120
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D142 0
OUT Y5

// Rung HBW_Move_XZ#19
// Offset 126
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D140 -40
ANDLE D140 40
ANDGE D142 -40
ANDLE D142 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#20
// Offset 145
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Test slot X & Y target value for out of range<br>"
"if X value greater than 4, fault code 105<br>"
"if Y value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#9
// Offset 38
#BEGIN FMT_COMMENT 
"Task Send<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if conveyor light barriers broken suggesting a pallot "
"is still there."
#END

STR C101
ANDN C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
AND X1
AND X2
JMP HBW_Program.S7
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
STRN X1
ORN X2
ANDSTR
JMP HBW_Program.S2
MOVE 107 V181

// Rung HBW_Program#10
// Offset 73
#BEGIN FMT_COMMENT 
"Task Recieve<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if outer conveyor light barrier no broken suggesting "
"no pallot is there."
#END

STR C102
ANDN C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
ANDN X2
JMP HBW_Program.S13
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
AND X2
JMP HBW_Program.S2
MOVE 108 V181

// Rung HBW_Program#11
// Offset 105
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#12
// Offset 107
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#13
// Offset 109
#BEGIN FMT_COMMENT 
"Task Send - Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 111
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#15
// Offset 114
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"

// Rung HBW_Program#16
// Offset 123
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#17
// Offset 128
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 131
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 134
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 136
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 138
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 141
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 147
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 150
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 152
#BEGIN FMT_COMMENT 
"Task Send - Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 154
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 157
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 162
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 167
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 170
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 173
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 175
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 177
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 180
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 186
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 189
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 191
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 193
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 196
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 212
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 3000 C80

// Rung HBW_Program#41
// Offset 216
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#42
// Offset 220
NOP

// Rung HBW_Program#43
// Offset 221
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 223
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 225
#BEGIN FMT_COMMENT 
"Reserved Stage<br>"
"Just incase I need an extra stage for Task Send"
#END

SG HBW_Program.S12

// Rung HBW_Program#46
// Offset 227
#BEGIN FMT_COMMENT 
"Fault<br>Should never hit this reserve stage"
#END

STR ST1
JMP HBW_Program.S2

// Rung HBW_Program#47
// Offset 229
#BEGIN FMT_COMMENT 
"Task Receive - Conveyor In<br>& Move XZ to Conveyor"
#END

SG HBW_Program.S13

// Rung HBW_Program#48
// Offset 231
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 10 V131

// Rung HBW_Program#49
// Offset 234
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 45
OUT Y49

// Rung HBW_Program#50
// Offset 250
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x1 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
AND X1
ONDTMR T4 3000 C80

// Rung HBW_Program#51
// Offset 255
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#52
// Offset 259
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2750 V142

// Rung HBW_Program#53
// Offset 264
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#54
// Offset 269
#BEGIN FMT_COMMENT 
"Movements completed<br>"
"Conveyor inner beam broken and XZ move complete"
#END

STR HBW_Move_XZ.Done
ANDN X1
JMP HBW_Program.S14
HALT HBW_Move_XZ

// Rung HBW_Program#55
// Offset 273
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#56
// Offset 276
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 278
#BEGIN FMT_COMMENT 
"Task Receive - Pick"
#END

SG HBW_Program.S14

// Rung HBW_Program#58
// Offset 280
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#59
// Offset 283
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#60
// Offset 289
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S15

// Rung HBW_Program#61
// Offset 292
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#62
// Offset 294
#BEGIN FMT_COMMENT 
"Task Receive - Move to Storage"
#END

SG HBW_Program.S15

// Rung HBW_Program#63
// Offset 296
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#64
// Offset 299
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"
OUT C99

// Rung HBW_Program#65
// Offset 309
STRPD C99
MATH V142 "V142 - 100"

// Rung HBW_Program#66
// Offset 319
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#67
// Offset 324
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S16
HALT HBW_Move_XZ

// Rung HBW_Program#68
// Offset 327
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#69
// Offset 330
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#70
// Offset 332
#BEGIN FMT_COMMENT 
"Task Receive - Place<br>Place onto storage shelf"
#END

SG HBW_Program.S16

// Rung HBW_Program#71
// Offset 334
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#72
// Offset 337
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#73
// Offset 343
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S17

// Rung HBW_Program#74
// Offset 346
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#75
// Offset 348
#BEGIN FMT_COMMENT 
"Task Receive - Move to Idle"
#END

SG HBW_Program.S17

// Rung HBW_Program#76
// Offset 350
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#77
// Offset 353
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 4300 V140
MOVE 1400 V142

// Rung HBW_Program#78
// Offset 358
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#79
// Offset 363
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S1
HALT HBW_Move_XZ

// Rung HBW_Program#80
// Offset 366
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#81
// Offset 369
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#82
// Offset 371
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#83
// Offset 373
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#84
// Offset 375
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#85
// Offset 378
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#86
// Offset 380
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#87
// Offset 382
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#88
// Offset 385
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#89
// Offset 400
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#90
// Offset 402
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#91
// Offset 405
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#92
// Offset 420
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#93
// Offset 423
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#94
// Offset 426
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#95
// Offset 441
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#96
// Offset 444
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#97
// Offset 446
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#98
// Offset 461
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#99
// Offset 463
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#100
// Offset 465
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#101
// Offset 467
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#102
// Offset 469
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#103
// Offset 471
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#104
// Offset 474
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#105
// Offset 477
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 100 MHR120 1"

// Rung HBW_Program#106
// Offset 493
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#107
// Offset 496
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#108
// Offset 513
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#109
// Offset 529
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#110
// Offset 546
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#111
// Offset 562
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#112
// Offset 566
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#113
// Offset 568
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#114
// Offset 570
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#115
// Offset 573
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#116
// Offset 577
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#117
// Offset 580
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"Reset Stage"
#END

SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Reset VGR Fault Code"
#END

STR ST1
MOVE 0 V801

// Rung VGR_Program#7
// Offset 25
NOP

// Rung VGR_Program#8
// Offset 26
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#9
// Offset 43
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#10
// Offset 60
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#11
// Offset 77
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#12
// Offset 81
SG VGR_Program.S2

// Rung VGR_Program#13
// Offset 83
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#14
// Offset 91
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S1

// Rung VGR_Program#15
// Offset 93
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#16
// Offset 95
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#17
// Offset 97
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#18
// Offset 99
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#19
// Offset 101
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S7

// Rung VGR_Program#20
// Offset 103
#BEGIN FMT_COMMENT 
"Move Crane from 0 state to HBW"
#END

SG VGR_Program.S3

// Rung VGR_Program#21
// Offset 105
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#22
// Offset 113
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE -2000 V810

// Rung VGR_Program#23
// Offset 116
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 100 V811

// Rung VGR_Program#24
// Offset 119
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 100 V812

// Rung VGR_Program#25
// Offset 122
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#26
// Offset 127
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
JMP VGR_Program.S4
HALT VGR_Movement

// Rung VGR_Program#27
// Offset 130
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S15

// Rung VGR_Program#28
// Offset 134
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#29
// Offset 136
#BEGIN FMT_COMMENT 
"Pick up disk from HBW"
#END

SG VGR_Program.S4

// Rung VGR_Program#30
// Offset 138
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#31
// Offset 146
STR ST1
SET Y28

// Rung VGR_Program#32
// Offset 148
STR ST1
ONDTMR T51 100 C414

// Rung VGR_Program#33
// Offset 152
STR C414
SET Y29

// Rung VGR_Program#34
// Offset 154
STR C414
ONDTMR T52 100 C415

// Rung VGR_Program#35
// Offset 158
STR C415
JMP VGR_Program.S5

// Rung VGR_Program#36
// Offset 160
#BEGIN FMT_COMMENT 
"Move crane from HBW to MPO"
#END

SG VGR_Program.S5

// Rung VGR_Program#37
// Offset 162
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#38
// Offset 170
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 400 V810

// Rung VGR_Program#39
// Offset 173
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 0 V811

// Rung VGR_Program#40
// Offset 176
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 V812

// Rung VGR_Program#41
// Offset 179
STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#42
// Offset 184
STR VGR_Movement.DoneThisScan
JMP VGR_Program.S6
HALT VGR_Movement

// Rung VGR_Program#43
// Offset 187
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S15

// Rung VGR_Program#44
// Offset 191
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#45
// Offset 193
#BEGIN FMT_COMMENT 
"Position Crane to drop disk onto MPO"
#END

SG VGR_Program.S6

// Rung VGR_Program#46
// Offset 195
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#47
// Offset 203
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 100 V811

// Rung VGR_Program#48
// Offset 206
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 100 V812

// Rung VGR_Program#49
// Offset 209
STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#50
// Offset 214
STR VGR_Movement.DoneThisScan
JMP VGR_Program.S7
HALT VGR_Movement

// Rung VGR_Program#51
// Offset 217
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#52
// Offset 221
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#53
// Offset 223
#BEGIN FMT_COMMENT 
"Release vacuum and turn off compressor"
#END

SG VGR_Program.S7

// Rung VGR_Program#54
// Offset 225
STR ST1
RST Y29

// Rung VGR_Program#55
// Offset 227
STR ST1
ONDTMR T53 100 C416

// Rung VGR_Program#56
// Offset 231
STR C416
RST Y28

// Rung VGR_Program#57
// Offset 233
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C416
JMP VGR_Program.S1

// Rung VGR_Program#58
// Offset 235
SG VGR_Program.S8

// Rung VGR_Program#59
// Offset 237
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#60
// Offset 245
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#61
// Offset 247
#BEGIN FMT_COMMENT 
"Manual Control"
#END

SG VGR_Program.S20

// Rung VGR_Program#62
// Offset 249
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#63
// Offset 257
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#64
// Offset 272
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#65
// Offset 275
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#66
// Offset 277
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#67
// Offset 292
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#68
// Offset 294
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#69
// Offset 297
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#70
// Offset 312
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#71
// Offset 314
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#72
// Offset 317
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#73
// Offset 319
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#74
// Offset 321
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#75
// Offset 323
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#76
// Offset 325
STRN C500
JMP VGR_Program.S1

// Rung VGR_Program#77
// Offset 327
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG VGR_Program.S30

// Rung VGR_Program#78
// Offset 329
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#79
// Offset 337
STR ST1
HALT VGR_Movement

// Rung VGR_Program#80
// Offset 339
STR ST1
ONDTMR T99 15000 C700

// Rung VGR_Program#81
// Offset 343
STR C700
JMP VGR_Program.S1

// Rung VGR_Program#82
// Offset 345
NOP

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#19
// Offset 56
STR Y20
AND X17
RST Y20

// Rung MPO_Program#20
// Offset 59
STRND Y20
AND X17
RST Y17

// Rung MPO_Program#21
// Offset 63
STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#22
// Offset 69
STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#23
// Offset 73
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 75
SG MPO_Program.S2

// Rung MPO_Program#25
// Offset 77
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#26
// Offset 85
STR X17
SET Y17

// Rung MPO_Program#27
// Offset 87
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#28
// Offset 90
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#29
// Offset 93
STR X18
RST Y17

// Rung MPO_Program#30
// Offset 95
STR X18
RST Y20

// Rung MPO_Program#31
// Offset 97
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 99
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#33
// Offset 101
SG MPO_Program.S3

// Rung MPO_Program#34
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#35
// Offset 111
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#36
// Offset 129
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#37
// Offset 132
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#38
// Offset 137
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#39
// Offset 143
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#40
// Offset 147
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#41
// Offset 149
SG MPO_Program.S4

// Rung MPO_Program#42
// Offset 151
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#43
// Offset 159
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#44
// Offset 176
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#45
// Offset 181
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#46
// Offset 187
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#47
// Offset 191
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 193
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 195
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 203
STRN X15
AND C800
OUT Y45

// Rung MPO_Program#51
// Offset 206
STRPD X15
OFFDTMR T103 3000 Y43

// Rung MPO_Program#52
// Offset 211
STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#53
// Offset 216
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 218
SG MPO_Program.S6

// Rung MPO_Program#55
// Offset 220
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 228
STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#57
// Offset 231
STRPD X13
SET Y18

// Rung MPO_Program#58
// Offset 234
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#59
// Offset 239
STRPD X13
SET Y47

// Rung MPO_Program#60
// Offset 242
STRPD X14
RST Y47

// Rung MPO_Program#61
// Offset 245
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#62
// Offset 247
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 249
NOP

// Rung MPO_Program#64
// Offset 250
SG MPO_Program.S7

// Rung MPO_Program#65
// Offset 252
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#66
// Offset 260
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#67
// Offset 265
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#68
// Offset 270
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#69
// Offset 275
STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#70
// Offset 292
STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#71
// Offset 309
STRN C801
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STRPD C1610
COPY 0x1 "4 0x0 1 C1621 1"

// Rung SLD_Program#8
// Offset 33
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STRPD C1610
JMP SLD_Program.S2

// Rung SLD_Program#9
// Offset 36
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 38
SG SLD_Program.S10

// Rung SLD_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 48
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#13
// Offset 50
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#14
// Offset 52
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#15
// Offset 54
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#16
// Offset 56
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#17
// Offset 58
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#18
// Offset 63
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#19
// Offset 65
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#20
// Offset 67
SG SLD_Program.S2

// Rung SLD_Program#21
// Offset 69
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#22
// Offset 77
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#23
// Offset 83
#BEGIN FMT_COMMENT 
"This timer gives a delay for the color detection to get "
"correct color."
#END

STRND T200.Timing
OFFDTMR T201 2000 C1601

// Rung SLD_Program#24
// Offset 88
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T201.Timing
JMP SLD_Program.S3

// Rung SLD_Program#25
// Offset 91
SG SLD_Program.S3

// Rung SLD_Program#26
// Offset 93
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#27
// Offset 101
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#28
// Offset 106
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3200 0x1 10000 8000 C1602

// Rung SLD_Program#29
// Offset 111
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#30
// Offset 113
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3200 0x1 20000 18000 C1619

// Rung SLD_Program#31
// Offset 118
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#32
// Offset 120
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3200 0x1 24500 21000 C1620

// Rung SLD_Program#33
// Offset 125
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#34
// Offset 127
#BEGIN FMT_COMMENT 
"Increment W counter when W is in color detection range."
#END

STRPD C1602
INC V3202

// Rung SLD_Program#35
// Offset 130
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 3, jump to S4."
#END

STR C1602
ANDLT V3202 3
JMP SLD_Program.S4

// Rung SLD_Program#36
// Offset 136
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 3, jump to S5."
#END

STR C1619
ANDLT V3203 3
JMP SLD_Program.S5

// Rung SLD_Program#37
// Offset 142
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 3, jump to S6."
#END

STR C1620
ANDLT V3204 3
JMP SLD_Program.S6

// Rung SLD_Program#38
// Offset 148
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#39
// Offset 155
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#40
// Offset 162
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#41
// Offset 169
SG SLD_Program.S4

// Rung SLD_Program#42
// Offset 171
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#43
// Offset 179
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#44
// Offset 183
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#45
// Offset 185
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#46
// Offset 190
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#47
// Offset 192
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#48
// Offset 197
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#49
// Offset 199
STRND C1604
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#50
// Offset 206
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#51
// Offset 209
SG SLD_Program.S5

// Rung SLD_Program#52
// Offset 211
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#53
// Offset 219
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#54
// Offset 223
STRN C1606
OUT Y30

// Rung SLD_Program#55
// Offset 225
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#56
// Offset 230
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#57
// Offset 232
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#58
// Offset 237
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#59
// Offset 239
STRND C1607
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#60
// Offset 246
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#61
// Offset 249
SG SLD_Program.S6

// Rung SLD_Program#62
// Offset 251
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#63
// Offset 259
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#64
// Offset 263
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#65
// Offset 265
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#66
// Offset 270
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#67
// Offset 272
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#68
// Offset 277
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#69
// Offset 279
STRND C1612
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#70
// Offset 286
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#71
// Offset 289
SG SLD_Program.S7

// Rung SLD_Program#72
// Offset 291
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#73
// Offset 299
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 10000 C1630

// Rung SLD_Program#74
// Offset 303
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#75
// Offset 305
STRND Y30
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#76
// Offset 312
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRND X37
DEC V3202

// Rung SLD_Storage#2
// Offset 3
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRND X38
DEC V3203

// Rung SLD_Storage#3
// Offset 6
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRND X39
DEC V3204

// Rung SLD_Storage#4
// Offset 9
STR ST1
COPY 0x1 "4 0x0 V3202 MC808 1 0x0 V3203 MC809 1 0x0 V3204 MC810 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

// Beginning of Code Block VGR_Movement
$TSK VGR_Movement

// Rung VGR_Movement#1
// Offset 0
NOP

// Rung VGR_Movement#2
// Offset 1
STR ST1
RANGECHECK V810 0x0 50 -8000 C780
RANGECHECK V811 0x0 1000 0 C781
RANGECHECK V812 0x0 1000 0 C782

// Rung VGR_Movement#3
// Offset 14
#BEGIN FMT_COMMENT 
"Set fault state if out of range"
#END

STR C780
OR C781
OR C782
MOVE 1 V801

// Rung VGR_Movement#4
// Offset 19
#BEGIN FMT_COMMENT 
"Set Crane Rotation Direction (Encoder Values decrement on "
"CCW Rotation)"
#END

STRGE $VGR_Encoder_Rot.Acc V810
OUT C411

// Rung VGR_Movement#5
// Offset 24
#BEGIN FMT_COMMENT 
"Set Crane X Direction"
#END

STRLE $VGR_Encoder_X.Acc V811
OUT C412

// Rung VGR_Movement#6
// Offset 29
#BEGIN FMT_COMMENT 
"Set Crane Y Direction"
#END

STRLE $VGR_Encoder_Y.Acc V812
OUT C413

// Rung VGR_Movement#7
// Offset 34
#BEGIN FMT_COMMENT 
"Initiate starting values"
#END

STR ST1
MOVE 0 D810
MOVE 0 D811
MOVE 0 D812

// Rung VGR_Movement#8
// Offset 41
REPEAT

// Rung VGR_Movement#9
// Offset 42
#BEGIN FMT_COMMENT 
"Calculate Rotation position difference"
#END

STR ST1
MATH D810 "$VGR_Encoder_Rot.Acc + V810"

// Rung VGR_Movement#10
// Offset 51
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Movement#11
// Offset 66
#BEGIN FMT_COMMENT 
"If crane needs to rotate CCW to get to target"
#END

STR C411
ANDGE D810 0
OUT Y27

// Rung VGR_Movement#12
// Offset 72
#BEGIN FMT_COMMENT 
"If crane needs to rotate CW to get to target"
#END

STRN C411
ANDLE D810 0
OUT Y26

// Rung VGR_Movement#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calculate X position difference"
#END

STR ST1
MATH D811 "$VGR_Encoder_X.Acc - V811"

// Rung VGR_Movement#14
// Offset 87
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Movement#15
// Offset 102
#BEGIN FMT_COMMENT 
"If crane needs to extend X+ to get to target"
#END

STR C412
ANDLE D811 0
ANDLE D810 40
ANDGE D810 -40
OUT Y25

// Rung VGR_Movement#16
// Offset 116
#BEGIN FMT_COMMENT 
"If crane needs to retract X- to get to target"
#END

STRN C412
ANDGE D811 0
ANDLE D810 40
ANDGE D810 -40
OUT Y24

// Rung VGR_Movement#17
// Offset 130
#BEGIN FMT_COMMENT 
"Calculate Y position difference"
#END

STR ST1
MATH D812 "$VGR_Encoder_Y.Acc - V812"

// Rung VGR_Movement#18
// Offset 139
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Movement#19
// Offset 154
#BEGIN FMT_COMMENT 
"If crane needs to extend Y- to get to target"
#END

STR C413
ANDLE D812 0
ANDLE D811 40
ANDGE D811 -40
OUT Y23

// Rung VGR_Movement#20
// Offset 168
#BEGIN FMT_COMMENT 
"If crane needs to retract Y+ to get to target"
#END

STRN C413
ANDGE D812 0
ANDLE D811 40
ANDGE D811 -40
OUT Y22

// Rung VGR_Movement#21
// Offset 182
#BEGIN FMT_COMMENT 
"Exit Conditions for all movements"
#END

STRLE D810 40
ANDGE D810 -40
ANDLE D811 40
ANDGE D811 -40
ANDLE D812 40
ANDGE D812 -40
ONDTMR T50 500 C499

// Rung VGR_Movement#22
// Offset 209
UNTIL C499

// End of Code Block VGR_Movement
$TSKEND VGR_Movement

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"V810","VGR_Rot_Target","",""
"V811","VGR_X_Target","",""
"V812","VGR_Y_Target","",""
"T3","T_HBW_S6","",""
#END

