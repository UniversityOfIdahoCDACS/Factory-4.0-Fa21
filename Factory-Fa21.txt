// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\njost\OneDrive\Documents\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
ae18e3d2203aeca04e45cbb58188dd33fe55deef7f636d198cabfd890d66fdaebd03910710edbede
f653bcd3f212f32c4c6c668e94158c8d4f105e4562d0b52e3f7ca198ca5efd209fb8e2a12f1f9ebe
93897206671b268a797747f400272369b2a3920c27f3cf217014bd1882482e70fb7f34f05d5287cd
b66dd7dfe38347685869dec28ec84f985da44a6567a7a9b6921dcb5edb46bbae1a2f37ef6749dc3e
0929f8104385523ff8b4cee660a493e0e62231e4cbf4e456935e43a5ced89d58a88ea5fb2ccd0fb9
0761a3e022cb414c3594e5f17dde5a27518c5a5cd8eb15ba3e769d3bf3fbba659a661308b74c6aed
a3148c5b720a46fb47fe093fe59392e30c3e40e641836e0e36f77b3e79d7076e33d9cbb5b9e4750e
c9ab620ba5c376ec4c54907428d748e435f7137ae728601fc6ea77c4cefe2e73e5124df39fc7ad10
8f14801bc80322ea475f9cfbe3f65deccb6889029a93a44263cd84c07dde232d7edd188bdae4b727
1bec4b683ad6952a8b0dd7d945f0dc87b535fdc0256a5c32d7a740f39b4bd79a16a60ff14e2a6f94
b1624c0a1c7a425d1337619159aac6f5eb0e1afc64718a7cbf4f262576e3461837eb89f76d2914b2
0db3e46699aa05cbf825400cc05c737e2d164cc7d79d6002ab948bc7b99f48d11987e6439a186d5b
1ac9fab31874e01d57d177f246a6fe8e6ff63371387bc58ff6f1953424b3784da82c0c3551553582
35d0e89c411e78995d54f61e221da07108e4b963f306b7b6af0888d5e67527768786ae41ff1aa876
6b29956ae138136e09a9538e8f8deab12568422b6fbf70eeca7ffceceeb7581bf611292969ab199f
ab56e642128aa0e2505173600fbf5c29f8021020cca96ac9883702c911d1c44d5b4769b5d7edc8fd
72906e9f3c5ca90f20e025535d2dc2bc21a9ba5063c5ded44c7a827f2718223ba30f5c7842f90d4f
369b1441b68e0f932f680d18aebd49aa4172f59919f30eade7fdb7bf1266a44fea5fe1ca6ef2e6a8
8dfc69ddda0299ec4330547c47bc8f6ff6f0249b23204de7bdeda598458c1328e186aad2620fb208
9666e2f737a451c8ad8e25336d4ce207707630a1de19a2cac72ba51d37752af06bce4011f8d2883a
356c4a90c7ba7825a2b1f07ef2dc3c06a3e8a994fab731a97af3fc951cb23097bb03c8bf4d82f240
b701e060c2a95a095a8e4befec5c2ca254836e07655db43e1a552d2a77fa7a356cca68c78a3843dd
48496be85f7efb2fd9434ad4889d838f50f4e5db1a06046fcf36b6d1c1a49f31c007392db8c13f12
3462f3b7fc2b57f675e6fecb6419b2d46220df488353b6a1eb7a9bc99c34a8c6e63e330499aefc38
c8091555f27fc112dc489fa75988abaff829a6ea4604332d227edfd88979ac631f7e8076b619e44a
0919e1845fb77c94cfce545fead5091e235722bb3c1a19b3aefbaaefd4b2f3411830b6db82df07c7
88358d331cbbd0706fad667e760c56d8996d43dcc353846b73c118e479ca5a78e3c57a26ea4f0fd6
1c9db490a5d0abac10b90f92dd9353ed7712b4f7c68ca711847fae0924ad5b7ee235bc38da55af7f
10fb15b47a6cc81870dd8ffc031348bb74783e38a75bbd4e07104aa9d21e4a75f39ebdc0daff0ac8
bec48766f258fc56c4cfee4423517b8b7c942f9e9ec17f54bea0e875ef506b8815f6d904ef4c8cbb
e4414e10bdb6cc89fcb7d55fa5728143ae43d62d52e13c82c3eb47b02aa89dfe550933b3eb34391c
b4d2b89bde72b3d37cb4078b2ca4c1745674ea1a91bffdfb987f507d6c12bdaa5a7a7dcf8a252e62
167d23de06d5f75756a4b5918da0996119ff01d8e8b65cc10f284535c4419f8cd85aeff7a9298e06
7b0128c3bc1304d45c4fa217a7a80c661ad412112d20daf564343e9d0101dcdb91324accfbefc1d4
c8bf0ccf108af65a210c7370446379e1ddf39b4f8787909acaf0ce91327e4c9994ac0c9a5e8f4c47
797858d59041a5b24e92e45ee595387366199a8a2d37758061c238d0b8f02157cd98479b57a97a4b
9581996f3a67b35f221a81e9a9593ec1a9f69e87481c1634dbe7ed13d6807dd59224bbcd35bd095f
bafacb4470a54003361b8deae0427af3bf94550a41263a66c81c5b7018227a32b6a920d7b46e1857
207b04d0afd016a51c0c89565cb69fb9d985d0c81a6c820cdd2c297cc67d44d424eb1c4e596b0c2a
962939aa51c711d4e888680f9ff50a1d2dbf0e11ea3e7ef931bbb725955181a1e21931649f2fc03b
fe4222c166b0db24371785c2d62dd9199e56d0dc4e0d61d780ee4c49109470cfb06afa987a27c888
2e6893edb44667ab1f5161df450f3d98835b2aeffa078f4092acb6b6b727fbe77db8e323ecd43d19
8b36226ee4665c189fb5e7988cb9377afd4c42d8d3df4fcb86da11a7d0d0b123113f5acb26184894
611756eabf72574ad3cde66aa769ae71997a08d62b53225c663cac70069649b27b32b67f8336f40e
5a58c94e91eaa71879229d937b6ab2f77c556de5ee803264fd08fe72873433f47376f877a779651f
c4d67accb772f2f5f57068c6e81955b92a1128c1fbd277b5b75e421bf4c74c4d2bdaf6821dc56dc6
d8d66b0c742afafa960bedd551ccea3911a8ed882aa5f5abaca2ef0afa1e7e32f1696237cb30a871
4e0e2db31585605b39cda5b5e817a5a94de1f288b3cf663b556e5c25b23e3b3e8a2ad1d494f39502
c2d589b4d19d2be3270b70c1bb61dd38eb550377e650e47bcccbc1dbb6fa9cac0836cb77014a42cf
aee431226e19b6eb1ea7c3a1935099ef1ae788df01f87104eda603360037c29a93d2bd9b996c410a
b07b6fd7649414b3bc7a0c0d6d2afc5988e8b71ef2d25e44f4b8422866acaa60d4b2a3e6ea640c95
464aeadd38f5cb50c32ed39ed36a8fa37ce493bfd1b9452947d4d630ae66adc689ba7e49647419dd
11c91ff6f0d073858c2d5d3ac9def82c9bcfad9e28de163ae9b40e35916f6ae43d81deabf154708e
a7ea07d09867d7f352f96aa7d99b21a640dfb0d10170814d194d3cbb1f459e919fe17266454d005d
c2a4deccb9190b8e13d81c70f28bfc38bcd216c3539254b55df2cf282a5a204f0d8303285dab3fdc
2297d4e1a656f51e2aa542e2ac24caa18b3161bca35d68b33d80e79affd7e32a9e4ed69198bf3ebb
af5aa550625f397b7a3398af55c807cf3ecc7ef190e1ab3f2132ef1d550ad0c4e6e7e4361437d278
834019be9dbc6358b5998c668216d91f0a0724c5d539cce42ded2fd85965aa7d2789a49dfa3862ec
0a1fd4abc10c8a798e09ce1b4404f8c2f3d84d307149cf043fa1c5506c0a702458408ae3e316b442
4356b4e7f8878ccfed07935c9a0f70e377481dbfa49245a5d6b192b23fffc880edf68ad8de831ad2
ed590e94ef87cfdddeeac21f045053032846e04376c6306e1daa5db740cdff6f9da6d31204b594a7
987bc08fcb31b3a7dd0274198479d04b5004075780ae736529f53e5f6d4187181b0284a1997126c3
c2cca62a9b43325b1d3716e1a5e9b13f22dfe1b53ca0d8b4a5911af2444be0fc0b7db0cdfedb37c4
b64f9f1bc81e89261c367ef2895ca8d0bcad99137bfca054ab01b1fc6fc98ebc248a4cfe94e0216e
581e5fb8aa42bb271b6bfcd7deede5d4ca648e24a96d6a172331457f0a4f1ed440e94a730bd4edd4
9d0a44661f3005884389edc55f6ca8afd21e8cee8d6778f020ba1f586ab21d3513d017effa7482c3
2436f2c8212b887d550639315e22de12d52d7d4b1e3149945f7e4ca067f8fb92153d09e1b653424c
1d3748762108958bdf1e0d47df5449b48ac24b82112e14b3b8869eafb11fc96336be2494a537a591
e4a1f02cb876a8def703a1582cbe81bb9c9739bac05df6016d23f777eb18eb0531732a0141e4eca0
acd60998611d1613b23e358b56b374c63dcb735d095ff6055b3bd1cec61369cbadb449f79c7d87ac
a7c55a319388c8cebe4c4dbe54614fc33c19f1a6c3ef59e21ec6aeaf0442358b26bbed5bc1dc211f
63ea116905144883203a7a7c2cd9b53189eed192b3c74b66a5629acafc9e7950a4d8811486b9835c
d68e5abf78ca3dcb0acec9b4b82a7820280733d32f4e54027cc7b07f06d87a8d47cc0486fc61ca3c
50b90083aad569003ac717f70e82a2bbb5ced8a80aded2d5e60934f24d46c9f2ccf737aa3b31823a
69b49706f1facaaaf93854f850551684acebb58cb8a3f48f06f3adc4c61d1a283baff756cecc044b
f3e9208623e45c8391e1b7df1317d17d5e6a5b5244620eacafdd3d2d9fef5c0ca122e972f3165366
dbc0bdfab2a3a094bcf9c46572671836a7805c5ef7eb12a457830b976497d975fd8a5ad4df0672af
0c683613395a4d356073368b2afc1c2b351528073806cda4aada18cf374ac440cdf8883d02061502
7a2fe0e48a9109ff660a95d9cc63868f7b9960041a1fbf838ee7270c155ae1fa574f9157fc06cf30
005497642b29f1f60cd36a5158ce78ae1dccc8fe6f7c6cc0aab23f61154c46baaccf51fa53dd9075
a151319b26abcef8078961b05b8c96dbf84b37029a2957c4e73aea71cc3b1a971e9aa0d1ce510d3e
c9ded93c8e364bf02e402057ff5caba74dec5f28095d3dd058ee37bfbf028f57bf0d8d75e4066667
608d258dedd9c08a76eb47ac0737564ad281c09b968d76a14f13bd0f73aa5eabe3ee5b3de974a09c
96a877adcc7e215de344ba14a2e3fee1968873afc3888083e30f3cf6bde49899265d9dbe56b36bf7
62e3ab5e071be9c8415ac8d7944129ba1099aa15474c0f5f4bc6cbe89e20639e765fb9d809d94cb4
d161ece21a4a5ed35ea0dcec24ad77007766ed6ede2be61358c9a94b8f4b9e7a61fdeb5d2ad6b005
e1a9c0bc5711fea688c2ee21b0e7c94d65122d58137e46d5c1fbab76794f4f2aa18d7f57f598f2f8
3817fefe6731042b18b788398f6807ba422c8be68c0633ebc4fd0a636be1d13b1d4960b314af5709
f8d99cc355258dda3983c0bfa7a7e0899ff87210571f83f9ec75d7a93b6e14f992c54b228f3cde7d
f5d60ed7f6e5647216cde91dc0dcf728440ad77e0c476bd3bb86eab1d734a53609b73302396176e2
7d44f5ca7ebeef4d7e5c3023fcd05d64e52c3960db3dc574232ffe69d001fbab002e6d5becb9437e
8a0a19c53f2d63b35c4485ae3d027795039c2703be01a83242540fdcaae706d7e9b79c5382ce38e7
0765486e73f51bbfd79becca60e4c28e1fe25d38b3b6db224f297660a4fc691d4d56f37d1f51c80d
4e41c7195014a51c2fc5dafb357bb3d0e673a90e7319b2947211fa6ebdb773a7e6ec93c44d3c330a
12470c37f296dade61183befc5b2cd500b8b4fb4afc7b70f1efe3569f394a3bdebad801759eda91c
9164f23b6aec19b66b25c212b1fa5a0987bb2fbf1865e8179db4d5ddfc51587660fd95e3573764e3
80c7bea5c1920c7f00af89c9cbc1eb170972de6fbdd391ed862680cf8abe9e37fcc5e316132e144d
c355c594e3cb17310a7a74bcb8c468850c321a3bac16664ddfcb40a5155a1c4bf8b35074d2c92c85
0db2dc0e11c88ebe5d45e5d6396b8f1f291e92861dadd59a80bf4467b4d63df06cb1dd3a09f89800
c46d9e286719a21a06710bad525bf1288278c884bae9eb1083fbaf87da4f7f6e40a7af6bbd6f188a
2b3e926225147f35966719e43ef029eeba52e79c738bbe490e3b1e2f274050a4a87850e95da658e9
bee70c83cd046d713236112dd246d261fa7694b0fa5f1db4e01de95b81ebb3429c0adcded665904e
7c2a5e16b88e6eda8367f1c6e202def4085fa1e6edaac33dd61da91cb66e6a7dc4265a10218e1e2b
735eed17ca71942146a861eda2faa8eef6e789a6a5af3737018ca156640f0a23b16f0da19d051cc7
74b87524e95123ad9ad62387873cc5b12a5356d6c2dbf05b538d48f14df32716a55c7121061a8e0b
e13e7a21e00b0d940c13421fcb5ffea4c0d98db4a249292088f2ccec896c784ad082d6ec733630c8
a49a8acd9ade87ee69b37bd991a8fe0bb27cf962da0d7b2a7210189f7dc06ab851f6cb960d8dea32
b324e9079316c0ff32bbc69a0a4238bd2dd2183deef17f3d602920437dd0f5b79c2a78524fd16ccd
c70bc9fb7e494c8ab4cc5518ad6d696c41a6e1ed10e96125c84ef4f8a3aac514e8d8af9a5dbd41df
e80cd6fa176125c4490812cd3de5c99f88e4fa699030ab0ad7356eee7489eea56931f87a999d9e46
fe077eeb44ec54eaaa5485bfb865931a6dc65e08926c1c784292fc05f5d7c1bc74bc82cee11959be
bc19c17c62932cad8c3ab3e74bcfc2ec29c516dda54a9f90243698a740e013e5b932a6c82bba68dd
870858f09a431666adbb597f3df01a602ec1433ce01fcb688055ef874b3881d160313080912bec1e
9af2faf523502b392bf3964f2fdfe1ba6ec425146cf06d75ad3e2a47a834f4196937c317155260a4
8396c750cae9373afc87005adef4a125d8cc5bc5a4a7764c7f8399981fa15d15311e1dbab6bf5752
6d1d7882362756a183b41e084bd58f10cbc1a8707c29fe63929ebb2f9fb169e15fc4071134c796c8
7b1b7315e24f934c37ffdea7304029cbccf5241b85b7d6a06a6c80b71dcd7c4dd160e9cdb6f82a4f
8651d640e745fe8ea2f7d0fb9fad79ebaf7c1e06c8622696dc8287dd31aae9510ee4cf242ef2b9a7
9b5593f51345a4b84e6c1bb5a925381dee9d13738ae666efa321582380517fc5367406c0cb41652a
12007da16a3cb5e9339ac4a96c5e7ceb6bcdfb41b09d1f1c65d19fe8bd2cd63f4a9bf0ee194f22b4
8844d6e421137bed4ac335a06a45affc3793ffaf132a0e3914971e33063823ac171955f2648196e1
2d147bf2ed456ca2b03b53500463be4bbd6df86923d8e070edd12dce37b352818990c6a6cd419b3b
5e4eb6ab317422de53570200f016960b59e6bc529028a13045beed2a0bcedb26f7b78e705c7097e5
c077d915fbfa351d7b02980f1a471a8be2804386c6c297c3af85a11e553fc41ba2210a7b6ae335d6
1b55855d81279a63e7fa3776398da4c34a5c06b0c8243a99aa81802050d363bcacd7ff121f5f30cb
2e671ec87cbfbdfc97ce420ff662475a4296aff3780df52f1067c9b76cdb85599ed1e8372b655e28
b53ff0ebbe7c1ce22d26621f83729e22f6f5f5d5c513cc701bba787770fbc37e664ae33fe35d6ede
1562b023335d8a468b633eacdc0c2ca9958e149f40f682970ae579f439eca3d47e463bb831caade5
47f0352654a2d2ab1ed2c71381d6d0357f2ffbf6c43d02bb90dc008372e0aec9d7161b08bac5dc56
4ee83176edd4b66befbbb9f4b056eec5390e7e36a81324bd7568531102771456b887f838ebd4d8e5
946a69282410120ea7cfd38738d58155f3d56de0208117d437abfb6269bd1227ab0bd59b452b68cb
5148d3f41986b02e1b1d0a2e6f3294aa69fa14c639ba0f74fe063313f1a5463b77dd8a67b9083747
a9e25a71d3ad55839762ac50353181b5d14a2c71a4e66e6448d7d724be457b3f54c729cd47399651
6f5c9f3d72d2b5f9870f7ccbd5768c419fe0ac6eeaae058112aca12aa5935aa7edc1d4ea7b0508c0
f660fd4ce6ca4eaf18310842da6150ab7ea9d1fe6fe8a0f05ff9633642bdf0c194610452f352baad
1db4261db75c98566c3b0d6c076208fc71f5a016b4e1497eb0167172f09a8c2aeec7e9aaebabec66
2e3bae688eef2c7d7938d4b83339e720c9069bafd2017cb5af6837829b011e36832b6b4fec5b4a86
bf557cc901ebd32761076e89980c70e0cbd4bd7b0192bb58771a91acc8262c380e45f4c51a160dbf
8251e98b00ab1468d19baec9aa5a546279a96b227db3a23b9d4bffde325b67cefabd4960ddf1e5d2
21b2618a66efeb87b527acd7e9673da966397166bd14eef4e3f55f29df8b5a606a0403fa3630aad4
75584a56dda43f535afa95e4fababb28d3f2624ee095138bcb344b13486c6129312db7764883bd1d
235478e16dcf2d34515e5d14d14f7b1be4b30ed43dd8ae925999494aea87cdf7a80909b3f6759073
42ba1945b3f8b9461eb24af0e9453c35b85771225e36757892bfee8f4ce04ebdeb16ad0af0aa0cd7
7435274ec5cc49132fe862dffddd9de464fdb607dd22d924087106566b8688045839cc0c7542c06e
1c0495b915eb50b5fd6129dcbf2c0a5e4ddbcf0e6e66353021be4aac0bf98057405a970883fb4854
f2c3c439fa7523255b812506f0f61684995dc19e11b270a2aab0404085776103458556c52e72eb9d
36e1c1044cc5f45a75b0949d92d56ab6d3e2b37d15b0d23cf7dc29b030d231a609d283236b6dfcd7
ae7b33418978704a50feeab9fab163ca7301aa73765ac25d7b61e1233689f79b0040d7846a71358c
0fbec70fe286aa5c3dcdb4c59f67becf1a9c99aa6d6ab287ea2d5fe5701a2e94824f347adb8c5ed3
b1612648a7f67a0dbc1601694030c1c89fd34803f878a45d79d976f99aa5fd84ec7d0d173babab49
a46c518eab5cd2ada0d6748a66060c8e6087d91f6cadfdf0fcdd187d558250beba92f0cd00a19bb8
13e1d6f3818af807514612ed9fedec1e767eb78c75d85dd753ea9974db9090c8dadb5cf7f33eb601
336e1527535d0841c69eb3b00303e5fc9213005454d595c1c322d1f593a40bd9f0e491bc039919ff
30869733bbfb2e48bd7225e45d2bed3e58cbed027dfabaa2ba7c754bc1613df1d501a57cde50608f
f1db5d258091448f0349f34f21a2ed7f67ca8fafdfa78e1f00d593f3fbf0ffeed54d83ad150ef849
46f202cbcc939d8ceda7d629a046402285a28011fa7fd9be087e0fad281f2bae7550ad0150d00295
698c27cc0ba4ae5428a32837428c3105f947b27fac2544345bf9cd553ed6625cff14ad0be7f3ba16
1e3c0187985e0b96f5c425c4ecffd24679b18d7fb0e42a96cb629e9afaf682a7208abeb245787dd5
d89bcf9eddfd8ea5404c9b9806a3e00bffade0f4e1162a8db4c36bc59c56104b813a7e3df7495013
e9ce617852dbb06040110b688c77224fa177c0c94cde798f339906a551764dac57aaa01d4c9557f7
d21a83d1871ef5b2c1338709b1c3346b3cb0f1bd8d01383515699cc41371b990781a2486f2668c5f
a8e46a74e60bb5725818907837b2fcfbd36dc8937b7ac4b9309384ce1186859ae067c40d029ace87
c31b1f1ec92ca13606c4d9379eabed4f59eecdf527f6855b73b42ec5a46417cc66bc2973c096eebd
6a5fc4fa96e31dc4c1acb256e977a285d84275aabcdb90f012f097b574fec73fe888979d087b2ec0
5dff310a092e30aab75c0d7619b3a39a43a4ef4a49ca652032a7af55356cf9c4458ef818840416cc
f194079a2916c55c9d91bfe22530d1adc7f8de29ff8f0f766534b8c33b0ef643ab1da90d8aaa25f5
83d9ed8217d93abb25395ae289444889d8b5d48e572c2589f57f05e0426e00dcbe5885d38bdc5967
2595b4623312aa82d7ba1abbfe768d33683f67bdc67352ee5503ed5ffeb39aab7072cdeda098e52b
6f2c37ff163d89b143f463382608b6a885f0fa63f08fdc2d19917a32c905c5c20b454f044a613dc9
6197a6b9dfae63348f6064f06b6382cdfa185b5cf848a9aac03c38a357ed01265bec2845fd408989
a65a58b8fc1e1ed77ea3a7bae668b51b3e31724f4a5957d3e2cec0022a56cd1e6a3d4c091ebc3519
426ec37941fde13dc4d6058ab56951dc532236ecd3c536eb18f120a227ca9dcc8afaf31460b0927b
7c3b41b0b32bb671519f74dcf9bb021e45169e9a6f482f8f75985569cde49ae4a55ee573df2373b3
a56054d386c1e3aa0a44beada8c653b67940d192ad25d1fc9bba8d25ca8f9969a52e839431fc8124
a83a09d5de4096034e58848fa2f7e96877ccbad6c7bb0decd3f8de51f04fe52bd82f5098ee3637af
6e292219be029c7aea63871b430238a38792ef50f23e38a6aefafc1daa97d0aa7ae6b932c10b7383
49b7b004828710812b4db95ea16ceba110a59adc6ce40228edb2f35f696e05204c3687016c41e038
4e0ce0273b2a51358b43286f3b81e5e7e72777c568ac2a7dd22c7804f1875c3252ba2fffafb97f4a
9b7bf3cbaa132f72bd444014487c9b5040cef35bc4cc9fa7c04b861f0ba5a40b00d3ca7f4e536a54
6663bf3e1b316e65f43ad3b3b12fc0e255922911c14260608e39a39f7258c6b1d99dfba7e65119a2
ae006b49a32ed44c23a430501e2d381ca4bb89e3f9a1801342f596d6d79cede622fab5a2184c77a2
cd8b93deeff26b8f1643177a33de035fd47dd12ec79443a6d6ebd37c2511636f192e4a315f726bd8
1d4ba5f708efe5e1dd8f439511d7e96e23ae01b4191c43797a3d036f4abb84667b1fa52653cca88a
bea89933e40e287bf25625d1a73b9043e9ab7aecac8aeda505991a2e5f86d724f87b7e69b57f0396
9ef0ce61bf90a2abef1db1069e21576357e1219c87b465eca8903df44a898c4c3a68ec2ae44999a0
317b8802a33f34e607322534c1660c46d9a8eda0a31606f554b86d22f1bde28ebffb3e4c18aacd0b
19172bd978c9cef7ad20a8b764ed3e9543ad9a0864af86bd9cd2b91c7e2810ad3cfd0087bc16ceae
6115fa3c2bd75fc784adf537d3347afddc6596aa2c136d602bb4afcf44d5ac51ab57eb7132277010
4551614414bfb3e07606f45f687a8a56901ebce3519cf0c315f13fa87496b755713f3bc6d2af1804
8a102cc2e661ee858b31be7530828f8cd842375d8e3dbe8bee4bf205da825447247cd39618a3bf66
7c2b2a2559115a5c416ac098cc99fe19170b3775086dc4fbc15f0501be0f9d32e45011650ee15a97
369b80c4d5eff9cf4ccfb9b04c400bd33fce49cb56b993b44ab6766dbf4799e30b2cad3ccf8400f8
ffa448b119c7983286b4ed1e786286b9ea2f5b537afa42ec6b951ee91bbe7531fe12d1f7846dfe13
81abd53f92f2d03b63bcd83d864a54d231d09506d70a8ee6a3ba629c295968b8ff275543218a4049
748b18f32ae2c99598d810d2385fc5b99b4447680b5d7c4fe92d83e61885b7791e071e6fc731fa13
8fa51018cb22b75e8aad816a208b0de840699ce41a763dfe7d4c648e8f97d5c98b62fd8311eddcf5
cdd798dc250dee574ea71a533c2ff42502844aa34bd58e35bf4ae6eab29b0ebe4eaf9b01ec7bf7e2
e3d0e638f444502e00728742fc43432737d9fc87283f578eb95c8a777e042c68cd48c87f1c220da1
5d7f865c77498209121791fd6b046642929b6c558ffd52807b8856239a55e1fb5546e16b2d969419
2454a83b8c11d66c59fadd56a1e6ccc91b840209e5fe5eb6a50885788e31bf5e9e64596972ea5cc3
7c355b02c9f07546ba76bd382992e5b7861df9531814dc20de42996fea583cfe4903896f45080b78
e3ff696bf571d716d421a127155f2cebe077475556657e32a36c1ad347760dfddf32663eb26d7d86
20d2524ec6db45ba6b5e379121336911fa4db3b535638a183d819df94f9842c2cf12d0f1268e0066
ad5376df72ce984141d08408b9ef1a39fb4207ca9ecc60bab450d7a7e79894e7b60aab2debf62d0c
d876f8a618ee37ce6070779eeb35c53d539653d58ee4806f9b15b06a48c9e7d90b46f03b5de97936
9f70674413c5d3d80575146871017b0a50dc885bd5ae8b105182793a30e129ddd329cc7ea490c975
b380aa4c7700a334da241843aeb50a1dfb82dc0306c76dd4d2ffa1166e27501aa2d4df736e0cdbfd
d67ead06c5f06acee48ac22ef852e2c3742db8b29b2e48849ea80e895bceed256e1467fe3d76778e
f7aa83f4de8d462c1b3cbbbe8e87301cc8a843f6d60d8ed48b00efd14adee3ebce6c94333f589410
aa1d0e51b326514b5fb315984e18caffa61e127aceacaaec21d2575c85bb963281ea29da4d897760
d57f34fbb7ed579935ca673409388b725c6abe8436fda937db3152df57857e9a32cf56ba4efbafa3
cab48049ae7f8943d7655946b8715d1172641e8de916d4c7174e7def7d79963a0c163878577c690b
fbf0f4ab46da9de37a096c93c29b6f85cb3c12069fecf04a08d85cd97211ee298a52b7af3356aeca
df64736c65b4fdf6f6c11d3b8c6143de8ee7605eff09e3d1903f625e3619abfc0f63d130280ea136
8ec7352ff72f
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 1345 V810 1 0x0 180 V811 1 0x0 175 V812 1 0x0 860 V813 1 0x0 200 V814 1 0x0 400 V820 1 0x0 420 V821 1 0x0 440 V822 1"

// Rung VGR_Copy_State#2
// Offset 51
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1"

// Rung MPO_Copy_State#2
// Offset 31
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1"

// Rung SLD_Copy_State#2
// Offset 23
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
#BEGIN FMT_COMMENT 
"Deadband for X position difference"
#END

STR ST1
DEADBAND D140 5 D1

// Rung HBW_Move_XZ#10
// Offset 48
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#11
// Offset 63
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D1 0
OUT Y50

// Rung HBW_Move_XZ#12
// Offset 69
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D1 0
OUT Y51

// Rung HBW_Move_XZ#13
// Offset 75
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"Deadband for Z position difference"
#END

STR ST1
DEADBAND D142 5 D2

// Rung HBW_Move_XZ#15
// Offset 89
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V120

// Rung HBW_Move_XZ#16
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D2 0
OUT Y4

// Rung HBW_Move_XZ#17
// Offset 110
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D2 0
OUT Y5

// Rung HBW_Move_XZ#18
// Offset 116
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D1 -40
ANDLE D1 40
ANDGE D2 -40
ANDLE D2 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#19
// Offset 135
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5310 V140
POPBOOL
DUPBOOL
ANDE V105 3
MOVE 2990 V140
POPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181

// Rung HBW_Program#9
// Offset 53
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
DUPBOOL
ANDE V106 3
MOVE 3240 V142
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#10
// Offset 85
#BEGIN FMT_COMMENT 
"Task Send<br>Validate X and Y input are not 0 (unselected)"
#END

STR C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S7
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#11
// Offset 109
#BEGIN FMT_COMMENT 
"Task Recieve<br>Validate X and Y input are not 0 (unselected)"
#END

STR C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S1
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#12
// Offset 133
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#13
// Offset 135
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#14
// Offset 137
#BEGIN FMT_COMMENT 
"Task Send - Move<br>Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#15
// Offset 139
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#16
// Offset 142
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#17
// Offset 147
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 150
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 153
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 155
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 157
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 160
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 166
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 169
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 171
#BEGIN FMT_COMMENT 
"Task Send - Move<br>Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 173
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 176
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 100 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 181
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 186
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 189
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 192
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 194
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 196
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 199
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 205
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S1

// Rung HBW_Program#36
// Offset 208
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 210
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#38
// Offset 212
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#39
// Offset 214
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#40
// Offset 217
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#41
// Offset 219
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#42
// Offset 221
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#43
// Offset 224
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#44
// Offset 239
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#45
// Offset 241
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#46
// Offset 244
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#47
// Offset 259
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#48
// Offset 262
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#49
// Offset 265
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#50
// Offset 280
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#51
// Offset 283
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#52
// Offset 285
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#53
// Offset 300
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#54
// Offset 302
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#55
// Offset 304
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#56
// Offset 306
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 308
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#58
// Offset 310
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#59
// Offset 313
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#60
// Offset 316
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 100 MHR120 1"

// Rung HBW_Program#61
// Offset 332
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#62
// Offset 335
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#63
// Offset 352
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#64
// Offset 368
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#65
// Offset 385
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#66
// Offset 401
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#67
// Offset 405
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#68
// Offset 407
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#69
// Offset 409
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#70
// Offset 412
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#71
// Offset 416
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#72
// Offset 419
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#8
// Offset 56
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#9
// Offset 73
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#10
// Offset 77
SG VGR_Program.S2

// Rung VGR_Program#11
// Offset 79
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 87
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S2

// Rung VGR_Program#13
// Offset 89
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#14
// Offset 91
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#15
// Offset 93
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#16
// Offset 95
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#17
// Offset 97
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S7

// Rung VGR_Program#18
// Offset 99
SG VGR_Program.S3

// Rung VGR_Program#19
// Offset 101
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 109
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 111
SG VGR_Program.S4

// Rung VGR_Program#22
// Offset 113
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 121
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#24
// Offset 123
SG VGR_Program.S5

// Rung VGR_Program#25
// Offset 125
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#26
// Offset 133
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#27
// Offset 135
SG VGR_Program.S6

// Rung VGR_Program#28
// Offset 137
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#29
// Offset 145
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#30
// Offset 147
SG VGR_Program.S7

// Rung VGR_Program#31
// Offset 149
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#32
// Offset 157
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#33
// Offset 172
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#34
// Offset 175
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#35
// Offset 177
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#36
// Offset 192
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#37
// Offset 194
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#38
// Offset 197
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#39
// Offset 212
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#40
// Offset 214
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 217
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#42
// Offset 219
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#43
// Offset 221
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#44
// Offset 223
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#45
// Offset 225
STRN C500
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#19
// Offset 56
STR Y20
AND X17
RST Y20

// Rung MPO_Program#20
// Offset 59
STRND Y20
AND X17
RST Y17

// Rung MPO_Program#21
// Offset 63
STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#22
// Offset 69
STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#23
// Offset 73
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 75
SG MPO_Program.S2

// Rung MPO_Program#25
// Offset 77
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#26
// Offset 85
STR X17
SET Y17

// Rung MPO_Program#27
// Offset 87
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#28
// Offset 90
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#29
// Offset 93
STR X18
RST Y17

// Rung MPO_Program#30
// Offset 95
STR X18
RST Y20

// Rung MPO_Program#31
// Offset 97
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 99
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#33
// Offset 101
SG MPO_Program.S3

// Rung MPO_Program#34
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#35
// Offset 111
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#36
// Offset 129
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#37
// Offset 132
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#38
// Offset 137
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#39
// Offset 143
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#40
// Offset 147
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#41
// Offset 149
SG MPO_Program.S4

// Rung MPO_Program#42
// Offset 151
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#43
// Offset 159
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#44
// Offset 176
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#45
// Offset 181
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#46
// Offset 187
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#47
// Offset 191
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 193
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 195
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 203
STRN X15
AND C800
OUT Y45

// Rung MPO_Program#51
// Offset 206
STRPD X15
OFFDTMR T103 3000 Y43

// Rung MPO_Program#52
// Offset 211
STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#53
// Offset 216
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 218
SG MPO_Program.S6

// Rung MPO_Program#55
// Offset 220
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 228
STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#57
// Offset 231
STRPD X13
SET Y18

// Rung MPO_Program#58
// Offset 234
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#59
// Offset 239
STRPD X13
SET Y47

// Rung MPO_Program#60
// Offset 242
STRPD X14
RST Y47

// Rung MPO_Program#61
// Offset 245
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#62
// Offset 247
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 249
NOP

// Rung MPO_Program#64
// Offset 250
SG MPO_Program.S7

// Rung MPO_Program#65
// Offset 252
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#66
// Offset 260
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#67
// Offset 265
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#68
// Offset 270
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#69
// Offset 275
STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#70
// Offset 292
STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#71
// Offset 309
STRN C801
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command."
#END

STR C1610
JMP SLD_Program.S2

// Rung SLD_Program#8
// Offset 28
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#9
// Offset 30
#BEGIN FMT_COMMENT 
"Check White temp storage status"
#END

NOP

// Rung SLD_Program#10
// Offset 31
#BEGIN FMT_COMMENT 
"Check Red temp storage status"
#END

NOP

// Rung SLD_Program#11
// Offset 32
#BEGIN FMT_COMMENT 
"Check Blue temp storage status"
#END

NOP

// Rung SLD_Program#12
// Offset 33
SG SLD_Program.S10

// Rung SLD_Program#13
// Offset 35
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#14
// Offset 43
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#15
// Offset 45
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#16
// Offset 47
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#18
// Offset 51
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#19
// Offset 53
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#20
// Offset 58
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#21
// Offset 60
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#22
// Offset 62
#BEGIN FMT_COMMENT 
"Check White temp storage status"
#END

NOP

// Rung SLD_Program#23
// Offset 63
#BEGIN FMT_COMMENT 
"Check Red temp storage status"
#END

NOP

// Rung SLD_Program#24
// Offset 64
#BEGIN FMT_COMMENT 
"Check Blue temp storage status"
#END

NOP

// Rung SLD_Program#25
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#26
// Offset 67
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#27
// Offset 75
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#28
// Offset 81
#BEGIN FMT_COMMENT 
"This timer gives a delay for the color detection to get "
"correct color."
#END

STRND T200.Timing
OFFDTMR T201 2000 C1601

// Rung SLD_Program#29
// Offset 86
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T201.Timing
JMP SLD_Program.S3

// Rung SLD_Program#30
// Offset 89
#BEGIN FMT_COMMENT 
"Check W temp storage status"
#END

NOP

// Rung SLD_Program#31
// Offset 90
#BEGIN FMT_COMMENT 
"Check R temp storage status"
#END

NOP

// Rung SLD_Program#32
// Offset 91
#BEGIN FMT_COMMENT 
"Check B temp storage status"
#END

NOP

// Rung SLD_Program#33
// Offset 92
SG SLD_Program.S3

// Rung SLD_Program#34
// Offset 94
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#35
// Offset 102
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#36
// Offset 107
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3200 0x1 10000 8000 C1602

// Rung SLD_Program#37
// Offset 112
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3200 0x1 20000 18000 C1619

// Rung SLD_Program#38
// Offset 117
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3200 0x1 24500 21000 C1620

// Rung SLD_Program#39
// Offset 122
#BEGIN FMT_COMMENT 
"Increment W counter when W is in color detection range."
#END

STRPD C1602
INC V3202

// Rung SLD_Program#40
// Offset 125
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 3, jump to S4."
#END

STR C1602
ANDLT V3202 3
JMP SLD_Program.S4

// Rung SLD_Program#41
// Offset 131
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 3, jump to S5."
#END

STR C1619
ANDLT V3203 3
JMP SLD_Program.S5

// Rung SLD_Program#42
// Offset 137
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 3, jump to S6."
#END

STR C1620
ANDLT V3204 3
JMP SLD_Program.S6

// Rung SLD_Program#43
// Offset 143
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#44
// Offset 150
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#45
// Offset 157
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#46
// Offset 164
#BEGIN FMT_COMMENT 
"Check W temp storage status"
#END

NOP

// Rung SLD_Program#47
// Offset 165
#BEGIN FMT_COMMENT 
"Check R temp storage status"
#END

NOP

// Rung SLD_Program#48
// Offset 166
#BEGIN FMT_COMMENT 
"Check B temp storage status"
#END

NOP

// Rung SLD_Program#49
// Offset 167
SG SLD_Program.S4

// Rung SLD_Program#50
// Offset 169
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#51
// Offset 177
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#52
// Offset 181
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#53
// Offset 183
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#54
// Offset 188
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#55
// Offset 190
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#56
// Offset 195
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#57
// Offset 197
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#58
// Offset 200
#BEGIN FMT_COMMENT 
"Check W temp storage status"
#END

NOP

// Rung SLD_Program#59
// Offset 201
#BEGIN FMT_COMMENT 
"Check R temp storage status"
#END

NOP

// Rung SLD_Program#60
// Offset 202
#BEGIN FMT_COMMENT 
"Check B temp storage status"
#END

NOP

// Rung SLD_Program#61
// Offset 203
SG SLD_Program.S5

// Rung SLD_Program#62
// Offset 205
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#63
// Offset 213
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#64
// Offset 217
STRN C1606
OUT Y30

// Rung SLD_Program#65
// Offset 219
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#66
// Offset 224
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#67
// Offset 226
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#68
// Offset 231
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#69
// Offset 233
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#70
// Offset 236
NOP

// Rung SLD_Program#71
// Offset 237
NOP

// Rung SLD_Program#72
// Offset 238
SG SLD_Program.S6

// Rung SLD_Program#73
// Offset 240
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#74
// Offset 248
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#75
// Offset 252
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#76
// Offset 254
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#77
// Offset 259
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#78
// Offset 261
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#79
// Offset 266
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#80
// Offset 268
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#81
// Offset 271
NOP

// Rung SLD_Program#82
// Offset 272
NOP

// Rung SLD_Program#83
// Offset 273
NOP

// Rung SLD_Program#84
// Offset 274
NOP

// Rung SLD_Program#85
// Offset 275
SG SLD_Program.S7

// Rung SLD_Program#86
// Offset 277
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#87
// Offset 285
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 10000 C1630

// Rung SLD_Program#88
// Offset 289
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#89
// Offset 291
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"T3","T_HBW_S6","",""
#END

