// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Nick\Documents\GitHub\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
82a4ddcf1955bbb035a604993db6dc56dd4ea29cd002815eb2a41dd1d82336e155939aeb720000a4
8b3e9118794432298703bb10b4d77e828ee47f4fa385cac1b3b17dd1fb68520242edf4f37194e73f
40b1acec55cd79f950c0f834588635596f17e47b6438761205ce5ee1daa004584ca18c3560d1af7d
663c7ab04145b957344b2b6fc80c80254dba8bd3ca685798654ff61bbc2dbc5f13c1dfd9c822db59
478fd3214e93fdf7e0ce7903f1eb4e872fc1c593f78c3527590dbcafc98144f44417b4f2fec6ec52
e5826c5f7b14c0c7cca56c552fca0b93f5c1b3d6b1ce92fc365757d04f36d9aa57e9a5fa3a3df3db
20f8cdc0395dd2df8b67784696dbbf68a67057d9e6db3d8201ea4d63cb3d89ded8e99919ebef1757
cee88dd4b5bf9d1c273193573480e7187ba24deaa3734eef302e6871a4d0447886d06717280d488c
bfd88cf1864ffd5bad66ca9a8d1d0debb0aad03d9b33bbf0d38c81f168611d04cbfda365dfab0f50
9d234996ad24fe413863e4d34492f8124b7c7d2b4e77c1d2463560582bc6c0a74deecd039abde475
4e72a2b06afee835ebe9695554fa4dcc9b89ff2a202368016e5852368f3e55675d38e4eb31d2f68e
77fe50d6ec96d27df1146692d4f15bd666573705beccc48b22f313376e17d109312d7ecc7cac67f2
fa106b47f441e06329fb87af844d7fb2f01eab2351526d4cebeb05dc130b8525e725acadb78b4add
352ad74b04e81fdaa545a210d244117098fa816d68b16caa031152cb8b8eb2cd0f6b995bc3f52917
8bcf9096493c9c38ff9088727beed601dca1fcd8a31c001df1b569ddec73545edeaa1467229b7dca
6cfbb44446e3b6d18c3e646d17b8a49534dee7e0bfd640b737180e945fe72037c1c3f9d4ccac78bc
acecc4c730ed23e876bc88dd15cae802d206b67a120455400db23664bd4b4b37718657f10a37b885
f7e45ec646ac652d0f1df5484e46b3412da66089f59a3b8129bb2df8e850ec4a92989a10c7d5f99f
041aeff62bf5a00dee4c259c5e38675b49c065076079b4ab976eebfccf3eeb41a06d1e2ad05d472e
99a1b60073e90f2867f5b25836f33575691d34b97aacabcbd505d43df3ede1e4228d7ce54c34dfd8
167a3a20a213f72c9bda56168841f6d4ad84dfc980b4891b5ab956bf03cc30bc2fdb28d7671487fb
2dea0166c39c79692614087bc31b08eb448dbed55d87430efb6631a19ee203f0c32804be0cf07a8f
8f91753f4c76136645ea7e2000e929342634b4c4ede84d47960192ddd826a692e103d87b3a7e87c7
5e34bcf4e2dde40819d5226630969028df8863f66cfab7c614d7ddb44cefc424427e4aa9cecfe814
ec47d7dd8f09712df4abee51d946a82555bca90fdeaa5f8bde37ca737531f8a73672c28234335adf
9536dade0780c1cde0b418e678d2626b160c7d11233956bad5a182a0c94ff32704a0b4240f180461
ab8af5ffffe17b284652ce073c6834d97d15ec14ff00a87cec7c931e540bc4fc34b91395e7a9e056
e55d6a5ec17d87d2104a7afa947cea69ce9ae7faa04440d0e5f2937f1a8efc4fc445ee8367392c51
9b81cc910d6cb24001de301d559952547c0f4457a181727f2ae9f6604b8d8ba798c0a766a6ad2138
429c546143d79bdc975b8440652264316e0ed8e1e6793108b7a0c5c77543d0ee6000873350648aec
7599123e2510ab7094c61af522ff061b8185c08d2c813bfee295b29aa2910fc37ea1c05451b78e9f
40aa3887160b2cd7a079cc23ddb17e1f3b674b88cfd96a74f332a7d8d675bf12319860eabf1bf084
0b5cab70ece9035f0ddc45a966ae2d622b4aaa5dcdb93661964bd7d2386436e7fa58029b5b045fb7
5a4668c0201eb8d4183c39c4e92ef7611a3dce0057ca79103b5f10c44c5f44566047f66df1c6d31b
eab1b3b8ae8fd7dedf1a9d10349dc59f2b90b1d2d59a4be59c71c784fb9da01b20556cc3965a2d08
c609014bfe0c3b36f5393bd222972f43f6fcf13f71e7ad1c6067ccf713dee6b8d17b011412425aa4
cb09b6a8322ad05e0cca2fd6c145ef236534085ac0c559a2e7bee68ed7f2e35709909cbedaf54197
18eb18a765d1dced07ccd8e0638f9ad299114f4441012c50b47e64c8c0574533109f4aaf99012fe9
d707ed55146d1f8f43be29725b25d10383aa9d07efe5e7e185c8bb712c217f2f0d2b28ca36e46089
529c3c02026d5f483b716f3947a4f27579a8523d4a6444e9299d8bca81e887e1765ba7f68073b248
783d8736159123ad459442e51eabfb308fa70103b4a49ab40986ca09d5ebc1ed5b3d73028caa6229
a0a39267ded6014739a0335a3a561083885ad4ca5aca2c90c05972d4a8bcf02c3a03da505960e8e1
bf61b64938c5e5acddd72b264168f5e9a4f98bc042562a840f421bde555c330fb7aa48d25b5f8fa8
1ee503b7797a0172fd50b239162865f8dc7fb0e29c430d3045be80d5dcefe47875dd467b738094cd
06a14de7c61a0bc6592b336e365fb697895bcd09ffb7b01b1678c88481add7adc8bcd305e0df5fb3
ee4925653906980228c31e0de4876fed4b778f99537501be66cfa4bbb645bffaf873060aa9a093b9
e2d5a6c56b6fe15ad43e94888697bbcf5008a3a80e0c8999a7898c026eae724c666db03bb4f4c4dc
d451277fd272ecb86867eadc4e8f9094d8f74c683b6bef8946715d3e05c70220197b20f4602fe211
dab99231cd2c987c3d5ea4ab7f153f75db310d55ebcae56eca153aaccdaa3e5b05756d6187906420
077e7de7ab17da6b142a01472b7f9f9d42fc3a859708bbca3bbff56540291958c3e70f695e50cd09
e9ec3434805844681d18aebba1640b5e5f386044265f661e3b8985df92d1002cc3252b29b5eabdde
c03ae6c62b2aefbca34df7cc80d2c82cdf684a25e9aad5e688625cdeedbf109bf33b6ce1d41a06a3
8be84f703153f3c4633c41faf5d484cab6c89a48769d337173295e437d9956e53aa3bc8e50bb508e
b17590880d0d8b9a1097dabee2c2048716d316775efcd5125cb072c6e029a29d51ec89bda3587f27
61b5ca7155f9346d6a4131c93377b7a8e6311287a22567ccd7376c895eb4f68f6cd37142b0dc7443
ac73ffe7d73cebfb99060ca1cef78426cafed9668b1c7fc0bfd6868091f6a26e77f5a0c4129ce861
c2534789fe4db5e4f3b74e2fc3353c787af0aa1db8da54e4cf545c1591f365483fb8b85877cd0416
e0b7b85c9c7fc0f5b6db27cbd280742df04d8716b3e08836025a09a0f9fcabf1e264130dcf52b1a9
a5d6fdc4b943934e116e6437a6b318a24d4209aa1c8124b386e1697131bffdc22612fb02a2ccf583
de55313e3674e9a8aacc8cbbf517b22bc7cd6b7f4121c1e62481fbd2e943565959d092779d8e897d
bf994a6a19a280d5ae1ef110d9038c519a29aad0ac5617cd2d734e490fef86c0e8c9dfcafd93f556
63d325af0992a2e29930d3583fce02e22bf17e9df60e59c4773edf1d9d2376138119682e753d7ace
421a02542ae19270c395f4f301d219e8fbd6fdcfa364fbf861e025ac7a984f50ea914e9833c9000b
baa1cdd29eabeb2206e48263af9fba4cff86c33eb56381d6cbc544089ecb40a2c504db05a750cea5
dbc181878ffd3aa6a6ff7ff38c1301822d1bad56ab731b9a303608cb0cf48ed02cb9f9bddfe1e5a1
dd7e2a7cebb8ffab341d22fd1d6cff1410ad6d76b5728aaf210fe8c135778e7ae8d7edcac35deae5
4e52a7d18f5bdb47dc2f459783a6a4b9e167a277fd801de69592e01aba06089adfbfb798ac5ca0f5
761affe71793ee6cd40ff94204538e45a49602c45b5841c326b8f91dc1d264df21f991903d3b96fc
88c991cfa7e60113c77f004aa744715fd9261bf3a4c1f791ef30e64de72e9929325e612cb4fd8ca8
1b08e8183da2a2fbfb799cbf5700e5fcf2a679af04b1a8a313086403cffcb0795dbfc322b9497c44
11c287d2f26b245f46aba406ba74e594e0e8c7f36c403df2032b26d6328fd9b8bf4b9809abdf81a1
333c887ecd74310424bdf2c9d29ff2ba6a4adeaf868e5a925cdb20d36f9e8da0a1e30a1820756623
9e278450c0d875b9cfaa38a0d15aeaf19dc28f9a91256becaa23d6457a40272f51eb20ea8e6eb404
c1c6bb77e634cc33f7fcc9921c42a5276d0a53b625b676c74c0486a4cc4ab839c8924d38bcc9708b
aae7fd702c217c7456611375a3af487a9528e9569d112a7428d2fceee78e9e5579e70f931e92627f
b610b54a722b3a4a1c74a4e1e4486b5f6e9781d7bb191a68c8d8ac9fd1c478b20999cb36854caa00
91d9646224640d279cc75b6c39b7d1955238b8adef7bb52aaed39f0d4f35aa813eef7bb0cc27158e
687e7c21f26d6fa6a26cd3ef651c073dfb75e43ce32a65711b67a6e1d7139eabdb8eb1af8493ebbe
6d288508e0bfdaf89e4db65ea2fc7b025bb6ba20df7a633e07ce2440e03ad2bccaa7b5120bf4c793
50a3ecee86817ba41d262f8d3bed5e2762cf47aff09591270222716e6a5e656c73f6520872ec7fb7
826da4feff43a31727522e707c53bd3be704a5e3ca61c580743a5b836f53c5db3b48eae236b4f234
29442b269d5f938fec89b7f28fc33905de39098c02c917f07977bad105433328959dead865e35580
d0bf5f9c08a2f1c8d46fed1040e59d4bd445e812c463c42c34ec5f2173d0bb208e68fd185f5e360f
e616a48974b653ab53e9bec0ed132487a1545b52bffe74730368a6dcb2a07acb1ab5ba103dca07d5
823d2f345180ae27840bc40eb89c1bde21c898e20d79e4af362528e41c188cf67a4c93dbb210ba19
f2b3a4c348aaed239f58a0a43092b301062688c971dbef9b59ece65efbcbbf30c2a99e7727b33ec3
1ee541aa3cfd230c6ee47c24cdbfc6c999aaa205697727405f376c11125d8bbbf6304fd7dcc9a763
939c9ea402c2b80b4a8f916c898ee85e09befdf631961e111329d7685d73d506eaa4793edc38976d
ad9552f57eb482ea291c13d430d2b3a9fb1eb280d0696297ad63413d8d903fe916b2ca51a63e0e72
38a0b74116f335e26186e89ca8354a9c390e64d1b797bde735671321c91035ee77ac30e8cdea8190
7b50ead7b28b8a39c6104522f6707a19e9dfa5b8f8019d1fc49a9f047c059c6928e74bd001b4b95f
ff64fdbf2ce17cf7858343f70b08d170a8bc5c3b2dadb263193a9260483ddfbf9c585e98b2c4f127
4cb125a2d0182d502a2a7b4409755038d381053ae7fb2e563e80c563591dee29d39cf5458cc87448
e1a0200c79bbef6f380acb933c2dd2b1c0a3a5fe64c077e688cbcabd689f484809f961cbaf7e6631
67fd2ce91f31517774ea9c2c68be7e6be4ee14a780cbe3bf054c4d743a02b63b48ccfb854bb05f69
bf29cca1ab8a04b4b02a65687d2b4b82e01123e73e93d046abcd67e477dde28e15db898dda0afc11
44c0409c3500ab58f4129364ac4373632038a1410ca7bf93822a5835a6773a5f2b8f68649e5a9f42
3cbce3a9201c3c8ba82a538c4f40726d90739a9285550aa24acc6bbfb2e3e52139dbf15ad5a7f06d
4dc9f1b9d0b63d72183f62934b0769ea80200105c860a9584a0515d336350fd5f9dfe1a404ee0b93
1c39a0b1105c31b58d74b037dc52a3485245de7053e66af13ef2d5f3e68caf0e2c85628e3f7d60b4
c8dd7f74ca0e2f0bb737f48c583031f0c5a2017fc51a089ef602808fe59fe034a2f790dd9240bf3f
142a311e7be58777051b8b0a0c2d949a12c30b870439909d8984715a1abe7c6e5a3db2352eb03161
2f20ba8e228cdad3b185a9d8285b0e88336d78f7d191f2c4c4255815890951c57adc9d3b3acc277d
b795deaf1eb8b4c9560aef39b95f96a4141b7210c378557ce7b696ef0def60dae598f46aa883d8d1
6ff28e1e86703a9b34792774f21348cb8ed9f2b14cd061fe6bff3c7e98e9a98f03209410d77d7c28
a468f50163aeb585d9e89ab9c362a870b0666b2097ccb3ffda5357d93c97add6a8145166c86fe979
726fc72276f1d4860177ad9d4c292d428736f2e744d8d9184b0ce908b9b86a60178b3aee89ff11d5
c1b98cfb29146cd10cd0fe5c9d3f109d03209ae403267bdf09f8068c3c8ad4270c9baecc046a9f7b
7b540b8901fa485508e9efe3cc1fbb352f9ffc6f4a2a0a47028638bc9780ebb3679407b5edd178f7
e5d179eea437a8e4c55b06c2bd61c8a0331cb71f3385c01463d9a714121fda502d3217cc5b50595b
3895308a4eda88e9b1c8840164239ca724b1c73f786d8ccecf18b40d71995aa7f5f307adf855358f
ecac0387b47eb8c0ebf454f808fe430e1529812600098a1aecc34cebeaa8371df54ea02d9f7fdf24
d27dbe5d7c101a6f679f0e57cbfdd386f7bca5476022af457fd1931952305e5c06b86996b5e950b5
546d5b71644e79989f39647f7ea4ec39653be66c542d37d5288214d93a2d4a8f7ecb63b17d7c3ea1
4cb1b2eec15598ea4d72c564f312c54af4c745b4e5d7059763900e02c41ff4c0d0d2322448757d84
ce13c31a8c8e25401ca5e35b7dcb210885957e9ec00f08db7274a6cd7965d1f52e79dbd54e8773df
bd942135187d957deb8962d401278a607d3d8532707b7f3711e2776ecaba34564cd2b130bb95456b
4bed68ea5517d611433f9aa71dd19cf6aeba85645326ad200e1298f173f4f9873779cc205e8262bd
03ea1bb003c426a2eaa3285ee5f0fef4c5b17e97feb878743d39be234b7d0197c2c65415c17265fe
a939462dec5129d92575be44c5ef5ed093bc9a496308a95b9ee520f54899b92cc77dd7435351c722
7900f869cee0bc50a757cae04b96857c3ccc5cf5f89e2e62a7641f7f4f366326d0b9d5868099c46f
985db806d7f7b6516bd84c5c9e08ed3e9b74c4086d9b7b9c287ccd00ad58d6973d3b8999bcee36c6
7d051c4a0659a9088b36478b6e6d83942c1df9dc88611c2253c58a8e1c718f3d20f87e6b39b3be12
2ff87ab607ef4d9200ef4bb91ae1fd657524fcd67ed9c50e793e2a905ae242704ff8748f18eed3d8
769bca019436e7cf18886216fe5fd6eef35435bfeba0fbf9c7533a274c08dee14d833076cb028c9e
17e42d7fe57b5e04c50d2ef6978f7a781085b296eb1569d5461edf12be02a194eb92773811e01b47
817555c0af2460b3ddd7d0eefaaa04eb9b3f60c732e9da7fbe3113c5caf82999fe9edc3bff066e9f
32b4a438eaee88935964f1a6bc559968fb206a75fe262253735aa7dbe1d909cd11be510acb6933b3
43d5afe96826a58adfa5fb5c1d8b872a531eb8cd301cc6bf1f441ef32c1a2c48e204d8ab5e657eec
edec94ed60656d37f8325f4528d6b42682ec3d58cd3a3d9fb9bc13226ac7e9d44cb23d71ad18d7f1
8e6c5a279a8a35a6d5d56d29eaff03d2e78060385cc0543aeb530c7193b44a827c1a492eebb8578a
6fb9bfb77f8735911b84029af8a011bfc6bb032cbddc85733c07ad84f02b7520902b12a6e0424355
4a998c52157c32f32a8cd053fdd157684d39c93902656f49d44064241f5bb984a6a8e3361460b239
9ff7f4b7b1b6a99df3178a158cc2ecdb1f06a617f39e6c7d52ad1efbf0fed16238400c96b19ee4c3
97cb7cd2af56bb23afde6a723cc48c916e83118e293ce380439e48283047ca2021fd072afa9aa54d
d343d2a936e5f3d12a496aa8455d6815153122da4d6aa42671a285e05a08c4a5eb000a554a550c89
dc52237c0ff4d3b2df02a7d06e7cd35cc3eccce5583baee9b20c0116f97de7645f611363a35a6dc1
2a1c8157671565c6da546e726f87800b669d6cc487a5dd100d7373c1af867ca561e7056aa5731c4f
622def1f8bdc34ef6d54aa1e6f79670a2ccd9f20a9d177df0d752fcc39e3ecae8c4a8836584cfc6b
490e994224d4d420a2e51f24f1ad6e5237be360000a8d28282a986a4cb49e72ee791ffbb2157ebf2
f335302c4b3ba14bedc7bda1af6dd8ede86ab24c98cfd1f5c0fecb28464eca89ff6b127df04466bc
fdacedcf43b09f9bece91d14987e535d61eb22b3cc47bd7f6779dc8f6f5f21f059e450670641df13
2eaf06c8a6150c7c5415ca6f24294fd294610b5f9bdafff7dc8efbecb84a6a6563b94b9817743e45
84c7f48ed0ddc68029e302595f1522b60fccad159b4e7bb9eaa192dc287728b418574264683d7cb8
7534544ceb9f9033bf154d73025d992d0ec16d8e6d1ac0aec3b214fd33522a3386646d8af8296842
8e388b796cb15bfe557668ed9822ecc79af1f9f60290bff0628b11f4812522a67f3958dd3c7ee7f5
e46f25f6a65cd5d600657b0fc3c64a2e5044f050cb52e15bad048a31cc8ceeb990df2649aea39525
4f81be4b64c2ceb52ae627b98f1eb38ea822780c35f8c9b904ba30076adc37df8c1b15cab7e94f0c
a0f983ecacef85b617e842ff24f232f5f2e81d1653b22a9de59b0974620b4dd87408eece889772f1
183fea882d28816f74cad4f482cc30308d31f65335ac833f13d9f6c56fb874342dd4f2f497b66770
4f8164dcad624e935fe9c416589b63a8492ae4fe0a332920be8597a04db530d745e6e58be7947bdf
9e0d0ac8be8c24d4806d8995e85f8e545b81677d8a9a5bd597b582fbc231745631b24388b0d9dabe
87ec36fd3d7418b53ea6664ea1f932a7a5111a88cf192203578f735ef1fc8bd303d5194dde589d59
3aad78c59bf140bee561ca2087eefe9563cfc913e70978213aa45860199e996ff6badac8b40e76e8
92c720bc6219994a03b8baa8deb7ee950869cddeccce5c102fd64cbd3de8a9cd523ce85bec47df0f
ee01f3d8f7e7fe3300340730f3d02ebf3cf98dd3745c99b7f3a7ff2231b48305003b204e83bbe944
d6d2a04a3c9e81953d979358f6645f924f20151f475afad47a5ff78337dd778a41aeba28b3494953
b5a73f4de8c915861e38c176388a2280788943783c5d8d3205dbb41475b600e95533393da23447be
677a854c9fa6c11cdd5468330e407b35befb24832d0adbeb867c366a682fa3e3b1b98fc2bf2cb6e5
0edb6447f2056f526d436ceae70aaa2d1f75b741a273ea190eb69b3b5b4ac2063904494b9a03c244
2b47341b42bd4ca742408aa2a5a7e41b2cb47a0b9c7fdf2846531f7beb8a0396850851bfdfb0bb9b
9ab4cf3d2d7e04191dbff2e1339ca30a50d8ad0fdb3be1406060141ea2bb243f0a8b1933125ca1ef
ab783865ae8b3e8beb86bad3a68acbc80da3c1e1e680b61f38df604ac4e19e5b02a468691283e637
b9f5e686e3a6cb610125486d3b11799fd7bd46aeadbd6ff7ee39c5b4a7a6c47606b3083219e7d26e
1ae3754e2b6248ef7c0f636eda9da392b97976e26a8d79db181b817d1380b4a52a6fa23ae4941cdb
31571ac8f8b7b4b10e970f4ad64f3c390f7f4dcd893736b938483345e4e4821fed951851eded0b16
a598fc6a28c1cfa739018eb2f419340f8f187677b4995a6101e318e8917bc0bbbc176761bad00123
c7b9ee591a7d188743a80dcd7c9a95e9b98b2cd3ea12d57e964b09db3e4d4edde18f2cb356e55dcf
9beb9e7c49e97e43ebfdb090f35b07f8c4463a1f5cbfbfdcf1b6c64dd7fcabf31962cb563f8cd61e
7eda57591d87a00ad06bbf29ca355400b6d2fde0204078f85256c36ecb925e4bc020ef17a055f882
04a11e94bf713aad23e25f837c40662cec59f404195569f7eec92e7827617d1bc0fe22213b78a54f
bc8d42df8627438f2ac1ff7503442887a364460d68316a186e8ca94d753e817dd998dcadc99eb834
15363aeddfcd5892cfc95ccd64a75cb45c2b945f7b9bce38630e7365e819d51bb070eae4b16f8874
0673edbffd042efb9f3ffd37fbb6770583ad5c037f7239ea3f9f22571c1e26c150ae75ebd3b09066
0984f9f443c5e885733f92ccadce7c3a8d4a73adadb062a6ddd9cbe6102d20138f436711b4801aba
344e553f6e004ebbf729f64f063586f1a45bc38d73ea99badc2c519d3f466978d582602d9ac91b5a
66080dd8aa5daed0107ace32492c47e4e7987df6b7eb6cd2fe083791cd68038aca64de96ad32989c
e5ceb320b95e2787b81236f9fef7e129bb2abbc532cfb11749ae79f9e7b6e5878062ffe21f1051a0
cec042297cbc0ed392e2e7dbe58f2eaae0f51162e1e6acb5dcefffd469bc851d5c6368cf8faa53eb
00e74ec87d12e49b5e6958ba73f0c6fed289ad7b57558f4c9b025d378036aa1b501e904f18102c9a
625e68c53246c49e23656dfa88e1a7a19e071b4f23710ba791252bf96e6b9c9fd8911861ff649a19
3ac6da03b4d0ea38793ff24e20f5648b210fe802294dfd1089faaf4d2b1082b868449b95212b64b5
9caa24c1fcc9be1c0c42eb8fc93af8327db26513f59f132025375bf9a0b3a6146e0e08d04222d6b0
5693e2dda1f45aa8a53d515afc8041073b7793fe098436c3a278a37dba29c02a88f3e59922a9dc43
4765504677dd0ae0d08861c332f5729ffa419baafe4ac4678a45bb9ea4e75e50eb8307d49c0f7472
59fd56cbcad0e8902b2e5aafc7c9ba5e04ce5df5f495e70586d95fe81bc3ce9a04506bb679b03d98
f0b52e5a9d78c8b663a395b817e6137115751a5ce34316f0d02c6e7a2afdcb9a6ea7a33a79294314
1cdcc4b1f8f7c470675a5fc5800dfbd474b590b5c82486a25fbc8753266c483066e829955b141355
65413b18c6116c882a816f8e3d3e79ad32eb4824f3f24390433719f29d55f7b8f81d534711043e26
3a7a7a22bab082257eb7fc1718a5e9856720f4e53b56a333a27c9ef56b29134b64ffdfc4bce6140f
d2550d401ff2882763c522e408c855306f99b41b8519eff0e9b756749715a2a78e5c642afe4885c5
c0558be5b1d96d306283ce1a7bc6e1b39b580f422beeba52737bde45d8d1933d87e0dc09edceca04
711e9a2868dfae9c2fd23c86abf849bc81182391eb39b54c2f9dccc88769c57f7b1de0be0817b1cb
aade61fbe731f52f3a286bbe30c53ee305912ab3c71975f66c33e0a7e784d3ae125f6e75824bfcf3
4cdc6daf8ef8b00d45d4a20d1aa2add07857d9d23207345b6a8812409d772720e9ca7a03e0bc2a4a
dd40856d1db052f9f93e94c0ddac09844b37133ba5b8d3da12e170a7fb2915baa511f15128796e9f
dd26f3c60881c5a7c4bffacc0a56b0c0b642e3c19261b3a1f5aba2de136e1ae953796f5f3bb849fe
c556f82e843b67258f4298be677dc505ef7a8e0d90f4d764f7f6062a008694da1f3cdf56ca44699d
d3132aeb834713c70169d59b021800ed7e25c99cf01fb21caed31143f986500e29f2303e53bb068d
522a98e87de355b0e0da6a975c80a22e6a71e019f918fd0f4ace91e3df190cf37e7827b509c3b505
08913ee0510b1f6ae1f56d802d8530b48c53191251f688d278b5417ae6b19ee2c69562677e9ac8ad
34339c4b6fa21d658f6382b45171ce7cd59d1560a3560626a5d109edff0dfef21ef9ef5f29a48970
07fbef8ee54bec8b60b369b8295d1044884ac12c49c3ca926f3813be418d995a8e0fcf9ad5631c3f
239ff6c79dc083c31bf74f6d7418ecbc80cac7cc792844d48b37851c5bb9ef48b1bc494eac8f7604
55ea60079722a5747f49e51ea2635b61a88196bf6c641c5c5b42113edc9c95584a6bdaf56164a009
b6e5d58957ce9f99c197803505533acf4985a4586d0b1c4eb5c00d5ef0148a2feebcc891e719e9cf
d2eea3ab60d240bf6cbd2aa3470311ad88c4f5962ddbdd59f43446a842015881d99cb6137be63192
92e2be43b1c46acc3c6c964b812394462f1e0f808736f002a33c99bb623f63f30120ad5aa8615400
3f927f0802681179c5fca52a6e1fab79e066af77de1db6e2a2a575a7b1f5e2f9e48e32263498770e
73ad5007b14599666704546d7d53024320133737dfa136fa2137b67c0077b5284b9032aedc028c15
eadfff3cb48e6410d8e9b8c4bcff86f00b3237b13e39086b51ff5a13f959f39a6ac25206881af76a
aae0c14beea2727eb8c2bb3da4d4a8dd931f4b9856092cb4f526652c26f7ef0e80619c2ef8cc95a9
b7648e28e074e74283f1632f64c862cdbb5db6e9414a8978b5e8c54e9c5a7b21f99a1d253213a3af
2ce7b6a3415cd5f36fb3480a61fc08a53038f29986b569a8cea2442bfcb950f4c1336e2151486a4d
389fbb1f8e02b5708d43ed8b7eab2d34fe8b6f7f3304dd22859156d2946dbdd1be867f1907f77b6b
0a9bc76b5edc13cbe2b953ef8c9f836f884d2f4e3c8f9e70f8ed2850a72119b206d92f9c72528c76
65e8a7483f5966070ebc1c2ca82406e33e8f8e3e30ae9779d358d7aa5be32b11cf2de4e5c4a3b763
26cb81e9aa7610152285799467ec005cb0ccb716f0028468952cb54d98207578971980a9a88a5f2b
52de5fdc2c9ad071ebd70470542ce00af7ba12a2bc821186c5851704c8e49745023c569388080387
b49ebb99ccccbea90c30b702ddb64d7e8deadb9984f9b4efd3083748864fb37593c360c5a7bae48d
0a69015662d9389571cc61cee854fde0540792717d5699b68fc5ad1ffce7d167cb9bd4263c405a
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
 HBW_SetTarget_XZ <Virtual>  0
 PID_10 PID  0
 VGR_Movement TASK  0 -1
 SSC_Check_InOut <Virtual>  0
 PID_11 PID  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 V801 MHR799 1 0x0 C797 MC397 1"

// Rung VGR_Copy_State#2
// Offset 39
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 C810 MI402 1 0x0 C811 MI403 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1 0x0 MHR801 D1601 1"

// Rung MPO_Copy_State#2
// Offset 37
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 MC808 C1621 1 0x0 C1621 MI808 1 0x0 C1633 MI818 1"

// Rung SLD_Copy_State#2
// Offset 29
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 C1200 MI600 1 0x0 C1201 MI601 1 0x0 MC600 C1202 1 0x0 MHR1200 V2400 1 0x0 MHR1201 V2401 1 0x0 MC601 C1500 1"

// Rung SSC_Copy_State#2
// Offset 17
NOP

// Rung SSC_Copy_State#3
// Offset 18
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_SetTarget_XZ
$LGCMOD HBW_SetTarget_XZ

// Rung HBW_SetTarget_XZ#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5280 V140
POPBOOL
ANDE V105 3
MOVE 2990 V140

// Rung HBW_SetTarget_XZ#2
// Offset 23
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
ANDE V106 3
MOVE 3240 V142

// Rung HBW_SetTarget_XZ#3
// Offset 46
RET

// End of Code Block HBW_SetTarget_XZ
$LGCEND HBW_SetTarget_XZ

// Beginning of Code Block SSC_Check_InOut
$LGCMOD SSC_Check_InOut

// Rung SSC_Check_InOut#1
// Offset 0
STRN X42
OUT C1200

// Rung SSC_Check_InOut#2
// Offset 2
STRN X43
OUT C1201

// Rung SSC_Check_InOut#3
// Offset 4
RET

// End of Code Block SSC_Check_InOut
$LGCEND SSC_Check_InOut

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE $HBW_Encoder_X.Acc D140
MOVE $HBW_Encoder_Z.Acc D142

// Rung HBW_Move_XZ#5
// Offset 19
NOP

// Rung HBW_Move_XZ#6
// Offset 20
#BEGIN FMT_COMMENT 
"Loop Start"
#END

REPEAT

// Rung HBW_Move_XZ#7
// Offset 21
#BEGIN FMT_COMMENT 
"Enable/Disable PID control<br>"
"Set this to ST2 to disable PID for XZ<br> <br>"
"When PID is disabled V118 & V120 are used for PWM %25"
#END

STR ST2
OUT C90

// Rung HBW_Move_XZ#8
// Offset 23
#BEGIN FMT_COMMENT 
"Set XY direction<br>"
"Based on starting position compared to target<br>Needs to "
"be inside loop to keep outputs active"
#END

STR ST1
DUPBOOL
ANDLT D140 V140
OUT C51
POPBOOL
ANDLE D142 V142
OUT C52

// Rung HBW_Move_XZ#9
// Offset 36
#BEGIN FMT_COMMENT 
"PID Controller for X<br>& PID constants"
#END

STR C90
PID PID_10 0x60 $HBW_Encoder_X.Acc 0 8200 0.0 8200 """""" 20 100 WY0 DST511
PIDINIT PID_10 1000 0.01 0.01 0
MOVE V140 PID_10.SP
NOT
MOVE V118 PID_10.Output

// Rung HBW_Move_XZ#10
// Offset 61
#BEGIN FMT_COMMENT 
"PID Update current X value"
#END

STR ST1
MOVE $HBW_Encoder_X.Acc PID_10.PV

// Rung HBW_Move_XZ#11
// Offset 64
#BEGIN FMT_COMMENT 
"PID Controller for Z<br>& PID constants"
#END

STR C90
PID PID_11 0x40 DST511 DST511 DST511 DST511 DST511 """""" 35 100 WY1 DST511
PIDINIT PID_11 1000 0.01 0.01 0
NOT
MOVE V120 PID_11.Output

// Rung HBW_Move_XZ#12
// Offset 80
#BEGIN FMT_COMMENT 
"PID Update current Z value"
#END

STR ST1
MOVE $HBW_Encoder_Z.Acc PID_11.PV

// Rung HBW_Move_XZ#13
// Offset 83
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 88

// Rung HBW_Move_XZ#14
// Offset 98
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE $HBW_Encoder_X.Acc V140
OUT Y50

// Rung HBW_Move_XZ#15
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE $HBW_Encoder_X.Acc V140
OUT Y51

// Rung HBW_Move_XZ#16
// Offset 110
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 WY1

// Rung HBW_Move_XZ#17
// Offset 125
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Move_XZ#18
// Offset 131
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Move_XZ#19
// Offset 137
STR ST1
STR C51
ANDGE $HBW_Encoder_X.Acc V140
STRN C51
ANDLE $HBW_Encoder_X.Acc V140
ORSTR
ANDSTR
ANDN C150
STR C52
ANDGE $HBW_Encoder_Z.Acc V142
STRN C52
ANDLE $HBW_Encoder_Z.Acc V142
ORSTR
ANDSTR
OUT C150

// Rung HBW_Move_XZ#20
// Offset 164
#BEGIN FMT_COMMENT 
"Loop End"
#END

UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Test slot X & Y target value for out of range<br>"
"if X value greater than 4, fault code 105<br>"
"if Y value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#9
// Offset 38
#BEGIN FMT_COMMENT 
"Task Send<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if conveyor light barriers broken suggesting a pallot "
"is still there."
#END

STR C101
ANDN C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
AND X1
AND X2
JMP HBW_Program.S7
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
STRN X1
ORN X2
ANDSTR
JMP HBW_Program.S2
MOVE 107 V181

// Rung HBW_Program#10
// Offset 73
#BEGIN FMT_COMMENT 
"Task Recieve<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if outer conveyor light barrier no broken suggesting "
"no pallot is there."
#END

STR C102
ANDN C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
ANDN X2
JMP HBW_Program.S13
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
AND X2
JMP HBW_Program.S2
MOVE 108 V181

// Rung HBW_Program#11
// Offset 105
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#12
// Offset 107
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#13
// Offset 109
#BEGIN FMT_COMMENT 
"Task Send - Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 111
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#15
// Offset 114
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"

// Rung HBW_Program#16
// Offset 123
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1
OUT C12

// Rung HBW_Program#17
// Offset 129
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
AND C12
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 133
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 136
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 138
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 140
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 143
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 149
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 152
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 154
#BEGIN FMT_COMMENT 
"Task Send - Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 156
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 159
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 164
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 169
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 172
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 175
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 177
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 179
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 182
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 188
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 191
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 193
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 195
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 198
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 214
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 3000 C80

// Rung HBW_Program#41
// Offset 218
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#42
// Offset 222
NOP

// Rung HBW_Program#43
// Offset 223
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 225
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 227
#BEGIN FMT_COMMENT 
"Reserved Stage<br>"
"Just incase I need an extra stage for Task Send"
#END

SG HBW_Program.S12

// Rung HBW_Program#46
// Offset 229
#BEGIN FMT_COMMENT 
"Fault<br>Should never hit this reserve stage"
#END

STR ST1
JMP HBW_Program.S2

// Rung HBW_Program#47
// Offset 231
#BEGIN FMT_COMMENT 
"Task Receive - Conveyor In<br>& Move XZ to Conveyor"
#END

SG HBW_Program.S13

// Rung HBW_Program#48
// Offset 233
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 10 V131

// Rung HBW_Program#49
// Offset 236
#BEGIN FMT_COMMENT 
"Conveyor Out In"
#END

STR X1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 45
OUT Y49

// Rung HBW_Program#50
// Offset 252
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x1 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
AND X1
ONDTMR T4 3000 C80

// Rung HBW_Program#51
// Offset 257
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#52
// Offset 261
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2750 V142

// Rung HBW_Program#53
// Offset 266
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#54
// Offset 271
#BEGIN FMT_COMMENT 
"Movements completed<br>"
"Conveyor inner beam broken and XZ move complete"
#END

STR HBW_Move_XZ.Done
ANDN X1
JMP HBW_Program.S14
HALT HBW_Move_XZ

// Rung HBW_Program#55
// Offset 275
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#56
// Offset 278
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 280
#BEGIN FMT_COMMENT 
"Task Receive - Pick"
#END

SG HBW_Program.S14

// Rung HBW_Program#58
// Offset 282
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#59
// Offset 285
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#60
// Offset 291
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S15

// Rung HBW_Program#61
// Offset 294
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#62
// Offset 296
#BEGIN FMT_COMMENT 
"Task Receive - Move to Storage"
#END

SG HBW_Program.S15

// Rung HBW_Program#63
// Offset 298
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#64
// Offset 301
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"
OUT C12

// Rung HBW_Program#65
// Offset 311
#BEGIN FMT_COMMENT 
"Math calculate Y target for placement"
#END

STRPD C12
MATH V142 "V142 - 100"

// Rung HBW_Program#66
// Offset 321
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#67
// Offset 326
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S16
HALT HBW_Move_XZ

// Rung HBW_Program#68
// Offset 329
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#69
// Offset 332
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#70
// Offset 334
#BEGIN FMT_COMMENT 
"Task Receive - Place<br>Place onto storage shelf"
#END

SG HBW_Program.S16

// Rung HBW_Program#71
// Offset 336
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#72
// Offset 339
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#73
// Offset 345
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S17

// Rung HBW_Program#74
// Offset 348
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#75
// Offset 350
#BEGIN FMT_COMMENT 
"Task Receive - Move to Idle"
#END

SG HBW_Program.S17

// Rung HBW_Program#76
// Offset 352
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#77
// Offset 355
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 4300 V140
MOVE 1400 V142

// Rung HBW_Program#78
// Offset 360
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#79
// Offset 365
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S1
HALT HBW_Move_XZ

// Rung HBW_Program#80
// Offset 368
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#81
// Offset 371
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#82
// Offset 373
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#83
// Offset 375
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#84
// Offset 377
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#85
// Offset 380
#BEGIN FMT_COMMENT 
"Force Ready<br>Jump to ready state without resetting<br>"
"Reset Fault code"
#END

STR ST1
MOVE MC105 C105
AND C105
JMP HBW_Program.S1
MOVE 0 V181

// Rung HBW_Program#86
// Offset 387
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#87
// Offset 389
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#88
// Offset 391
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#89
// Offset 394
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#90
// Offset 409
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
ANDLE $HBW_Encoder_X.Acc 8050
OUT Y50

// Rung HBW_Program#91
// Offset 415
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#92
// Offset 418
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#93
// Offset 433
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#94
// Offset 436
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#95
// Offset 439
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#96
// Offset 454
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#97
// Offset 457
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
ANDLE $HBW_Encoder_Z.Acc 3500
OUT Y4

// Rung HBW_Program#98
// Offset 463
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#99
// Offset 478
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#100
// Offset 480
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#101
// Offset 482
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#102
// Offset 484
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#103
// Offset 486
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#104
// Offset 488
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#105
// Offset 491
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#106
// Offset 494
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 40 MHR120 1"

// Rung HBW_Program#107
// Offset 510
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick
HALT HBW_Place

// Rung HBW_Program#108
// Offset 514
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#109
// Offset 531
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 100
OUT Y7

// Rung HBW_Program#110
// Offset 547
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#111
// Offset 564
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#112
// Offset 580
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#113
// Offset 584
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#114
// Offset 586
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#115
// Offset 589
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#116
// Offset 593
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#117
// Offset 596
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"Reset Stage"
#END

SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Reset VGR Fault Code"
#END

STR ST1
MOVE 0 V801

// Rung VGR_Program#7
// Offset 25
STR ST1
COPY 0x0 "4 0x0 0 N810 1 0x0 0 N811 1 0x0 0 N811 1"

// Rung VGR_Program#8
// Offset 37
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#9
// Offset 54
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#10
// Offset 71
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#11
// Offset 88
STR X25
AND X26
AND X27
ONDTMR T54 100 C798

// Rung VGR_Program#12
// Offset 94
STR C798
OUT $VGR_Encoder_Rot.ResetEdge
OUT $VGR_Encoder_X.ResetEdge
OUT $VGR_Encoder_Y.ResetEdge

// Rung VGR_Program#13
// Offset 98
STR C798
JMP VGR_Program.S2

// Rung VGR_Program#14
// Offset 100
SG VGR_Program.S2

// Rung VGR_Program#15
// Offset 102
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#16
// Offset 110
STR ST1
OUT C797

// Rung VGR_Program#17
// Offset 112
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S1

// Rung VGR_Program#18
// Offset 114
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#19
// Offset 116
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#20
// Offset 118
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#21
// Offset 120
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#22
// Offset 122
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S20

// Rung VGR_Program#23
// Offset 124
#BEGIN FMT_COMMENT 
"Move Crane from 0 state to HBW"
#END

SG VGR_Program.S3

// Rung VGR_Program#24
// Offset 126
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#25
// Offset 134
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 5385 N810

// Rung VGR_Program#26
// Offset 137
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 820 N811

// Rung VGR_Program#27
// Offset 140
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 620 N812

// Rung VGR_Program#28
// Offset 143
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#29
// Offset 148
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
JMP VGR_Program.S4
HALT VGR_Movement

// Rung VGR_Program#30
// Offset 151
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#31
// Offset 155
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#32
// Offset 157
#BEGIN FMT_COMMENT 
"Pick up disk from HBW"
#END

SG VGR_Program.S4

// Rung VGR_Program#33
// Offset 159
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#34
// Offset 167
STR ST1
SET Y28

// Rung VGR_Program#35
// Offset 169
STR ST1
ONDTMR T51 100 C414

// Rung VGR_Program#36
// Offset 173
STR C414
SET Y29

// Rung VGR_Program#37
// Offset 175
STR C414
ONDTMR T52 100 C415

// Rung VGR_Program#38
// Offset 179
#BEGIN FMT_COMMENT 
"FOR TESTING, JUMP TO FAULT STATE ON COMPLETION"
#END

STR C415
JMP VGR_Program.S30

// Rung VGR_Program#39
// Offset 181
#BEGIN FMT_COMMENT 
"Move crane from HBW to MPO"
#END

SG VGR_Program.S5

// Rung VGR_Program#40
// Offset 183
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#41
// Offset 191
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 400 N810

// Rung VGR_Program#42
// Offset 194
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 0 N811

// Rung VGR_Program#43
// Offset 197
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#44
// Offset 200
STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#45
// Offset 205
STR VGR_Movement.DoneThisScan
JMP VGR_Program.S6
HALT VGR_Movement

// Rung VGR_Program#46
// Offset 208
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#47
// Offset 212
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#48
// Offset 214
#BEGIN FMT_COMMENT 
"Position Crane to drop disk onto MPO"
#END

SG VGR_Program.S6

// Rung VGR_Program#49
// Offset 216
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#50
// Offset 224
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 100 N811

// Rung VGR_Program#51
// Offset 227
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 100 N812

// Rung VGR_Program#52
// Offset 230
STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#53
// Offset 235
STR VGR_Movement.DoneThisScan
JMP VGR_Program.S7
HALT VGR_Movement

// Rung VGR_Program#54
// Offset 238
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#55
// Offset 242
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#56
// Offset 244
#BEGIN FMT_COMMENT 
"Release vacuum and turn off compressor"
#END

SG VGR_Program.S7

// Rung VGR_Program#57
// Offset 246
STR ST1
RST Y29

// Rung VGR_Program#58
// Offset 248
STR ST1
ONDTMR T53 100 C416

// Rung VGR_Program#59
// Offset 252
STR C416
RST Y28

// Rung VGR_Program#60
// Offset 254
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C416
JMP VGR_Program.S1

// Rung VGR_Program#61
// Offset 256
SG VGR_Program.S8

// Rung VGR_Program#62
// Offset 258
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#63
// Offset 266
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#64
// Offset 268
#BEGIN FMT_COMMENT 
"Manual Control"
#END

SG VGR_Program.S20

// Rung VGR_Program#65
// Offset 270
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#66
// Offset 278
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#67
// Offset 293
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#68
// Offset 296
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#69
// Offset 298
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#70
// Offset 313
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#71
// Offset 315
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#72
// Offset 318
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#73
// Offset 333
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#74
// Offset 335
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#75
// Offset 338
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#76
// Offset 340
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#77
// Offset 342
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#78
// Offset 344
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#79
// Offset 346
STRN C500
JMP VGR_Program.S1

// Rung VGR_Program#80
// Offset 348
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG VGR_Program.S30

// Rung VGR_Program#81
// Offset 350
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#82
// Offset 358
STR ST1
HALT VGR_Movement

// Rung VGR_Program#83
// Offset 360
STR ST1
ONDTMR T99 15000 C700

// Rung VGR_Program#84
// Offset 364
STR C700
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
#BEGIN FMT_COMMENT 
"If we are not outside the oven, turn on the compressor"
#END

STRN X18
OUT Y17

// Rung MPO_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"If the compressor is on, open the door"
#END

STR Y17
OUT Y20

// Rung MPO_Program#5
// Offset 14
STR Y20
OUT Y52

// Rung MPO_Program#6
// Offset 16
#BEGIN FMT_COMMENT 
"If the crane is not at turntable position, move towards it"
#END

STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#7
// Offset 32
#BEGIN FMT_COMMENT 
"Turn off the conveyor belt when reseting"
#END

STR ST1
RST Y47

// Rung MPO_Program#8
// Offset 34
#BEGIN FMT_COMMENT 
"Reset our bit that said its detected something"
#END

STR ST1
RST C1000

// Rung MPO_Program#9
// Offset 36
STR ST1
RST Y18

// Rung MPO_Program#10
// Offset 38
#BEGIN FMT_COMMENT 
"Reset end of coveryor belt detection bit"
#END

STR ST1
RST C1001

// Rung MPO_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Reset the turntable plunger"
#END

STR ST1
RST Y21

// Rung MPO_Program#12
// Offset 42
#BEGIN FMT_COMMENT 
"Reset turntable to crane position"
#END

STRN X12
OUT Y46

// Rung MPO_Program#13
// Offset 44
#BEGIN FMT_COMMENT 
"Jump to manual control mode"
#END

STR C801
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 46
#BEGIN FMT_COMMENT 
"Make sure the crane is at the turntable, the turntable is "
"facing the crane, we are not wanting to control manually, "
"and the loading tray is outside the oven before beginning "
"stage 1"
#END

STR X16
AND X12
ANDN C801
AND X18
ANDN C802
JMP MPO_Program.S1

// Rung MPO_Program#15
// Offset 52
SG MPO_Program.S1

// Rung MPO_Program#16
// Offset 54
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#17
// Offset 62
#BEGIN FMT_COMMENT 
"If our oven timer is less than 100, fault out"
#END

STRLE D1600 100
JMP MPO_Program.S8

// Rung MPO_Program#18
// Offset 67
#BEGIN FMT_COMMENT 
"If our saw timer is less than 100, fault out"
#END

STRLE D1601 100
JMP MPO_Program.S8

// Rung MPO_Program#19
// Offset 72
#BEGIN FMT_COMMENT 
"C810 is the ready status bit"
#END

STR ST1
ANDN Y17
ANDN Y16
OUT C810

// Rung MPO_Program#20
// Offset 76
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#21
// Offset 79
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#22
// Offset 83
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#23
// Offset 86
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#24
// Offset 90
STR Y20
AND X17
RST Y20

// Rung MPO_Program#25
// Offset 93
#BEGIN FMT_COMMENT 
"Once inside, turn off the compressor, which will shut the door"
#END

STRND Y20
AND X17
RST Y17

// Rung MPO_Program#26
// Offset 97
#BEGIN FMT_COMMENT 
"Once inside and door is closed turn on oven"
#END

STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#27
// Offset 103
#BEGIN FMT_COMMENT 
"When done timing move to next stage"
#END

STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#28
// Offset 107
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#29
// Offset 109
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#30
// Offset 111
SG MPO_Program.S2

// Rung MPO_Program#31
// Offset 113
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#32
// Offset 121
#BEGIN FMT_COMMENT 
"If we are inside the oven, turn on the compressor"
#END

STR X17
SET Y17

// Rung MPO_Program#33
// Offset 123
#BEGIN FMT_COMMENT 
"If we are inside the oven and the door is not open, then "
"open the door"
#END

STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#34
// Offset 126
#BEGIN FMT_COMMENT 
"If the door is open and we are not outside of the oven, "
"then move the tray out."
#END

STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#35
// Offset 129
STR X18
RST Y17

// Rung MPO_Program#36
// Offset 131
STR X18
RST Y20

// Rung MPO_Program#37
// Offset 133
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#38
// Offset 135
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#39
// Offset 137
SG MPO_Program.S3

// Rung MPO_Program#40
// Offset 139
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#41
// Offset 147
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#42
// Offset 165
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#43
// Offset 168
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#44
// Offset 173
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#45
// Offset 179
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#46
// Offset 183
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#47
// Offset 185
SG MPO_Program.S4

// Rung MPO_Program#48
// Offset 187
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#49
// Offset 195
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#50
// Offset 212
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#51
// Offset 217
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#52
// Offset 223
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#53
// Offset 227
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 229
SG MPO_Program.S5

// Rung MPO_Program#55
// Offset 231
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 239
#BEGIN FMT_COMMENT 
"Turn turntable until at position to saw"
#END

STRN X15
AND C800
OUT Y45

// Rung MPO_Program#57
// Offset 242
#BEGIN FMT_COMMENT 
"Once you reach saw position, activate the saw"
#END

STRPD X15
OFFDTMR T103 D1601 Y43

// Rung MPO_Program#58
// Offset 247
#BEGIN FMT_COMMENT 
"Once done sawing, move to the next stage"
#END

STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#59
// Offset 252
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#60
// Offset 254
SG MPO_Program.S6

// Rung MPO_Program#61
// Offset 256
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#62
// Offset 264
#BEGIN FMT_COMMENT 
"Keep rotating until we are at plunger position"
#END

STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#63
// Offset 267
STRPD X13
SET Y18

// Rung MPO_Program#64
// Offset 270
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#65
// Offset 275
STRPD X13
OFFDTMR T104 3000 Y47

// Rung MPO_Program#66
// Offset 280
#BEGIN FMT_COMMENT 
"If the light barrier gets broken, set c1001 true"
#END

STRN X14
SET C1001

// Rung MPO_Program#67
// Offset 282
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#68
// Offset 284
STRND T104.Timing
AND C1001
JMP MPO_Program.S0

// Rung MPO_Program#69
// Offset 288
STRND T104.Timing
ANDN C1001
JMP MPO_Program.S8

// Rung MPO_Program#70
// Offset 292
SG MPO_Program.S7

// Rung MPO_Program#71
// Offset 294
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#72
// Offset 302
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#73
// Offset 307
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#74
// Offset 312
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#75
// Offset 317
#BEGIN FMT_COMMENT 
"Manually move crane towards oven"
#END

STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#76
// Offset 334
#BEGIN FMT_COMMENT 
"Manually move crane to turn table"
#END

STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#77
// Offset 351
STRN C801
JMP MPO_Program.S0

// Rung MPO_Program#78
// Offset 353
SG MPO_Program.S8

// Rung MPO_Program#79
// Offset 355
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#80
// Offset 363
#BEGIN FMT_COMMENT 
"Turn on flashing red light"
#END

STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#81
// Offset 368
STR ST1
OUT C811

// Rung MPO_Program#82
// Offset 370
#BEGIN FMT_COMMENT 
"If Reset Button (C802) is pressed and both the oven timer "
"and saw timer are over 100ms go back to stage 0"
#END

STR C802
ANDGE D1600 100
ANDGE D1601 100
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STR C1610
COPY 0x1 "4 0x0 1 C1621 1"

// Rung SLD_Program#8
// Offset 32
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STR C1610
JMP SLD_Program.S2

// Rung SLD_Program#9
// Offset 34
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 36
SG SLD_Program.S10

// Rung SLD_Program#11
// Offset 38
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 46
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#13
// Offset 48
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#14
// Offset 50
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#15
// Offset 52
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#16
// Offset 54
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#17
// Offset 56
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#18
// Offset 61
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#19
// Offset 63
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#20
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#21
// Offset 67
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#22
// Offset 75
#BEGIN FMT_COMMENT 
"Start timer for start fault. If light barrier isn't broken "
"by timer end, FAULT."
#END

STR ST1
ONDTMR T212 2000 C1632

// Rung SLD_Program#23
// Offset 79
#BEGIN FMT_COMMENT 
"While bit is on, if light barrier isn't triggered, FAULT."
#END

STR C1632
AND X35
OUT C1633

// Rung SLD_Program#24
// Offset 82
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#25
// Offset 88
STR ST1
COPY 0x1 "4 0x0 26000 V3205 1"

// Rung SLD_Program#26
// Offset 95
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T200.Timing
JMP SLD_Program.S3

// Rung SLD_Program#27
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#28
// Offset 100
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#29
// Offset 108
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#30
// Offset 113
#BEGIN FMT_COMMENT 
"Checks for lowest color value in color sensor."
#END

STRLE V3200 V3205
COPY 0x1 "4 0x0 V3200 V3205 1"

// Rung SLD_Program#31
// Offset 123
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3205 0x1 10000 6000 C1602

// Rung SLD_Program#32
// Offset 128
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#33
// Offset 130
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3205 0x1 20000 18000 C1619

// Rung SLD_Program#34
// Offset 135
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#35
// Offset 137
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3205 0x1 24500 21000 C1620

// Rung SLD_Program#36
// Offset 142
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#37
// Offset 144
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 4, jump to S4."
#END

STR C1602
ANDLT V3202 4
JMP SLD_Program.S4

// Rung SLD_Program#38
// Offset 150
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 4, jump to S5."
#END

STR C1619
ANDLT V3203 4
JMP SLD_Program.S5

// Rung SLD_Program#39
// Offset 156
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 4, jump to S6."
#END

STR C1620
ANDLT V3204 4
JMP SLD_Program.S6

// Rung SLD_Program#40
// Offset 162
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#41
// Offset 169
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#42
// Offset 176
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#43
// Offset 183
SG SLD_Program.S4

// Rung SLD_Program#44
// Offset 185
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#45
// Offset 193
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#46
// Offset 197
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#47
// Offset 199
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#48
// Offset 204
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#49
// Offset 206
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#50
// Offset 211
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#51
// Offset 213
STRND C1604
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#52
// Offset 220
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#53
// Offset 223
SG SLD_Program.S5

// Rung SLD_Program#54
// Offset 225
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#55
// Offset 233
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#56
// Offset 237
STRN C1606
OUT Y30

// Rung SLD_Program#57
// Offset 239
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#58
// Offset 244
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#59
// Offset 246
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#60
// Offset 251
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#61
// Offset 253
STRND C1607
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#62
// Offset 260
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#63
// Offset 263
SG SLD_Program.S6

// Rung SLD_Program#64
// Offset 265
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#65
// Offset 273
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#66
// Offset 277
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#67
// Offset 279
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#68
// Offset 284
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#69
// Offset 286
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#70
// Offset 291
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#71
// Offset 293
STRND C1612
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#72
// Offset 300
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#73
// Offset 303
SG SLD_Program.S7

// Rung SLD_Program#74
// Offset 305
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#75
// Offset 313
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 8000 C1630

// Rung SLD_Program#76
// Offset 317
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#77
// Offset 319
STRND Y30
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#78
// Offset 326
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y37

// Rung SSC_Program#5
// Offset 14
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"c1202 is reset button, c1500 is execute command"
#END

STR X40
AND X41
ANDN C1202
AND C1500
JMP SSC_Program.S1

// Rung SSC_Program#7
// Offset 27
SG SSC_Program.S1

// Rung SSC_Program#8
// Offset 29
#BEGIN FMT_COMMENT 
"Look at HBW"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#9
// Offset 37
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#10
// Offset 45
STR ST1
ANDPDPF
OUT C1203

// Rung SSC_Program#11
// Offset 48
STRN CT150.Done
OUT Y38

// Rung SSC_Program#12
// Offset 50
STRN CT150.Done
AND X46
STR C1203
CNT CT150 V2400

// Rung SSC_Program#13
// Offset 55
STRN CT151.Done
OUT Y35

// Rung SSC_Program#14
// Offset 57
STRN CT151.Done
AND X44
STR C1203
CNT CT151 V2401

// Rung SSC_Program#15
// Offset 62
STR CT150.Done
AND CT151.Done
JMP SSC_Program.S2

// Rung SSC_Program#16
// Offset 65
SG SSC_Program.S2

// Rung SSC_Program#17
// Offset 67
#BEGIN FMT_COMMENT 
"Look at VGR"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#18
// Offset 75
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#19
// Offset 83
STR ST1
ANDPDPF
OUT C1204

// Rung SSC_Program#20
// Offset 86
NOP

// Rung SSC_Program#21
// Offset 87
STR C1202
JMP SSC_Program.S0

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRPD X37
DEC V3202

// Rung SLD_Storage#2
// Offset 3
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRPD X38
DEC V3203

// Rung SLD_Storage#3
// Offset 6
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRPD X39
DEC V3204

// Rung SLD_Storage#4
// Offset 9
STRE V3202 3
OUT C1628

// Rung SLD_Storage#5
// Offset 14
STRE V3203 3
OUT C1629

// Rung SLD_Storage#6
// Offset 19
STRE V3204 3
OUT C1631

// Rung SLD_Storage#7
// Offset 24
#BEGIN FMT_COMMENT 
"Upper bound W fault state."
#END

STRGT V3202 3
OUT C1625

// Rung SLD_Storage#8
// Offset 29
#BEGIN FMT_COMMENT 
"Upper bound R fault state."
#END

STRGT V3203 3
OUT C1626

// Rung SLD_Storage#9
// Offset 34
#BEGIN FMT_COMMENT 
"Upper bound B fault state"
#END

STRGT V3204 3
OUT C1627

// Rung SLD_Storage#10
// Offset 39
STR ST1
COPY 0x1 "4 0x0 V3202 MC809 1 0x0 V3203 MC810 1 0x0 V3204 MC811 1 0x0 C1625 MC812 1 0x0 C1626 MC813 1 0x0 C1627 MC814 1 0x0 C1628 MI815 1 0x0 C1629 MI816 1 0x0 C1631 MI817 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

// Beginning of Code Block VGR_Movement
$TSK VGR_Movement

// Rung VGR_Movement#1
// Offset 0
NOP

// Rung VGR_Movement#2
// Offset 1
STR ST1
RANGECHECK N810 0x0 8000 0 C780
RANGECHECK N811 0x0 1000 0 C781
RANGECHECK N812 0x0 1000 0 C782

// Rung VGR_Movement#3
// Offset 14
#BEGIN FMT_COMMENT 
"Set fault state if rotation out of range"
#END

STR C780
MOVE 1 V801

// Rung VGR_Movement#4
// Offset 17
#BEGIN FMT_COMMENT 
"Set fault state if X out of range"
#END

STR C781
MOVE 2 V801

// Rung VGR_Movement#5
// Offset 20
#BEGIN FMT_COMMENT 
"Set fault state if Y out of range"
#END

STR C782
MOVE 3 V801

// Rung VGR_Movement#6
// Offset 23
#BEGIN FMT_COMMENT 
"Initiate starting values"
#END

STR ST1
MOVE 0 N813
MOVE 0 N814
MOVE 0 N815

// Rung VGR_Movement#7
// Offset 30
NOP

// Rung VGR_Movement#8
// Offset 31
#BEGIN FMT_COMMENT 
"Set Crane Rotation Direction (Encoder Values decrement on "
"CCW Rotation)"
#END

STRLE $VGR_Encoder_Rot.Acc N810
OUT C411

// Rung VGR_Movement#9
// Offset 36
#BEGIN FMT_COMMENT 
"Set Crane X Direction"
#END

STRLE $VGR_Encoder_X.Acc N811
OUT C412

// Rung VGR_Movement#10
// Offset 41
#BEGIN FMT_COMMENT 
"Set Crane Y Direction"
#END

STRLE $VGR_Encoder_Y.Acc N812
OUT C413

// Rung VGR_Movement#11
// Offset 46
REPEAT

// Rung VGR_Movement#12
// Offset 47
#BEGIN FMT_COMMENT 
"Calculate Rotation position difference"
#END

STR ST1
MATH N813 "$VGR_Encoder_Rot.Acc - N810"

// Rung VGR_Movement#13
// Offset 56
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Movement#14
// Offset 71
#BEGIN FMT_COMMENT 
"If crane needs to rotate CCW to get to target"
#END

STR C411
ANDLE N813 0
OUT Y27

// Rung VGR_Movement#15
// Offset 77
#BEGIN FMT_COMMENT 
"If crane needs to rotate CW to get to target"
#END

STRN C411
ANDGE N813 0
OUT Y26

// Rung VGR_Movement#16
// Offset 83
#BEGIN FMT_COMMENT 
"Calculate X position difference"
#END

STR ST1
MATH N814 "$VGR_Encoder_X.Acc - N811"

// Rung VGR_Movement#17
// Offset 92
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Movement#18
// Offset 107
#BEGIN FMT_COMMENT 
"If crane needs to extend X+ to get to target"
#END

STR C412
ANDLE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y25

// Rung VGR_Movement#19
// Offset 121
#BEGIN FMT_COMMENT 
"If crane needs to retract X- to get to target"
#END

STRN C412
ANDGE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y24

// Rung VGR_Movement#20
// Offset 135
#BEGIN FMT_COMMENT 
"Calculate Y position difference"
#END

STR ST1
MATH N812 "$VGR_Encoder_Y.Acc - N812"

// Rung VGR_Movement#21
// Offset 144
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Movement#22
// Offset 159
#BEGIN FMT_COMMENT 
"If crane needs to extend Y- to get to target"
#END

STR C413
ANDLE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y23

// Rung VGR_Movement#23
// Offset 173
#BEGIN FMT_COMMENT 
"If crane needs to retract Y+ to get to target"
#END

STRN C413
ANDGE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y22

// Rung VGR_Movement#24
// Offset 187
#BEGIN FMT_COMMENT 
"Exit Conditions for all movements"
#END

STRLE N813 40
ANDGE N813 -40
ANDLE N814 40
ANDGE N814 -40
ANDLE N815 40
ANDGE N815 -40
ONDTMR T50 500 C499

// Rung VGR_Movement#25
// Offset 214
UNTIL C499

// End of Code Block VGR_Movement
$TSKEND VGR_Movement

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C11","C11_Interlock","","Used to delay logic by one scan"
"C12","C12_Interlock_2","","Used to delay logic by one scan"
"C51","X_Direction","","True: Left False: Right"
"C52","Z_Direction","","True: Down False: Up"
"C80","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","Fault_X_Target","","Active when X target out of range"
"C183","Fault_Z_target","","Active when Z target out of range"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"D0","MC","",""
"D140","X_Start_Position","","Distance to target"
"D142","Y_Start_Position","","Distance to target"
"T3","T_HBW_S6","",""
"T4","T_Conveyor_Timer","","Used to detect conveyor faults"
#END

