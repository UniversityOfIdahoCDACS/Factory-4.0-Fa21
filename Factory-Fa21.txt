// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Nick\Documents\GitHub\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
d3f58c9e4804eae164f755c86ce78d078c1ff3cd8153d00fe3f54c80897267b004c2cbba235151f5
da6fc04928156378d652ea41e5862fd3dfb52e1ef2d49b90e2e02c80aa39035313bca5a220c5b66e
11e0fdbd049c28a80191a96509d764083e46b52a35692743549f0fb08bf155091df0dd643180fe2c
376d2be11014e806651a7a3e995dd1741cebda829b3906c9341ea74aed7ced0e42908e8899738a08
16de82701fc2aca6b19f2852a0ba1fd67e9094c2a6dd6476085cedfe98d015a51546e5a3af97bd03
b4d33d0e2a4591969df43d047e9b5ac2a490e287e09fc3ad670606811e6788fb06b8f4ab6b6ca28a
71a99c91680c838eda362917c78aee39f7210688b78a6cd350bb1c329a6cd88f89b8c848babe4606
9fb9dc85e4eecc4d7660c20665d1b6492af31cbbf2221fbe617f3920f5811529d7813646795c19dd
ee89dda0d71eac0afc379bcbdc4c5cbae1fb816cca62eaa182ddd0a039304c559aacf2348efa5e01
cc7218c7fc75af106932b58215c3a9431a2d2c7a1f269083176431097a9791f61cbf9c52cbecb524
1f23f3e13bafb964bab8380405ab1c9dcad8ae7b717239503f090367de6f04360c69b5ba6083a7df
26af0187bdc7832ca04537c385a00a8737066654ef9d95da73a242663f468058607c2f9d2dfd36a3
ab413a16a510b13278aad6fed51c2ee3a14ffa7200033c1dbaba548d425ad474b674fdfce6da1b8c
647b861a55b94e8bf414f34183154021c9abd03c39e03dfb5240039adadfe39c5e3ac80a92a47846
da9ec1c7186dcd69aec1d9232abf87508df0ad89f24d514ca0e4388cbd22050f8ffb453673ca2c9b
3daae51517b2e780dd6f353c46e9f5c4658fb6b1ee8711e666495fc50eb671669092a8859dfd29ed
fdbd959661bc72b927edd98c449bb9538357e72b435504115ce36735ec1a1a6620d706a05b66e9d4
a6b50f9717fd347c5e4ca4191f17e2107cf731d8a4cb6ad078ea7ca9b901bd1bc3c9cb419684a8ce
554bbea77aa4f15cbf1d74cd0f69360a189134563128e5fac63fbaad9e6fba10f13c4f7b810c167f
c8f0e75122b85e7936a4e30967a26424384c65e82bfdfa9a8454856ca2bcb0b573dc2db41d658e89
472b6b71f342a67dca8b0747d910a785fcd58e98d1e5d84a0be807ee529d61ed7e8a79863645d6aa
7cbb503792cd28387745592a924a59ba15dcef840cd6125faa3760f0cfb352a1927955ef5da12bde
dec0246e1d27423714bb2f7151b878657765e595bcb91c16c750c38c8977f7c3b052892a6b2fd696
0f65eda5b38cb5594884733761c7c1798ed932a73dabe69745868ce51dbe9575132f1bf89f9eb945
bd16868cde58207ca5fabf008817f97404edf85e8ffb0eda8f669b222460a9f6672393d365620b8e
c4678b8f56d1909cb1e549b72983333a475d2c40726807eb84f0d3f1981ea27655f1e5755e495530
fadba4aeaeb02a7917039f566d3965882c44bd45ae51f92dbd2dc24f055a95ad65e842c4b6f8b107
b40c3b0f902cd683411b2babc52dbb389fcbb6abf1151181b4a3c22e4bdfad1e9514bfd236687d00
cad09dc05c3de311508f614c04c803052d5e1506f0d0232e7bb8a7311adcdaf6c991f637f7fc7069
13cd05301286ca8dc60ad511347335603f5f89b0b7286059e6f19496241281bf3151d6620135dbbd
24c8436f7441fa21c5974ba473ae574ad0d491dc7dd06aafb3c4e3cbf3c05e922ff0910500e6dfce
11fb69d6475a7d86f1289d728ce02f4e6a361ad99e883b25a263f6898724ee4360c931bbee4aa1d5
5a0dfa21bdb8520e5c8d14f837ff7c337a1bfb0c9ce86730c71a8683693567b6ab0953ca0a550ee6
0b173991714fe985496d6895b87fa6304b6c9f51069b28416a0e41951d0e15073116a73ca097824a
bbe0e2e9ffde868f8e4bcc4165cc94ce7ac1e08384cb1ab4cd2096d5aaccf14a71043d92c70b7c59
9758501aaf5d6a67a4686a8373c67e12a7ada06e20b6fc4d31369da6428fb7e9802a504543130bf5
9a58e7f9637b810f5d9b7e879014be723465590b919408f3b6efb7df86a3b20658c1cdef8ba410c6
49ba49f634808dbc569d89b132decb83c8401e1510507d01e52f35999106146241ce1bfec8507eb8
8656bc04453c4ede12ef78230a748052d2fbcc56beb4b6b0d499ea207d702e7e5c7a799b67b531d8
03cd6d53533c0e196a203e6816f5a32428f9036c1b3515b878ccda9bd0b9d6b0270af6a7d122e319
296cd66744c072fc14c513b44ffaaa61def65052e5f5cbe558d79b5884ba90bc0a6c2253ddfb3378
f1f2c3368f87501668f1620b6b0741d2d90b859b0b9b7dc191082385f9eda17d6b528b010831b9b0
ee30e7186994b4fd8c867a771039a4b8f5a8da9113077bd55e134a8f040d625ee6fb19830a0edef9
4fb452e6282b5023ac01e368477934a98d2ee1b3cd125c6114efd1848dbeb529248c172a22d1c59c
57f01cb6974b5a97087a623f670ee7c6d80a9c58aee6e14a472999d5d0fc86fc99ed8254b18e0ee2
bf1874346857c95379924f5cb5d63ebc1a26dec8022450ef379ef5eae714eeaba922575bf8f1c2e8
b384f7943a3eb00b856fc5d9d7c6ea9e0159f2f95f5dd8c8f6d8dd533fff231d373ce16ae5a5958d
8500762e8323bde93936bb8d1fdec1c589a61d396a3abed817200c6f54965371482a71a5317eb340
8be8c3609c7dc92d6c0ff5fa2e446e248a605c04ba9bb43f9b446bfd9cfb6f0a54243c30d6c13571
562f2cb6fa468b3a457b50167a2ececc13ad6bd4c659ea9b6aeea4341178480992b65e380f019c58
b8bd6565d10915394c49ffeaf0355a0f0e693115770e374f6ad8d48ec380517d92747a78e4bbec8f
916bb7977a7bbeedf21ca69dd183997d8e391b74b8fb84b7d9330d8fbcee41caa26a3db0854b57f2
dab91e216002a295326d10aba485d59be799cb1927cc622022780f122cc807b46bf2eddf01ea01df
e024c1d95c5cdacb41c68befb39355d6478247260fad84430de12397b178f3cc00bdd8ecf2092e76
30e49b2004a8653c3b1060986226e6f9b76043d6f374369d86663dd80fe5a7de3d822013e18d2512
fd22aeb6866dbaaac8575df09fa6d5779baf8837da4d2e91ee87d7d1c0a7f33f26a4f19543cdb930
930216d8af1ce4b5a2e61f7e92646d292ba1fb4ce98b05b59e050d44c0a234196ee9e909269c5547
b1e6e90dcd2e91a4e78a769a83d1257ca11cd647e2b1d967530b58f1a8adfaa0b335425c9e03e0f8
f487ac95e812c21f403f3566f7e249f31c1358fb4dd075e2d7b0382060eeac937743aa53f39da4d2
8f04606f6725b8f9fb9dddeaa446e37a969c3a2e107090b775d0aa83b81207080881c326ccdfd82c
eec81b3b48f3d184ff4fa0418852dd00cb78fb81fd07469c7c221f185ebed791b9988e9bacc2a407
328274fe58c3f3b3c86182096e9f53b37aa02fcca75f0895266f8e4ccc722742d048397f246c2b9f
134b53057bb0c32192c4a5a2508348b9aa87ac9ef235aaa930b174fd2bc91e01bbc01fc96298515a
ebf09c83cffaba7357b5d332feceeb1daed7926fe432d0879a941559cf9a11f394558a54f6019ff4
8a90d0d6deac6bf7f7ae2ea2dd4250d37c4afc07fa224acb6167599a5da5df817de8a8ec8eb0b4f0
8c2f7b2dbae9aefa654c73ac4c3dae4541fc3c27e423dbfe705eb9906426df2bb986bc9b920cbbb4
1f03f680de0a8a168d7e14c6d2f7f5e8b036f326acd14cb7c4c3b14beb5759cb8eeee6c9fd0df1a4
274baeb646c2bf3d855ea8135502df14f5c753950a09109277e9a84c9083358e70a8c0c16c6ac7ad
d998c09ef6b75042962e511bf615200e88774aa2f590a6c0be61b71cb67fc878630f307de5acddf9
4a59b9496cf3f3aaaa28cdee0651b4ada3f728fe55e0f9f2425935529eade1280cee9273e8182d15
4093d683a33a750e17faf557eb25b4c5b1b996a23d116ca3527a778763de88e9ee1ac958fa8ed0f0
626dd92f9c25605575eca39883cea3eb3b1b8ffed7df0bc30d8a71823ecfdcf1f0b25b4971243772
cf76d501918924e89efb69f1800bbba0cc93decbc0743abdfb7287142b11767e00ba71bbdf3fe555
9097ea26b7659d62a6ad98c34d13f4763c5b02e774e727961d55d7f59d1be96899c31c69ed9821da
fbb6ac217d702d2507304224f2fe192bc479b807cc407b257983adbfb6dfcf0428b65ec24fc3332e
e741e41b237a6b1b4d25f5b0b5193a0e3fc6d086ea484b399989fdce809529e358c89a67d41dfb51
c088353375355c76cd960a3d68e680c40369e9fcbe2ae47bff82ce5c1e64fbd06fbe2ae19d7644df
392f2d70a33c3ef7f33d82be344d566caa24b56db27b34204a36f7b08642cffa8adfe0fed5c2baef
3c79d459b1ee8ba9cf1ce70ff3ad2a530ae7eb718e2b326f569f7511b16b83ed9bf6e4435aa596c2
01f2bdbfd7d02af54c777edc6abc0f76339e16fea1c4c0765373203f3b0f343d22a7035923bd2ee6
d33cf5afae12f24676037f212d02ec6ab655f4b29b3094d1256b0ad23e02948a6a19bbb367e5a365
78157a77cc0ec2debdd8e6a3de9268548f6858dd539846a12826eb8054126279c4ccbb8934b204d1
81ee0ecd59f3a099853ebc4111b4cc1a8514b9439532957d65bd0e702281ea71df39ac490e0f675e
b747f5d825e702fa02b8ef91bc4275d6f0050a03eeaf25225239f78de3f12b9a4be4eb416c9b5684
d36c7e6500d1ff76d55a955fe9cd4a8f7099c9b35c28b5fe677479b54d49dda72b1dc28ae341eb48
a3e2f59219fbbc72ce09f1f561c3e2505777d998208abeca08bdb70faa9aee6193f8cf2676e26f92
4fb410fb6dac725d3fb52d759cee9798c8fbf354382676110e663d40430cdaeaa7611e868d98f632
c2cdcff55393e95a1bdec03dd8dfb90f58efaca760c74f40427886390c228457bbf5286f8d69c63c
fcc403a42fe5d3bb784d42856183e2f8aa4fe3d1813833c6fc32106cdcc16eb847e39b00f76f5f23
69f1e61047a264b330d7b9cdf9641bcd685f3580e6c6ecb664364270984164bf26fd61b99cbbd0c1
2a01bb86e3dadb6897411473a7212b48b88ef4e9a950cc4e95cbce552d54cd3879b61a8150e5e80e
ae35acee7db02da6d4d212a65a598021f9ed0d6a7cfce332486bc331196c8eeecd090fc9e395a076
1de074f381497c017b7b2a155824016982d0546bb6aa7f076fd19432084cbf7882cda414dd992519
b0f1715d28eabe3e695b9ac26d7c83e091f2f4af359126b7d99a9bec39ce191958a8309afe2f3760
36ac7db84e60002625bbcd7d39ef2f3ab5bf45f6d19ab2ee541d1c256b53e76a199daad41ae10e38
ee789df0fadb55e5e17b34392c7a1ad3b14072b66fc28117fa9c36b5268cb3df448ad8dc8b5bad40
159111cd6451fa09a543c235fd1222327169f0105df6eec2d37b0964f7266b0e7ade3935cf0bce13
6dedb2f8714d6ddaf97b02dd1e11233cc122cbc3d4045bf31b9d3aeee3b2b470688aa00b84f6a13c
1c98a0e881e76c23496e33c21a5638bbd17150549931f8091b54448267645e84a88eb0f555bf5ac2
4d68f1e0410d60e4dc25e1668d03f21903148f2102b73ba06fa384a2b7ddfe5f7dd433df6e2c31e5
998c2e259b5f7e5ae666a5dd096160a194f3502e944b59cfa753d1deb4ceb165f3a6c18cc311ee6e
457b604f2ab4d626544ada5b5d7cc5cb43925ad65568c1ccd8d5200b4bef2d3f0b6ce3647fe16030
7e71ebdf73dd8b82e0d4f889790a5fd9623c29a680c0a39595740944d85800942b8dcc6a6b9d762c
e6c48ffe4fe9e598075bbe68e80ec7f5454a23419229042db6e7c7be5cbe318bb4c9a53bf9d28980
3ea3df4fd7216bca65287625a342199adf88a3e01d8130af3aae6d2fc9b8f8de5271c541862c2d79
f539a45032ffe4d488b9cbe89233f921e1373a71c69de2ae8b0206886dc6fc87f9450037993eb828
233e967327a085d75026fccc1d787c13d667a3b6158988491a5db859e8e93b3146da6bbfd8ae4084
90e8ddaa78453d805d81af0dcc6e41cc5271cbb552772a8e58a957dd6ddb85765dcaff9d553bce2a
2a055ad850ab190459b8beb29d4eea647ecead3e1b7b5b1653d769edc6d1bae236c556e4bc8029a6
b48028bff566f9b5940a5793ec3099f1624de64e62d491453288f645434e8b017c63469d0a01080a
69c461db1f8bd9b8e099d5503572cdf675e0966e293cdd9f9e49e55c20c80bf6a4a256fca90464de
bdfd52d6e52fe991baa505a959af125f4478d0775158db4bbd921dbabbf9664ca41ff17cce2e8e75
832cef0c2d414b3e36ce5f069aac82d7a6edf4163173fe142e80c24803610f0d57e938c7e4b801e4
053c0a20351f28c9ce68352e2ff5bd68346ab73d057c668479d345886b7c1bde2f9a32e02c2d6ff0
1de0e3bf9004c9bb1c239435a243941ba59614e5b48654c632c15f53954ea5918183637519242cd5
9f42924bdddf74114df4b20a2c9a7059d4c42fcf915e598a2325f79c283480a47f288a841fd6228e
ecc57064492cc42cbad833855076db312c6cd463212a2e6640b3263f9beb65071d83e061eac4143a
1abc39bb04468740126ecbf64c80cda7ffebd4350277fc715f43c9a022a5a8d666289d710fd333ec
52bb4ae1529577f3bbf2790fb4a1afa594e02fc6afe929256c68ef721a2c50c693970544902334af
f868177cbd0078887424ef1594be0f81c2edcb183259f80acfb471a419c8e87d962c861202009673
2851a9389fb1ed01f6069bb11ac7d42d6d9d0da4a9cf7f33f6354e2e1e67327781e884d7d1c8953e
c90ce95786a6e7003a891d0dcf59bc6fca2595593cca2acd792d9c51fc0987c66c6ad8c8edbf6797
2c544d1b5708f859da6716da3f3cd2c57d4ca88dd9304d730294dbdf4d20de6c71a92f3a68e2ef43
7ea92be756be1cc351be1ae84bb0ac342475ad872f88945f286f7bc10bb313211ea925de49bf8289
27ca9b50c567b69e49d93347af0e87bfa20564eebaf1aaa896026b761d598fb01cd261279a53ddcf
46b57c2eb42a0f55945c7fa7c6de2b2941d4e3c7ba443884174f8e43ef53f0c5bac3266940b14a16
d0240491fe7531e28c8681bfabfb55baca6e319663b88b2eef6042949ba978c8afcf8d6aae573fce
63e5f569bbbfd9c20835a0f7ed04c839aa713b24af777302220bf68ab088589c40ef005b9a3862e2
1284feb83977f4db8ef4aa0d4cdad67b024fe99c614d97ee4e154fa27d4b7d19b35589fa0f342fbd
bcbdc5bc31343c66a9630e147987e577d3bd6c099c6b6ccee8ed42733b96b8851de36c20fc4986a0
df3d0b76cbdb64f784843c78bbae5283b6d131690d91056bba025d20c2e51bd32d4b187fbae906db
3ee8eee62ed664c04ad553cba9f140ee97ea527dec8dd4226d56fcd5a17a2471c17a43f7b1131204
1bc8dd03442d63a27bdd8102ac8006391c68986853343e18851135754e0ae8d5f7f9b2674531e368
cea6a5e6e0e7f8cca246db44dd93bd8a4e57f746a2cf3d2c03fc4faaa1af803369115dc7e0cfb592
c69a2d83fe07ea72fe8f3b236d95ddc03fd240df786db2d112cf197961169b7170ac567babcbf41c
821283f867b4a2807b183bf9140c39444460738b1c3bf57720f3d4b10b5995f4ba515b041b045dd8
8d03722d5ea582e38e53f6813f2d820d92bd9db4096affb8e35d5047a82cb6350e304232f20b3c90
7b4dd006364434978b053f233ed6d15a37cc3d95d6f48c415c222290fed72df430b6543bf4224d1e
337cbe4eda8d65be3c05fb4f3e28365b7d9cce71f880268e5c247e9d68b2bdffdd1bd967091dad3a
185fc81375858571f3b44e75a0fc3f0366ef675151f983d3d3f8d7f59a18b67fb6c0aeea7006baa3
a264617d1a6af01abc96ecf0fe3c89bcb93be31dc99e80a491af9a79171f9bd8ae3a432ca11537ed
acfdbc9e12e1cecabdb84c45c92f020c30ba73e29d16ec2e36288dde3e0e70a108b5013657108e42
7ffe5799f7445d2d05449b3e75781e83c5305a0eca8baea68ddfaabde91b3b3432e81ac946256f14
d596a5df818c97d178b253080e4473e75e9dfc44ca1f2ae8bbf0c38d792679e549061335396c2de9
2465051dbacec162ee441c22530cc87c5f903cdf3c4b91ff92e345ac62037b62d7353cdba9783913
df69da283de00aaf042739bcc973bd96cba0a8a753c1eea133da40a5d07473f72e68098c6d2fb6a4
b53e74a7f70d848751342a5e92971b7f0115a1019a03b00afc55db609dddbfe8c18e7718fff2c474
1ed0ef1a35939fe47bb776e8de4fe2dff973295d64a998e855eb61563b8d668edd4a449be6b81e5d
f1a8d2bdfdbed4e746b913ae75a363a4a3b94c4702e37bccb4ca5825335a1c892559bf9fd9c623a0
496ebbd97c79d03e259b85a5d39d6161dc60a70264fdd26e4288a7943ee925657c85a3a5c6e73621
1ed0358dfc331fc20eb8954709ca32f9187bb5af5b627871efd4c6f11ce4618614b7b4dab6c52a8e
cf5c5b99efdd7585d13cd8c4b90edf050ad0362cdbcb0a84c6e4d3aa9360250760e312d9e1888bef
d6bd67ac6c2549e46ff7371ff0a863f6f4404bd99e48735206de220fa0adda825284481c8f09cc08
6bfc2994caa011efb4309b71d6bfafc4329e9842b65829706bf5093148cfc83ea7eb8b99e55f27b9
c39671ed3348c81b52e9ebf98fe6bfc459389c8f9d9f0d417e871dec6cb9f89c036db90abd168e5e
bf50a289a6b6af6251655661a2817fee6da8dc82250dc8e6a2f6ae7360e5d254516a711fd2eab815
8783f11b6dcfd0c46cc6c209a7350ec31e71444e160bab852b0ea6d2668c26db10ffeb79e2181802
e4f66e1cb99844d74f69902769db73d129d812296d0cdc63548ae54524e751b80462686cf36516ef
362bd41dcef7904d8c0539625f112a64efaa75d27c5b8abad72d673b397ef2b2e0e8de93ee7de7b4
5f8a3516a3543e033c123dbbb65bfb7c4e24e610f322bb485fe7ca6a0a1b93576855181acb529315
7a16654a13ec1df61311dbf3f4f6b54a7de52b5acd2e8e7917024e2abadb52c7d45900ee8ee1eaca
cbe59e6c7c2f55484ceea3b062cdf25b0189fc5e8a6ab0113131454ff3ea756e5bda4862430df0be
fa296934ffda6fdabad7eb82f7db9a995cf290b0b7d1e74e698e311b95b0cf0a53f5393843d2b766
e8a4b7d7b2f79a305074193c6a4028ce86ec17fffcec3ea6bf6894e5f6f7952757e2596348b6833f
4bb2241f7a3319be2d5e323f8bccf2c3e82827b33bdc288a494ad02c42d1e5f47b3ef36bb5c54d8a
60064b99a9e6e5e05fc65e1b871e6d685e2e1c9cd86667e869196214b5b5d34ebcc44900bcbc5a47
f4c9ad3b79909ef66850dfe3a548655ede492726e5c80b3050b249b9c02a91eaed463630eb815072
96e8bf084b2c49d612f95c9c2dcbc4b8e8da7d82bb43842fc71a588a6f1c1f8cb0de7de207b40c9e
cabacf2d18b82f12baace1c1a20a56a995176b4e0deeee8da0e7971c86adfaa248339a076edd874f
2f8b06084cd6f15b813aee789b640551e783acb1711129a90307923f9ac30f1a9171be46f104a9d3
55f04fc5ee206bfc72b30ed22d11377dbd08a555480438a6bf987f2976302c4a91af73706a29f41e
eddc138ed77612de7b90ae24521579d6f235175c39603b493fddf81c246fd02c88c98dfc98cfe965
44676bbc8e9c09c39e980d9c35f60de50d7ac50e2aca9f69325f2234b948844ae121bbb5e03ed925
5722bceeac557faace6eac66aae72654d2fc0d522e2368bb6ece73064d4f779001ff24ba82e1c137
58d5a8a51294b9d4226ec39dfc9f2d6bdc1b22fcfce133f78c889ab7417c7142de123640e5d14beb
651f046e3f511feaa678a71e5764d7a0f50a92dc22bbc8eb8d7d00cc6e17382984d3317ccb984a0b
37595c89fb0cff81412b9f63187d16b5b6c92ca7e6ba3d83af5966c09c3952db9b358fc7fc63c9cd
b49fe271e80f76d6e94367a8afa6b078ea7bea94639ee04618ff28a8b6e7b4d6d133aeb34e4100f1
9f9113782ded5f82c3b3b68ab4de7ffbb1a44033b0b7fde48dbeae8538edd44c0d32399edefb02ba
51b61f992c43b5ca0f3809eb22a197af83d8fc2a0604de1dca530c66d167fb4a014fc11e49417dcb
330f3994631795cf72343cabd9b0f6f0cf564a1e72205af6c0747aa83f3acdce89c04930ae35cb48
6b978b52e581bb69286ea31f71a435da705eb953781cac41d8abfe1c7a41d3e93915cac4707a35e4
cdfb7590ad98ef4d5d13bade986ba9632ce33442a4ce427174660aa8f1e2f7453f5f5981137387e1
07c2b38cf0a50bf9f46c000badd110566a26c2af58d56792f329f22ceb78917bd9a2b4c873f88d12
16340117268c5bb181d9309263a423ceab10cafbaf1b9536db14eacff5b60f01bad25685cd5e2523
08ac079a9b81b9c17a7f0bfe9698eb0f559f0ca4a5c4b654d7880eb94a929fcb55013ae728e16cc9
a1e47f0bcc2999e732f2c4e946b7422044244b0db21247a1817d3f2b7bac9acb3ff6f26b28781245
4d8d95e0a9a69521360b0e94d15caa8525e4c1e49975d7f30eedd602773d196137b978c40a454204
34106a4997403dd97bd03edf6c6f28fc63ba1975a2a312c1126648a3cc04a6e9a94c021640556f77
6b2b2b73ebe1d3742fe6ad4649f4b8d43671a5b46a07f262f32dcfa43a78421a35ae8e95edb7455e
83045c114ea3d976329473b5599904613ec8e54ad448bea1b8e60725c644f3f6df0d357baf19d494
9104dab4e0883c6133d29f4b2a97b0e2ca095e137abfeb03222a8f148980c26cd6b18d58bc9f9b55
204fcb79398effcd7e836dd7faa918edd04972c0ba68e41d7ecc9d99d638942e2a4cb1ef5946e09a
fb8f30aab660a47e6b793aef61946fb254c07be2964824a73d62b1f6b6d582ff430e3f24d31aada2
1d8d3cfedfa9e15c1485f35c4bf3fc81290688836356650a3bd94311cc267671b89b2b52b1ed7b1b
8c11d43c4ce103a8a86fc5918cfd58d51a66426af4e9828b43b021f6aa7844ebf440a00079283fce
8c77a29759d094f695eeab9d5b07e191e713b290c330e2f0a4faf38f423f4bb802283e0e6ae918af
9407a97fd56a3674de13c9ef362c9454be2bdf5cc1a58635a6a7577b51d7c58b4e6d8e079b1538cc
82427bbad2164296503884ca534951bc2f7498cda14ee34dff824012a8d7015f78a3616f02ea57dc
037bc9b92cb204e1b18b3bc60dd1f37f3b20b148a849ac5e1b9fc0b28e485da22f2976e45892e454
59c06fb1005a4e3bb0a43cd17cd461e5dd02484300a7d98329e4102bb7e0cfb397c433362fcb99fc
6562cd1a3ef34c34de32d3e500209f2d84cc4431f2075777f48058bcae5cafa34fa8be0e78f5d821
56aabedfb41abdda31e238e9780c4115d91b907d18929bc33e6942ef10dcc80bdf5e9ecb84324d6e
72cea796cc91d2924aa61e3c2549bdedd19b969d28791585da66d44d0ae8be19e0ed181ffdde2755
04bb3156c673f4252e18b44ff3320a30f9d0c7ee3d354d0d0a13406f8dcdc4091b3a8ba43035f158
e7b484d8069fcec890c6d16454026b9e18d4f5093c5a4d1fe4915c0fa145db7ebfed99c0b648b89e
83bff2fa318311ee3dec7bf2165240fcd995a4c77c8a8c08a56517f9135009d088cde7422ab760c3
c3b3ef12e0953b9d6d3dc71ad072c5177e4f5ed1d667a153f26dc8ea336e32a25071fc0bf9300551
6ec32e595339402894adf47b3f4efa28b137fe268f4ce7b3f3f424f6e0a4b3a8b5df637765c9265f
22fc0156e014c8373655053c2c025312714266668ef067ab7066e72d5126e4791ac163ff8d53dd44
bb8eae6de5df354189b8e995edaed7a15a6366e06f68593a00ae0b42a808a2cb3b930357d94ba63b
fbb1901abff3232fe993ea6cf585f98cc24e1ac907587de5a477347d77a6be5fd130cd7fa99dc4f8
e635df79b125b613d2a0327e3599339cea0ce7b8101bd829e4b9941fcd0b2a70a8cb4c746342f2fe
7db6e7f2100d84a23ee2195b30ad59f46169a3c8d7e438f99ff3157aade801a590623f7000193b1c
69ceea4edf53e421dc12bcda2ffa7c65afda3e2e62558c73d4c00783c53cec80efd72e4856a62a3a
5bca963a0f8d429ab3e802beddced23ed91c7e1f6ddecf21a9bc7901f67048e357887ecd2303dd27
34b9f6196e0837565fed4d7df97557b26fdedf6f61ffc628820986fb0ab27a409e7cb5b495f2e632
779ad0b8fb27414473d428c536bd510de19de647a153d539c47de41cc9712429c648d1f8f9db0e7a
038f0e8d7dcb8120ba865521057db15ba6eb43f3edd340d794d4465599b5c614536d07c2d95952d6
e5cfeac89d9deff85d61e6538ce71c2fdcbb8ac8d5a8e5be82596619d71ee224c2923194f6ebb5dc
5b385007338869c4209d309fb905acb10556c3202c07c8e7de94fc4eadb680369aca85776d110b
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
 HBW_SetTarget_XZ <Virtual>  0
 PID_10 PID  0
 VGR_Movement TASK  0 -1
 SSC_Check_InOut <Virtual>  0
 PID_11 PID  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 V801 MHR799 1 0x0 C797 MC397 1 0x0 MC250 C799 1 0x0 MHR420 V820 1"

// Rung VGR_Copy_State#2
// Offset 43
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 C810 MC502 1 0x0 C811 MC503 1 0x0 Y16 MC500 1 0x0 Y43 MC501 1 0x0 MHR800 D1600 1 0x0 MHR801 D1601 1 0x0 X24 MC504 1 0x0 X14 MC505 1"

// Rung MPO_Copy_State#2
// Offset 41
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 MC808 C1621 1 0x0 C1621 MI808 1 0x0 C1633 MI818 1 0x0 MC819 C1673 1 0x0 V3210 MHR1601 1 0x0 V3211 MHR1602 1 0x0 V3212 MHR1603 1 0x0 V3213 MHR1604 1"

// Rung SLD_Copy_State#2
// Offset 39
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 C1200 MI600 1 0x0 C1201 MI601 1 0x0 MC600 C1202 1 0x0 MHR1200 V2400 1 0x0 MHR1201 V2401 1 0x0 MC601 C1500 1 0x0 MHR1202 V2402 1 0x0 MHR1203 V2403 1 0x0 MHR1204 V2404 1 0x0 MHR1205 V2405 1"

// Rung SSC_Copy_State#2
// Offset 25
NOP

// Rung SSC_Copy_State#3
// Offset 26
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_SetTarget_XZ
$LGCMOD HBW_SetTarget_XZ

// Rung HBW_SetTarget_XZ#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5280 V140
POPBOOL
ANDE V105 3
MOVE 2990 V140

// Rung HBW_SetTarget_XZ#2
// Offset 23
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
ANDE V106 3
MOVE 3240 V142

// Rung HBW_SetTarget_XZ#3
// Offset 46
RET

// End of Code Block HBW_SetTarget_XZ
$LGCEND HBW_SetTarget_XZ

// Beginning of Code Block SSC_Check_InOut
$LGCMOD SSC_Check_InOut

// Rung SSC_Check_InOut#1
// Offset 0
STRN X42
OUT C1200

// Rung SSC_Check_InOut#2
// Offset 2
STRN X43
OUT C1201

// Rung SSC_Check_InOut#3
// Offset 4
RET

// End of Code Block SSC_Check_InOut
$LGCEND SSC_Check_InOut

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"Initialize variables<br>"
"Copy X & Z current positions to local variable to remember "
"initial positions<br>"
"Copy X & Z PWM value gained from modbus to local variable"
#END

STR ST1
MOVE $HBW_Encoder_X.Acc D140
MOVE $HBW_Encoder_Z.Acc D142
MOVE V118 D143

// Rung HBW_Move_XZ#5
// Offset 21
NOP

// Rung HBW_Move_XZ#6
// Offset 22
#BEGIN FMT_COMMENT 
"Loop Start"
#END

REPEAT

// Rung HBW_Move_XZ#7
// Offset 23
#BEGIN FMT_COMMENT 
"Enable/Disable PID control<br>"
"Set this to ST2 to disable PID for XZ<br> <br>"
"When PID is disabled V118 & V120 are used for PWM %25"
#END

STR ST2
OUT C90

// Rung HBW_Move_XZ#8
// Offset 25
#BEGIN FMT_COMMENT 
"Set XY direction<br>"
"Based on starting position compared to target<br>Needs to "
"be inside loop to keep outputs active"
#END

STR ST1
DUPBOOL
ANDLT D140 V140
OUT C51
POPBOOL
ANDLE D142 V142
OUT C52

// Rung HBW_Move_XZ#9
// Offset 38
#BEGIN FMT_COMMENT 
"PID Controller for X<br>& PID constants"
#END

STR C90
PID PID_10 0x60 $HBW_Encoder_X.Acc 0 8200 0.0 8200 """""" 20 100 WY0 DST511
PIDINIT PID_10 1000 0.01 0.01 0
MOVE V140 PID_10.SP
NOT
MOVE D143 PID_10.Output

// Rung HBW_Move_XZ#10
// Offset 63
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 88

// Rung HBW_Move_XZ#11
// Offset 78
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE $HBW_Encoder_X.Acc V140
OUT Y50

// Rung HBW_Move_XZ#12
// Offset 84
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE $HBW_Encoder_X.Acc V140
OUT Y51

// Rung HBW_Move_XZ#13
// Offset 90
#BEGIN FMT_COMMENT 
"Configure Z PWM<br>"
"If carrying a pallet, set Z down to a slow PWM speed.<br>"
"Z up will need to be faster then Z down due to gravity<br>"
"Z Down rung"
#END

STR C20
AND C52
MOVE 35 D144

// Rung HBW_Move_XZ#14
// Offset 94
#BEGIN FMT_COMMENT 
"Configure Z PWM<br>"
"If carrying a pallet, set Z down to a slow PWM speed.<br>"
"Z up will need to be faster then Z down due to gravity<br>"
"Z Up rung"
#END

STR C20
ANDN C52
MOVE 55 D144

// Rung HBW_Move_XZ#15
// Offset 98
#BEGIN FMT_COMMENT 
"Configure Z PWM<br>No pallet"
#END

STRN C20
MOVE 90 D144

// Rung HBW_Move_XZ#16
// Offset 101
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 D144

// Rung HBW_Move_XZ#17
// Offset 116
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Move_XZ#18
// Offset 122
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Move_XZ#19
// Offset 128
STR ST1
STR C51
ANDGE $HBW_Encoder_X.Acc V140
STRN C51
ANDLE $HBW_Encoder_X.Acc V140
ORSTR
ANDSTR
ANDN C150
STR C52
ANDGE $HBW_Encoder_Z.Acc V142
STRN C52
ANDLE $HBW_Encoder_Z.Acc V142
ORSTR
ANDSTR
OUT C150

// Rung HBW_Move_XZ#20
// Offset 155
#BEGIN FMT_COMMENT 
"Loop End"
#END

UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Test slot X & Y target value for out of range<br>"
"if X value greater than 4, fault code 105<br>"
"if Y value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#9
// Offset 38
#BEGIN FMT_COMMENT 
"Task Send<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if conveyor light barriers broken suggesting a pallot "
"is still there."
#END

STR C101
ANDN C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
AND X1
AND X2
JMP HBW_Program.S7
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
STRN X1
ORN X2
ANDSTR
JMP HBW_Program.S2
MOVE 107 V181

// Rung HBW_Program#10
// Offset 73
#BEGIN FMT_COMMENT 
"Task Recieve<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if outer conveyor light barrier no broken suggesting "
"no pallot is there."
#END

STR C102
ANDN C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
ANDN X2
JMP HBW_Program.S13
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
AND X2
JMP HBW_Program.S2
MOVE 108 V181

// Rung HBW_Program#11
// Offset 105
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#12
// Offset 107
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#13
// Offset 109
#BEGIN FMT_COMMENT 
"Task Send - Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 111
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#15
// Offset 114
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"

// Rung HBW_Program#16
// Offset 123
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1
OUT C12

// Rung HBW_Program#17
// Offset 129
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
AND C12
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 133
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 136
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 138
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 140
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 143
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 149
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 152
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 154
#BEGIN FMT_COMMENT 
"Task Send - Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 156
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 159
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2600 V142
OUT C20

// Rung HBW_Program#28
// Offset 165
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 170
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 173
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 176
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 178
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 180
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 183
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 189
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 192
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 194
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 196
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 199
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 215
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 3000 C80

// Rung HBW_Program#41
// Offset 219
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#42
// Offset 223
NOP

// Rung HBW_Program#43
// Offset 224
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 226
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 228
#BEGIN FMT_COMMENT 
"Reserved Stage<br>"
"Just incase I need an extra stage for Task Send"
#END

SG HBW_Program.S12

// Rung HBW_Program#46
// Offset 230
#BEGIN FMT_COMMENT 
"Fault<br>Should never hit this reserve stage"
#END

STR ST1
JMP HBW_Program.S2

// Rung HBW_Program#47
// Offset 232
#BEGIN FMT_COMMENT 
"Task Receive - Conveyor In<br>& Move XZ to Conveyor"
#END

SG HBW_Program.S13

// Rung HBW_Program#48
// Offset 234
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 10 V131

// Rung HBW_Program#49
// Offset 237
#BEGIN FMT_COMMENT 
"Conveyor Out In"
#END

STR X1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 45
OUT Y49

// Rung HBW_Program#50
// Offset 253
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x1 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
AND X1
ONDTMR T4 3000 C80

// Rung HBW_Program#51
// Offset 258
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#52
// Offset 262
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2750 V142

// Rung HBW_Program#53
// Offset 267
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#54
// Offset 272
#BEGIN FMT_COMMENT 
"Movements completed<br>"
"Conveyor inner beam broken and XZ move complete"
#END

STR HBW_Move_XZ.Done
ANDN X1
JMP HBW_Program.S14
HALT HBW_Move_XZ

// Rung HBW_Program#55
// Offset 276
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#56
// Offset 279
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 281
#BEGIN FMT_COMMENT 
"Task Receive - Pick"
#END

SG HBW_Program.S14

// Rung HBW_Program#58
// Offset 283
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#59
// Offset 286
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#60
// Offset 292
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S15

// Rung HBW_Program#61
// Offset 295
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#62
// Offset 297
#BEGIN FMT_COMMENT 
"Task Receive - Move to Storage"
#END

SG HBW_Program.S15

// Rung HBW_Program#63
// Offset 299
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#64
// Offset 302
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"
OUT C20
OUT C12

// Rung HBW_Program#65
// Offset 313
#BEGIN FMT_COMMENT 
"Math calculate Y target for placement"
#END

STRPD C12
MATH V142 "V142 - 100"

// Rung HBW_Program#66
// Offset 323
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#67
// Offset 328
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S16
HALT HBW_Move_XZ

// Rung HBW_Program#68
// Offset 331
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#69
// Offset 334
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#70
// Offset 336
#BEGIN FMT_COMMENT 
"Task Receive - Place<br>Place onto storage shelf"
#END

SG HBW_Program.S16

// Rung HBW_Program#71
// Offset 338
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#72
// Offset 341
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#73
// Offset 347
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S17

// Rung HBW_Program#74
// Offset 350
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#75
// Offset 352
#BEGIN FMT_COMMENT 
"Task Receive - Move to Idle"
#END

SG HBW_Program.S17

// Rung HBW_Program#76
// Offset 354
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#77
// Offset 357
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 4300 V140
MOVE 1400 V142

// Rung HBW_Program#78
// Offset 362
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#79
// Offset 367
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S1
HALT HBW_Move_XZ

// Rung HBW_Program#80
// Offset 370
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#81
// Offset 373
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#82
// Offset 375
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#83
// Offset 377
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#84
// Offset 379
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#85
// Offset 382
#BEGIN FMT_COMMENT 
"Force Ready<br>Jump to ready state without resetting<br>"
"Reset Fault code"
#END

STR ST1
MOVE MC105 C105
AND C105
JMP HBW_Program.S1
MOVE 0 V181

// Rung HBW_Program#86
// Offset 389
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#87
// Offset 391
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#88
// Offset 393
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#89
// Offset 396
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#90
// Offset 411
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
ANDLE $HBW_Encoder_X.Acc 8050
OUT Y50

// Rung HBW_Program#91
// Offset 417
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#92
// Offset 420
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#93
// Offset 435
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#94
// Offset 438
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#95
// Offset 441
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#96
// Offset 456
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#97
// Offset 459
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
ANDLE $HBW_Encoder_Z.Acc 3500
OUT Y4

// Rung HBW_Program#98
// Offset 465
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#99
// Offset 480
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#100
// Offset 482
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#101
// Offset 484
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#102
// Offset 486
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#103
// Offset 488
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#104
// Offset 490
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#105
// Offset 493
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#106
// Offset 496
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 40 MHR120 1"

// Rung HBW_Program#107
// Offset 512
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick
HALT HBW_Place

// Rung HBW_Program#108
// Offset 516
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#109
// Offset 533
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 100
OUT Y7

// Rung HBW_Program#110
// Offset 549
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#111
// Offset 566
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#112
// Offset 582
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#113
// Offset 586
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#114
// Offset 588
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#115
// Offset 591
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#116
// Offset 595
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#117
// Offset 598
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"Reset Stage"
#END

SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Reset VGR Fault Code"
#END

STR ST1
MOVE 0 V801

// Rung VGR_Program#7
// Offset 25
#BEGIN FMT_COMMENT 
"Stop VGR Movement Task"
#END

STR ST1
HALT VGR_Movement

// Rung VGR_Program#8
// Offset 27
STR ST1
COPY 0x0 "4 0x0 0 N810 1 0x0 0 N811 1 0x0 0 N812 1"

// Rung VGR_Program#9
// Offset 39
STR ST1
OUT Y28

// Rung VGR_Program#10
// Offset 41
STR ST1
RST Y29

// Rung VGR_Program#11
// Offset 43
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
AND X26
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100
OUT Y26

// Rung VGR_Program#12
// Offset 61
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
AND X25
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100
OUT Y24

// Rung VGR_Program#13
// Offset 79
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100
OUT Y22

// Rung VGR_Program#14
// Offset 96
STR X25
AND X26
AND X27
ONDTMR T54 100 C798

// Rung VGR_Program#15
// Offset 102
STR C798
OUT $VGR_Encoder_Rot.ResetEdge
OUT $VGR_Encoder_X.ResetEdge
OUT $VGR_Encoder_Y.ResetEdge

// Rung VGR_Program#16
// Offset 106
STR C798
JMP VGR_Program.S2

// Rung VGR_Program#17
// Offset 108
#BEGIN FMT_COMMENT 
"Ready State"
#END

SG VGR_Program.S2

// Rung VGR_Program#18
// Offset 110
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 118
STR ST1
OUT C797

// Rung VGR_Program#20
// Offset 120
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 122
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#22
// Offset 124
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S8

// Rung VGR_Program#23
// Offset 126
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S13

// Rung VGR_Program#24
// Offset 128
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S22

// Rung VGR_Program#25
// Offset 130
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S20

// Rung VGR_Program#26
// Offset 132
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

SG VGR_Program.S3

// Rung VGR_Program#27
// Offset 134
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#28
// Offset 142
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 5360 N810

// Rung VGR_Program#29
// Offset 145
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 800 N811

// Rung VGR_Program#30
// Offset 148
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 620 N812

// Rung VGR_Program#31
// Offset 151
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C414

// Rung VGR_Program#32
// Offset 157
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
AND C414
JMP VGR_Program.S4
HALT VGR_Movement

// Rung VGR_Program#33
// Offset 161
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#34
// Offset 165
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#35
// Offset 167
#BEGIN FMT_COMMENT 
"Pick up disk from HBW"
#END

SG VGR_Program.S4

// Rung VGR_Program#36
// Offset 169
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#37
// Offset 177
STR ST1
SET Y28

// Rung VGR_Program#38
// Offset 179
STR Y28
SET Y29

// Rung VGR_Program#39
// Offset 181
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#40
// Offset 196
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 199
STR X25
JMP VGR_Program.S5

// Rung VGR_Program#42
// Offset 201
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#43
// Offset 203
#BEGIN FMT_COMMENT 
"Move crane from HBW to MPO"
#END

SG VGR_Program.S5

// Rung VGR_Program#44
// Offset 205
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#45
// Offset 213
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 3550 N810

// Rung VGR_Program#46
// Offset 216
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 800 N811

// Rung VGR_Program#47
// Offset 219
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#48
// Offset 222
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C415

// Rung VGR_Program#49
// Offset 228
STR VGR_Movement.DoneThisScan
AND C415
JMP VGR_Program.S10
HALT VGR_Movement

// Rung VGR_Program#50
// Offset 232
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#51
// Offset 236
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#52
// Offset 238
#BEGIN FMT_COMMENT 
"Assign new values for next VGR location"
#END

SG VGR_Program.S10

// Rung VGR_Program#53
// Offset 240
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#54
// Offset 248
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 3528 N810

// Rung VGR_Program#55
// Offset 251
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 3400 N811

// Rung VGR_Program#56
// Offset 254
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 2000 N812

// Rung VGR_Program#57
// Offset 257
STR ST1
TMR T51 100

// Rung VGR_Program#58
// Offset 260
STR T51.Done
JMP VGR_Program.S6

// Rung VGR_Program#59
// Offset 262
#BEGIN FMT_COMMENT 
"Position Crane to drop disk onto MPO"
#END

SG VGR_Program.S6

// Rung VGR_Program#60
// Offset 264
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#61
// Offset 272
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C416

// Rung VGR_Program#62
// Offset 278
STR VGR_Movement.DoneThisScan
AND C416
JMP VGR_Program.S7
HALT VGR_Movement

// Rung VGR_Program#63
// Offset 282
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#64
// Offset 286
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#65
// Offset 288
#BEGIN FMT_COMMENT 
"Release vacuum and turn off compressor"
#END

SG VGR_Program.S7

// Rung VGR_Program#66
// Offset 290
STR ST1
RST Y29

// Rung VGR_Program#67
// Offset 292
STR ST1
ONDTMR T53 100 C416

// Rung VGR_Program#68
// Offset 296
STR C416
RST Y28

// Rung VGR_Program#69
// Offset 298
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C416
JMP VGR_Program.S1

// Rung VGR_Program#70
// Offset 300
#BEGIN FMT_COMMENT 
"VGR.T2 - Move Disk from SLD to Loading Bay"
#END

SG VGR_Program.S8

// Rung VGR_Program#71
// Offset 302
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#72
// Offset 310
#BEGIN FMT_COMMENT 
"Get assign location values based on color input as number"
#END

STR ST1
RANGECHECK V820 0x0 3 1 C555

// Rung VGR_Program#73
// Offset 315
#BEGIN FMT_COMMENT 
"If N820 == 0, no color passed, enter fault"
#END

STR C555
JMP VGR_Program.S30
MOVE 4 V801

// Rung VGR_Program#74
// Offset 319
#BEGIN FMT_COMMENT 
"If N820 == 1, White disk needs to be picked up<br>"
#END

STRE V820 1
COPY 0x1 "4 0x0 1790 N810 1 0x0 1485 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#75
// Offset 333
#BEGIN FMT_COMMENT 
"If N820 == 2, Red disk needs to be picked up"
#END

STRE V820 2
COPY 0x1 "4 0x0 1470 N810 1 0x0 1715 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#76
// Offset 347
#BEGIN FMT_COMMENT 
"If N820 == 3, Blue disk needs to be picked up"
#END

STRE V820 3
COPY 0x1 "4 0x0 1205 N810 1 0x0 2315 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#77
// Offset 361
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#78
// Offset 366
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
JMP VGR_Program.S9
HALT VGR_Movement

// Rung VGR_Program#79
// Offset 369
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#80
// Offset 373
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#81
// Offset 375
#BEGIN FMT_COMMENT 
"Vacuum on to pick up disk at SLD"
#END

SG VGR_Program.S9

// Rung VGR_Program#82
// Offset 377
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#83
// Offset 385
STR ST1
SET Y28

// Rung VGR_Program#84
// Offset 387
STR Y28
SET Y29

// Rung VGR_Program#85
// Offset 389
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#86
// Offset 404
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#87
// Offset 407
STR X25
JMP VGR_Program.S11

// Rung VGR_Program#88
// Offset 409
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#89
// Offset 411
#BEGIN FMT_COMMENT 
"Move VGR from SLD to Loading Bay"
#END

SG VGR_Program.S11

// Rung VGR_Program#90
// Offset 413
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#91
// Offset 421
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 990 N810

// Rung VGR_Program#92
// Offset 424
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 2275 N811

// Rung VGR_Program#93
// Offset 427
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#94
// Offset 430
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C423

// Rung VGR_Program#95
// Offset 436
STR VGR_Movement.DoneThisScan
AND C423
JMP VGR_Program.S17
HALT VGR_Movement

// Rung VGR_Program#96
// Offset 440
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#97
// Offset 444
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#98
// Offset 446
#BEGIN FMT_COMMENT 
"Assign new Values for next VGR location"
#END

SG VGR_Program.S17

// Rung VGR_Program#99
// Offset 448
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#100
// Offset 456
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 990 N810

// Rung VGR_Program#101
// Offset 459
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 2275 N811

// Rung VGR_Program#102
// Offset 462
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 1650 N812

// Rung VGR_Program#103
// Offset 465
#BEGIN FMT_COMMENT 
"Delay to reset Done for VGR_Movement"
#END

STR ST1
TMR T52 100

// Rung VGR_Program#104
// Offset 468
STR T52.Done
JMP VGR_Program.S18

// Rung VGR_Program#105
// Offset 470
#BEGIN FMT_COMMENT 
"Position Crane to drop disk into Loading Bay"
#END

SG VGR_Program.S18

// Rung VGR_Program#106
// Offset 472
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#107
// Offset 480
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#108
// Offset 488
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C424

// Rung VGR_Program#109
// Offset 494
STR VGR_Movement.DoneThisScan
AND C424
JMP VGR_Program.S12
HALT VGR_Movement

// Rung VGR_Program#110
// Offset 498
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#111
// Offset 502
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#112
// Offset 504
#BEGIN FMT_COMMENT 
"Release vacuum and drop disk"
#END

SG VGR_Program.S12

// Rung VGR_Program#113
// Offset 506
STR ST1
RST Y29

// Rung VGR_Program#114
// Offset 508
STR ST1
ONDTMR T54 100 C418

// Rung VGR_Program#115
// Offset 512
STR C418
RST Y28

// Rung VGR_Program#116
// Offset 514
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C418
JMP VGR_Program.S1

// Rung VGR_Program#117
// Offset 516
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

SG VGR_Program.S13

// Rung VGR_Program#118
// Offset 518
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#119
// Offset 526
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 40 N810

// Rung VGR_Program#120
// Offset 529
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 140 N811

// Rung VGR_Program#121
// Offset 532
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 3085 N812

// Rung VGR_Program#122
// Offset 535
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C419

// Rung VGR_Program#123
// Offset 541
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
AND C419
JMP VGR_Program.S14
HALT VGR_Movement

// Rung VGR_Program#124
// Offset 545
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#125
// Offset 549
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#126
// Offset 551
#BEGIN FMT_COMMENT 
"Vacuum on to pick up disk at Loading Bay"
#END

SG VGR_Program.S14

// Rung VGR_Program#127
// Offset 553
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#128
// Offset 561
STR ST1
SET Y28

// Rung VGR_Program#129
// Offset 563
STR Y28
SET Y29

// Rung VGR_Program#130
// Offset 565
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#131
// Offset 580
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#132
// Offset 583
STR X25
JMP VGR_Program.S15

// Rung VGR_Program#133
// Offset 585
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#134
// Offset 587
#BEGIN FMT_COMMENT 
"Move Crane from Loading Bay to HBW"
#END

SG VGR_Program.S15

// Rung VGR_Program#135
// Offset 589
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#136
// Offset 597
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 5395 N810

// Rung VGR_Program#137
// Offset 600
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 763 N811

// Rung VGR_Program#138
// Offset 603
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#139
// Offset 606
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C421

// Rung VGR_Program#140
// Offset 612
STR VGR_Movement.DoneThisScan
AND C421
JMP VGR_Program.S19
HALT VGR_Movement

// Rung VGR_Program#141
// Offset 616
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#142
// Offset 620
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#143
// Offset 622
SG VGR_Program.S19

// Rung VGR_Program#144
// Offset 624
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#145
// Offset 632
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 5405 N810

// Rung VGR_Program#146
// Offset 635
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 763 N811

// Rung VGR_Program#147
// Offset 638
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 685 N812

// Rung VGR_Program#148
// Offset 641
#BEGIN FMT_COMMENT 
"Delay to reset Done for VGR_Movement"
#END

STR ST1
TMR T56 100

// Rung VGR_Program#149
// Offset 644
STR T56.Done
JMP VGR_Program.S21

// Rung VGR_Program#150
// Offset 646
SG VGR_Program.S21

// Rung VGR_Program#151
// Offset 648
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#152
// Offset 656
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#153
// Offset 664
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C426

// Rung VGR_Program#154
// Offset 670
STR VGR_Movement.DoneThisScan
AND C426
JMP VGR_Program.S16
HALT VGR_Movement

// Rung VGR_Program#155
// Offset 674
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#156
// Offset 678
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#157
// Offset 680
#BEGIN FMT_COMMENT 
"Release Vacuum, Drop Disk"
#END

SG VGR_Program.S16

// Rung VGR_Program#158
// Offset 682
STR ST1
RST Y29

// Rung VGR_Program#159
// Offset 684
STR ST1
ONDTMR T55 100 C422

// Rung VGR_Program#160
// Offset 688
STR C422
RST Y28

// Rung VGR_Program#161
// Offset 690
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C422
JMP VGR_Program.S1

// Rung VGR_Program#162
// Offset 692
#BEGIN FMT_COMMENT 
"VGR.T4 - Move Disk from Loading Bay to Shipping Truck"
#END

SG VGR_Program.S22

// Rung VGR_Program#163
// Offset 694
STR ST1
JMP VGR_Program.S2

// Rung VGR_Program#164
// Offset 696
#BEGIN FMT_COMMENT 
"Manual Control"
#END

SG VGR_Program.S20

// Rung VGR_Program#165
// Offset 698
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#166
// Offset 706
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100

// Rung VGR_Program#167
// Offset 721
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#168
// Offset 724
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#169
// Offset 726
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100

// Rung VGR_Program#170
// Offset 741
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#171
// Offset 743
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#172
// Offset 746
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#173
// Offset 761
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#174
// Offset 763
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#175
// Offset 766
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#176
// Offset 768
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#177
// Offset 770
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#178
// Offset 772
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#179
// Offset 774
STRN C500
JMP VGR_Program.S1

// Rung VGR_Program#180
// Offset 776
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG VGR_Program.S30

// Rung VGR_Program#181
// Offset 778
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#182
// Offset 786
STR ST1
HALT VGR_Movement

// Rung VGR_Program#183
// Offset 788
STR C799
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
#BEGIN FMT_COMMENT 
"If we are not outside the oven, turn on the compressor"
#END

STRN X18
OUT Y17

// Rung MPO_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"If the compressor is on, open the door"
#END

STR Y17
OUT Y20

// Rung MPO_Program#5
// Offset 14
STR Y20
OUT Y52

// Rung MPO_Program#6
// Offset 16
#BEGIN FMT_COMMENT 
"If the crane is not at turntable position, move towards it"
#END

STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#7
// Offset 32
#BEGIN FMT_COMMENT 
"Turn off the conveyor belt when reseting"
#END

STR ST1
RST Y47

// Rung MPO_Program#8
// Offset 34
#BEGIN FMT_COMMENT 
"Reset our bit that said its detected something"
#END

STR ST1
RST C1000

// Rung MPO_Program#9
// Offset 36
STR ST1
RST Y18

// Rung MPO_Program#10
// Offset 38
#BEGIN FMT_COMMENT 
"Reset end of coveryor belt detection bit"
#END

STR ST1
RST C1001

// Rung MPO_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Reset the turntable plunger"
#END

STR ST1
RST Y21

// Rung MPO_Program#12
// Offset 42
#BEGIN FMT_COMMENT 
"Reset turntable to crane position"
#END

STRN X12
OUT Y46

// Rung MPO_Program#13
// Offset 44
#BEGIN FMT_COMMENT 
"Jump to manual control mode"
#END

STR C801
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 46
#BEGIN FMT_COMMENT 
"Make sure the crane is at the turntable, the turntable is "
"facing the crane, we are not wanting to control manually, "
"and the loading tray is outside the oven before beginning "
"stage 1"
#END

STR X16
AND X12
ANDN C801
AND X18
ANDN C802
JMP MPO_Program.S1

// Rung MPO_Program#15
// Offset 52
SG MPO_Program.S1

// Rung MPO_Program#16
// Offset 54
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#17
// Offset 62
#BEGIN FMT_COMMENT 
"If our oven timer is less than 100, fault out"
#END

STRLE D1600 100
JMP MPO_Program.S8

// Rung MPO_Program#18
// Offset 67
#BEGIN FMT_COMMENT 
"If our saw timer is less than 100, fault out"
#END

STRLE D1601 100
JMP MPO_Program.S8

// Rung MPO_Program#19
// Offset 72
#BEGIN FMT_COMMENT 
"C810 is the ready status bit"
#END

STR ST1
ANDN Y17
ANDN Y16
OUT C810

// Rung MPO_Program#20
// Offset 76
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#21
// Offset 79
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#22
// Offset 83
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#23
// Offset 86
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
OUT Y44

// Rung MPO_Program#24
// Offset 89
STR Y20
AND X17
RST Y20

// Rung MPO_Program#25
// Offset 92
#BEGIN FMT_COMMENT 
"Once inside, turn off the compressor, which will shut the door"
#END

STRND Y20
AND X17
RST Y17

// Rung MPO_Program#26
// Offset 96
#BEGIN FMT_COMMENT 
"Once inside and door is closed turn on oven"
#END

STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#27
// Offset 102
#BEGIN FMT_COMMENT 
"When done timing move to next stage"
#END

STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#28
// Offset 106
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#29
// Offset 108
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#30
// Offset 110
SG MPO_Program.S2

// Rung MPO_Program#31
// Offset 112
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#32
// Offset 120
#BEGIN FMT_COMMENT 
"If we are inside the oven, turn on the compressor"
#END

STR X17
SET Y17

// Rung MPO_Program#33
// Offset 122
#BEGIN FMT_COMMENT 
"If we are inside the oven and the door is not open, then "
"open the door"
#END

STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#34
// Offset 125
#BEGIN FMT_COMMENT 
"If the door is open and we are not outside of the oven, "
"then move the tray out."
#END

STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#35
// Offset 128
STR X18
RST Y17

// Rung MPO_Program#36
// Offset 130
STR X18
RST Y20

// Rung MPO_Program#37
// Offset 132
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#38
// Offset 134
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#39
// Offset 136
SG MPO_Program.S3

// Rung MPO_Program#40
// Offset 138
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#41
// Offset 146
STRN X19
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#42
// Offset 163
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#43
// Offset 166
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#44
// Offset 171
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#45
// Offset 177
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#46
// Offset 181
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#47
// Offset 183
SG MPO_Program.S4

// Rung MPO_Program#48
// Offset 185
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#49
// Offset 193
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#50
// Offset 210
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#51
// Offset 215
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#52
// Offset 221
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#53
// Offset 225
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 227
SG MPO_Program.S5

// Rung MPO_Program#55
// Offset 229
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 237
#BEGIN FMT_COMMENT 
"Turn turntable until at position to saw"
#END

STRN X15
OUT Y45

// Rung MPO_Program#57
// Offset 239
#BEGIN FMT_COMMENT 
"Once you reach saw position, activate the saw"
#END

STRPD X15
OFFDTMR T103 D1601 Y43

// Rung MPO_Program#58
// Offset 244
#BEGIN FMT_COMMENT 
"Once done sawing, move to the next stage"
#END

STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#59
// Offset 249
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#60
// Offset 251
SG MPO_Program.S6

// Rung MPO_Program#61
// Offset 253
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#62
// Offset 261
#BEGIN FMT_COMMENT 
"Keep rotating until we are at plunger position"
#END

STRN X13
OUT Y45

// Rung MPO_Program#63
// Offset 263
STRPD X13
SET Y18

// Rung MPO_Program#64
// Offset 266
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#65
// Offset 271
STRPD X13
OFFDTMR T104 3000 Y47

// Rung MPO_Program#66
// Offset 276
#BEGIN FMT_COMMENT 
"If the light barrier gets broken, set c1001 true"
#END

STRN X14
SET C1001

// Rung MPO_Program#67
// Offset 278
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#68
// Offset 280
STRND T104.Timing
AND C1001
JMP MPO_Program.S0

// Rung MPO_Program#69
// Offset 284
STRND T104.Timing
ANDN C1001
JMP MPO_Program.S8

// Rung MPO_Program#70
// Offset 288
SG MPO_Program.S7

// Rung MPO_Program#71
// Offset 290
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#72
// Offset 298
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#73
// Offset 303
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#74
// Offset 308
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#75
// Offset 313
#BEGIN FMT_COMMENT 
"Manually move crane towards oven"
#END

STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#76
// Offset 330
#BEGIN FMT_COMMENT 
"Manually move crane to turn table"
#END

STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#77
// Offset 347
STRN C801
JMP MPO_Program.S0

// Rung MPO_Program#78
// Offset 349
SG MPO_Program.S8

// Rung MPO_Program#79
// Offset 351
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#80
// Offset 359
#BEGIN FMT_COMMENT 
"Turn on flashing red light"
#END

STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#81
// Offset 364
STR ST1
OUT C811

// Rung MPO_Program#82
// Offset 366
#BEGIN FMT_COMMENT 
"If Reset Button (C802) is pressed and both the oven timer "
"and saw timer are over 100ms go back to stage 0"
#END

STR C802
ANDGE D1600 100
ANDGE D1601 100
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STR C1610
COPY 0x1 "4 0x0 1 C1621 1"

// Rung SLD_Program#8
// Offset 32
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STR C1610
JMP SLD_Program.S11

// Rung SLD_Program#9
// Offset 34
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 36
SG SLD_Program.S11

// Rung SLD_Program#11
// Offset 38
#BEGIN FMT_COMMENT 
"Stage 11: Verifies that disk has made it into SLD and sets "
"a uniform place to begin timers from to make sure color is "
"sensed correctly."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 46
#BEGIN FMT_COMMENT 
"if disk doesn't clear light barrier to jump into S2 under "
"2 seconds, jump to fault state."
#END

STR ST1
ONDTMR T200 2000 C1632

// Rung SLD_Program#13
// Offset 50
#BEGIN FMT_COMMENT 
"Jump to Fault State 12"
#END

STR C1632
JMP SLD_Program.S12

// Rung SLD_Program#14
// Offset 52
#BEGIN FMT_COMMENT 
"Turn on bit to run conveyor when disk breaks the light barrier."
#END

STR ST1
ANDND X35
COPY 0x1 "4 0x0 1 C1670 1"

// Rung SLD_Program#15
// Offset 60
STR C1670
OUT Y30

// Rung SLD_Program#16
// Offset 62
#BEGIN FMT_COMMENT 
"Have to do S11 invert to make sure that the first scan on "
"stage entry doesn't trigger the JMP before work can be done."
#END

STRPD SLD_Program.S11
NOT
ANDPD X35
COPY 0x1 "4 0x0 0 C1670 1"
JMP SLD_Program.S2

// Rung SLD_Program#17
// Offset 73
SG SLD_Program.S10

// Rung SLD_Program#18
// Offset 75
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#19
// Offset 83
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#20
// Offset 85
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#21
// Offset 87
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#22
// Offset 89
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#23
// Offset 91
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#24
// Offset 93
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#25
// Offset 98
STR C1611
JMP SLD_Program.S11

// Rung SLD_Program#26
// Offset 100
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#27
// Offset 102
SG SLD_Program.S2

// Rung SLD_Program#28
// Offset 104
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#29
// Offset 112
#BEGIN FMT_COMMENT 
"Start timer for start fault. If light barrier isn't broken "
"by timer end, FAULT."
#END

STR ST1
ANDN ST2
ONDTMR T213 1800 C1671

// Rung SLD_Program#30
// Offset 117
#BEGIN FMT_COMMENT 
"When delay is on, output bit (C1671) is false. While C1671 "
"is false, turn on conveyor.<br>"
"When C1671 is true, jump to next stage, S3."
#END

STRN C1671
OUT Y30

// Rung SLD_Program#31
// Offset 119
STR ST1
COPY 0x1 "4 0x0 26000 V3205 1"

// Rung SLD_Program#32
// Offset 126
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STR C1671
JMP SLD_Program.S3

// Rung SLD_Program#33
// Offset 128
SG SLD_Program.S3

// Rung SLD_Program#34
// Offset 130
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#35
// Offset 138
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#36
// Offset 143
#BEGIN FMT_COMMENT 
"Checks for lowest color value in color sensor."
#END

STRLE V3200 V3205
COPY 0x1 "4 0x0 V3200 V3205 1"

// Rung SLD_Program#37
// Offset 153
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3205 0x1 10000 6000 C1602

// Rung SLD_Program#38
// Offset 158
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#39
// Offset 160
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3205 0x1 20000 18000 C1619

// Rung SLD_Program#40
// Offset 165
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#41
// Offset 167
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3205 0x1 24500 21000 C1620

// Rung SLD_Program#42
// Offset 172
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#43
// Offset 174
STR ST1
COPY 0x1 "4 0x0 V3202 V3210 1 0x0 V3203 V3211 1 0x0 V3204 V3212 1"

// Rung SLD_Program#44
// Offset 185
STRGT V3210 3
COPY 0x1 "4 0x0 3 V3210 1"

// Rung SLD_Program#45
// Offset 195
STRGT V3211 3
COPY 0x1 "4 0x0 3 V3211 1"

// Rung SLD_Program#46
// Offset 205
STRGT V3212 3
COPY 0x1 "4 0x0 3 V3212 1"

// Rung SLD_Program#47
// Offset 215
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 4, jump to S4."
#END

STR C1602
ANDLT V3202 4
JMP SLD_Program.S4

// Rung SLD_Program#48
// Offset 221
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 4, jump to S5."
#END

STR C1619
ANDLT V3203 4
JMP SLD_Program.S5

// Rung SLD_Program#49
// Offset 227
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 4, jump to S6."
#END

STR C1620
ANDLT V3204 4
JMP SLD_Program.S6

// Rung SLD_Program#50
// Offset 233
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#51
// Offset 240
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#52
// Offset 247
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#53
// Offset 254
SG SLD_Program.S4

// Rung SLD_Program#54
// Offset 256
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#55
// Offset 264
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#56
// Offset 268
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#57
// Offset 270
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#58
// Offset 275
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#59
// Offset 277
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#60
// Offset 282
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#61
// Offset 284
STRND C1604
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#62
// Offset 291
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#63
// Offset 294
SG SLD_Program.S5

// Rung SLD_Program#64
// Offset 296
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#65
// Offset 304
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#66
// Offset 308
STRN C1606
OUT Y30

// Rung SLD_Program#67
// Offset 310
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#68
// Offset 315
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#69
// Offset 317
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#70
// Offset 322
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#71
// Offset 324
STRND C1607
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#72
// Offset 331
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#73
// Offset 334
SG SLD_Program.S6

// Rung SLD_Program#74
// Offset 336
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#75
// Offset 344
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#76
// Offset 348
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#77
// Offset 350
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#78
// Offset 355
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#79
// Offset 357
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#80
// Offset 362
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#81
// Offset 364
STRND C1612
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#82
// Offset 371
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#83
// Offset 374
SG SLD_Program.S7

// Rung SLD_Program#84
// Offset 376
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#85
// Offset 384
STR ST1
INC V3213

// Rung SLD_Program#86
// Offset 386
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 8000 C1630

// Rung SLD_Program#87
// Offset 390
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#88
// Offset 392
STRND Y30
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#89
// Offset 399
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// Rung SLD_Program#90
// Offset 402
SG SLD_Program.S12

// Rung SLD_Program#91
// Offset 404
#BEGIN FMT_COMMENT 
"S12: Fault State"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#92
// Offset 412
STR ST4
OUT Y41

// Rung SLD_Program#93
// Offset 414
STR C1673
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y37

// Rung SSC_Program#5
// Offset 14
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"c1202 is reset button, c1500 is execute command"
#END

STR X40
AND X41
ANDN C1202
AND C1500
JMP SSC_Program.S1

// Rung SSC_Program#7
// Offset 27
SG SSC_Program.S1

// Rung SSC_Program#8
// Offset 29
#BEGIN FMT_COMMENT 
"Look at HBW"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#9
// Offset 37
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#10
// Offset 45
STR ST1
ANDPDPF
OUT C1203

// Rung SSC_Program#11
// Offset 48
STRN CT150.Done
OUT Y38

// Rung SSC_Program#12
// Offset 50
STRN CT150.Done
AND X46
STR C1203
CNT CT150 V2400

// Rung SSC_Program#13
// Offset 55
STRN CT151.Done
OUT Y35

// Rung SSC_Program#14
// Offset 57
STRN CT151.Done
AND X44
STR C1203
CNT CT151 V2401

// Rung SSC_Program#15
// Offset 62
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#16
// Offset 64
STR CT150.Done
AND CT151.Done
JMP SSC_Program.S2

// Rung SSC_Program#17
// Offset 67
SG SSC_Program.S2

// Rung SSC_Program#18
// Offset 69
#BEGIN FMT_COMMENT 
"Look at VGR"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#19
// Offset 77
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#20
// Offset 85
STR ST1
ANDPDPF
OUT C1204

// Rung SSC_Program#21
// Offset 88
STRN CT152.Done
OUT Y37

// Rung SSC_Program#22
// Offset 90
STRN CT152.Done
AND X47
STR C1204
CNT CT152 V2402

// Rung SSC_Program#23
// Offset 95
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#24
// Offset 97
STR CT152.Done
JMP SSC_Program.S3

// Rung SSC_Program#25
// Offset 99
SG SSC_Program.S3

// Rung SSC_Program#26
// Offset 101
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#27
// Offset 109
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#28
// Offset 117
STR ST1
ANDPDPF
OUT C1205

// Rung SSC_Program#29
// Offset 120
STRN CT153.Done
OUT Y36

// Rung SSC_Program#30
// Offset 122
STRN CT153.Done
AND X45
STR C1205
CNT CT153 V2403

// Rung SSC_Program#31
// Offset 127
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#32
// Offset 129
STR CT153.Done
JMP SSC_Program.S4

// Rung SSC_Program#33
// Offset 131
SG SSC_Program.S4

// Rung SSC_Program#34
// Offset 133
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#35
// Offset 141
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#36
// Offset 149
STR ST1
ANDPDPF
OUT C1206

// Rung SSC_Program#37
// Offset 152
STRN CT155.Done
OUT Y37

// Rung SSC_Program#38
// Offset 154
STRN CT155.Done
AND X47
STR C1206
CNT CT155 V2405

// Rung SSC_Program#39
// Offset 159
STRN CT154.Done
OUT Y35

// Rung SSC_Program#40
// Offset 161
STRN CT154.Done
AND X44
STR C1206
CNT CT154 V2404

// Rung SSC_Program#41
// Offset 166
STR C1202
JMP SSC_Program.S0

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRPD X37
DEC V3202

// Rung SLD_Storage#2
// Offset 3
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRPD X38
DEC V3203

// Rung SLD_Storage#3
// Offset 6
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRPD X39
DEC V3204

// Rung SLD_Storage#4
// Offset 9
STRE V3202 3
OUT C1628

// Rung SLD_Storage#5
// Offset 14
STRE V3203 3
OUT C1629

// Rung SLD_Storage#6
// Offset 19
STRE V3204 3
OUT C1631

// Rung SLD_Storage#7
// Offset 24
#BEGIN FMT_COMMENT 
"Upper bound W fault state."
#END

STRGT V3202 3
OUT C1625

// Rung SLD_Storage#8
// Offset 29
#BEGIN FMT_COMMENT 
"Upper bound R fault state."
#END

STRGT V3203 3
OUT C1626

// Rung SLD_Storage#9
// Offset 34
#BEGIN FMT_COMMENT 
"Upper bound B fault state"
#END

STRGT V3204 3
OUT C1627

// Rung SLD_Storage#10
// Offset 39
STR ST1
COPY 0x1 "4 0x0 V3202 MC809 1 0x0 V3203 MC810 1 0x0 V3204 MC811 1 0x0 C1625 MC812 1 0x0 C1626 MC813 1 0x0 C1627 MC814 1 0x0 C1628 MI815 1 0x0 C1629 MI816 1 0x0 C1631 MI817 1 0x0 V3202 V3210 1 0x0 V3203 V3211 1 0x0 V3204 V3212 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

// Beginning of Code Block VGR_Movement
$TSK VGR_Movement

// Rung VGR_Movement#1
// Offset 0
NOP

// Rung VGR_Movement#2
// Offset 1
STR ST1
RANGECHECK N810 0x0 8000 0 C780
RANGECHECK N811 0x0 3500 0 C781
RANGECHECK N812 0x0 3300 0 C782

// Rung VGR_Movement#3
// Offset 14
#BEGIN FMT_COMMENT 
"Set fault state if rotation out of range"
#END

STR C780
MOVE 1 V801

// Rung VGR_Movement#4
// Offset 17
#BEGIN FMT_COMMENT 
"Set fault state if X out of range"
#END

STR C781
MOVE 2 V801

// Rung VGR_Movement#5
// Offset 20
#BEGIN FMT_COMMENT 
"Set fault state if Y out of range"
#END

STR C782
MOVE 3 V801

// Rung VGR_Movement#6
// Offset 23
#BEGIN FMT_COMMENT 
"Initiate starting values"
#END

STR ST1
MOVE 0 N813
MOVE 0 N814
MOVE 0 N815

// Rung VGR_Movement#7
// Offset 30
NOP

// Rung VGR_Movement#8
// Offset 31
#BEGIN FMT_COMMENT 
"Set Crane Rotation Direction (Encoder Values decrement on "
"CCW Rotation)"
#END

STRLE $VGR_Encoder_Rot.Acc N810
OUT C411

// Rung VGR_Movement#9
// Offset 36
#BEGIN FMT_COMMENT 
"Set Crane X Direction"
#END

STRLE $VGR_Encoder_X.Acc N811
OUT C412

// Rung VGR_Movement#10
// Offset 41
#BEGIN FMT_COMMENT 
"Set Crane Y Direction"
#END

STRLE $VGR_Encoder_Y.Acc N812
OUT C413

// Rung VGR_Movement#11
// Offset 46
REPEAT

// Rung VGR_Movement#12
// Offset 47
#BEGIN FMT_COMMENT 
"Calculate Rotation position difference"
#END

STR ST1
MATH N813 "$VGR_Encoder_Rot.Acc - N810"

// Rung VGR_Movement#13
// Offset 56
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100

// Rung VGR_Movement#14
// Offset 71
#BEGIN FMT_COMMENT 
"If crane needs to rotate CCW to get to target"
#END

STR C411
ANDLE N813 0
OUT Y27

// Rung VGR_Movement#15
// Offset 77
#BEGIN FMT_COMMENT 
"If crane needs to rotate CW to get to target"
#END

STRN C411
ANDGE N813 0
OUT Y26

// Rung VGR_Movement#16
// Offset 83
#BEGIN FMT_COMMENT 
"Calculate X position difference"
#END

STR ST1
MATH N814 "$VGR_Encoder_X.Acc - N811"

// Rung VGR_Movement#17
// Offset 92
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100

// Rung VGR_Movement#18
// Offset 107
#BEGIN FMT_COMMENT 
"If crane needs to extend X+ to get to target"
#END

STR C412
ANDLE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y25

// Rung VGR_Movement#19
// Offset 121
#BEGIN FMT_COMMENT 
"If crane needs to retract X- to get to target"
#END

STRN C412
ANDGE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y24

// Rung VGR_Movement#20
// Offset 135
#BEGIN FMT_COMMENT 
"Calculate Y position difference"
#END

STR ST1
MATH N815 "$VGR_Encoder_Y.Acc - N812"

// Rung VGR_Movement#21
// Offset 144
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Movement#22
// Offset 159
#BEGIN FMT_COMMENT 
"If crane needs to extend Y- to get to target"
#END

STR C413
ANDLE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y23

// Rung VGR_Movement#23
// Offset 173
#BEGIN FMT_COMMENT 
"If crane needs to retract Y+ to get to target"
#END

STRN C413
ANDGE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y22

// Rung VGR_Movement#24
// Offset 187
#BEGIN FMT_COMMENT 
"Exit Conditions for all movements"
#END

STRLE N813 40
ANDGE N813 -40
ANDLE N814 40
ANDGE N814 -40
ANDLE N815 40
ANDGE N815 -40
ONDTMR T50 500 C499

// Rung VGR_Movement#25
// Offset 214
UNTIL C499

// End of Code Block VGR_Movement
$TSKEND VGR_Movement

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C11","C11_Interlock","","Used to delay logic by one scan"
"C12","C12_Interlock_2","","Used to delay logic by one scan"
"C20","HBW_Has_Pallet","","True when carrying a pallet"
"C51","X_Direction","","True: Left False: Right"
"C52","Z_Direction","","True: Down False: Up"
"C80","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C90","HBW_XY_PID_EN","","Enables PID control in HBW_Move_XZ"
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C150","HBW_MoveComplete","","HBW_Move_XZ completion interlock."
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","Fault_X_Target","","Active when X target out of range"
"C183","Fault_Z_target","","Active when Z target out of range"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"D0","MC","",""
"D140","X_Start_Position","","Distance to target"
"D142","Y_Start_Position","","Distance to target"
"D143","HBW_PWM_Cur_X","","PWM value for X for XZ movement task"
"D144","HBW_PWM_Cur_Z","","PWM value for Z for XZ movement task"
"T3","T_HBW_S6","",""
"T4","T_Conveyor_Timer","","Used to detect conveyor faults"
#END

