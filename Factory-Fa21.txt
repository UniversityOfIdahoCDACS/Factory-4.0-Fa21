// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\keepe\Desktop\F40-control\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
23956e5fadb7612dc3c846380c054ce23f943f6abe4020ef99d3218750828ca6aa03c6d7e81d4e01
d97f14e9339eefb74541257cfaf940d319643b694af48a4f83b608f630bb3f07ea7fe48ac4eca00a
79ae21459a1cb88fa1c6d82894db5f626912a18780051a03d323d46fd6faea79442034d0788b1bed
b6ce89fe0e56b08796ef62e2314ba4f2bf4b6addc61068655ea22a7f5e042d3d4a283e9b10763b98
d1ecfa6687eca4383120f449f931c63e6b3cebc90bfdb0874f9dc3fbde530777dca5d7d1e893413c
ad5bc16e75db0b9c26d6cc84f7d4e2cce5ba28d7effcd41a0eef7e9dc5f355280d63b0051c0e2e96
131ba1eb0db9f3cb87c8990ebbf5af528dc3403862e66cdc7fcc6063da08aad370ebc0423ceebf63
8521083aa33872547fbcd6de6619fcea8dfcfaae0c0c3cdf4e345e07879badb1295a178245c40742
75abbc35e2caf4a1736fafda7b27b670cf6e0ad7f8d860ef28ca086f9a4dc3070a718d5bd9bc6e8e
b417e920dde5f1c87daa9dbbdb68775290bd303c39de1e422c34b774cd021fa523a6d40b11591f96
8370b8dfba1cf15cecc3fdb037f64a3ecf07d4c1a55811053f8b3ca48496827ab4568fe32f80ed49
19d32e591611a4519b49a17e9cff2a6e7d54b63985e44837296125ae0e193c01ecc8339eef8cfa46
4b0f1210f8524dec9b42dac4b3243ffe74aaa9c03fd416af0a13713208ab0d587e2cc3e4d7d32e58
a8634f659b8c630fce2b326ff1e4ebb2f4edb29ad9c56df6a2eaf578fb0ce16c95c5a19c297dac35
f4dceb375a435f3a8cf08a79cf8004184365e57d75fbe6a8969a3d15b925a22cae95221daa1aa6c7
b42b13807ec929bc341f698b8cc1e02e4fc227596795da732be2359acaa84fe29d32dbd3b96164c1
5b00c83f57a7df2b15aae48114fd7a160d8d01b3a2e63ed245067f91706016ff0f237fd093bbed95
7fb49c3435af28a7329b95a12a20be1879d55e440a92dad6429c060ce5271a3213e293524e6bcc95
8bb31fdf64d6b5e22e61f4cb8fd2843040ff35fea8a0430915864246243a486728716f045ae6e22c
3d3d0544471c9a593288eaae7c9851fc19c9f8e76e0fd9052ab10de530d8d5cd5935de7826084946
2b5f70e859bf78b936b661736313df417a192bbfbee56c8dddb8515963417c07fc7e4eafb938ab52
3cb6759ab8b1a2394959f4df050fd330127e8099055862febd056bc502a7ac7846989ffbb4106124
1fc4476c26dc64044a1b73f6a29ece4600e79dc75b6308b62d615ae85943ab2ba8edaf543364d7c5
2a725d3ff07ad53b6abd67bdbefa7c5c6bbeec400f44434ec2dbbd8810aaac42346cf00cf072b4a6
7e30cd267058286f1a8af123249707ecabffa9381792d19fdfe6eeefe67aeeb1e34f50f36352e28c
05ce65f956448dce541963eb9a15b4b2d7d2545ae7478c809d364bc410ee619362f5d2a0c829dd75
77d3b957c647fb76832598108b5f3558d8e9712fbf4f317e61f42a1a5c665f0eea8513912f092b52
a36a6bf3419d1b24ffbef817dfb7f7a3f38004f75fabb43851ae36113a3a13471d9d2738435cab91
c39259c74bdef5f115e6353a6064a603fa78d03acb6f8d49a5733a1f8417bfc8cd78dbb2922ca722
54fc0ef942ca958ea2f70a9f16f3abe384245654dc13cde05ef7ee8a2c18dc1e56bc2971960bc6ee
285c8ceff08e85cf3a6a4c793efa368728bd581988c66cac22f21fe962acd39b6c13168ed073d947
5acbfb02762e789d9fbc4dc49bf94cb25fcbc1ccd147418a3e107aac44931f7ce18d4fba210d184c
0a789c1bdaba9c8c03b0fb81fe457d5b3461f60e2705eac649c7066640f07fcc87fd823981ef2d3a
d7274c48d27a382b135ed4de5bc6682fe4b09d6b882ba1778223b0b24ed9988137a8c201c8c9c92e
a17f480addabe0834157c2fbf7fa4e1e87a3bd11ac4b6e3b4af637e5d0744e6ed70b8a023990b116
2ce19490e94a47d3e9afc2d6bec82393c187bc1aaa9689d227ecbd6173ba13128da9466a650fcdad
264f302486c57384f37dc46ca7d8381cda9960ba610e0cd3ac5b0738030aacd2b6f6d738848d73b6
e6cfac3fdb50472ad8301b0e72e0ecff5992643c366298bf9592d4b7436b846a0f95c02fcc121987
cfef91bc5aa5797d053d4ec3ba11a815c32100abf77f248779855f2f4e297c8b12d40a25f7a7a74f
49e09c743267a7558035e118306a63de051ccfaec4616836e5f2b7d72fed7dc380421546d9a0465e
d475380d2ad32b324ec718c0a1ebcec7a92f387d1ce0a2eb5714dea9fae59f799127ea7ea6cd7241
92e965f6d7b10c49e1d184f122b66c9513cd55ce94d2a2d96da65c5557f337d60dd332d46b17c067
ae1a045bf432909e9adf8d1722dc87c18050a362ffcdacee642fb83a78c6a6b0925de9ab9cd29240
e40ca1a135fe159542657c2b368c7f61d195a6824215f094752184bfd14c0403b90a9725b473846f
5af4687f6c01e4951b0faac6f22c5267cb9988a89c5133d6a00c7bbe25974ad858a78e025c9c9d13
decca01783729356c36bb945ea1309539a5aa2d705acc6636af44117feeb1c6a388801b8092a8032
74bc42c945a5a4de54d1a27715ffb63b67acc745125130cc0e5f9786819206d9f1300d777cf090a3
1e8371abccb402abb5e698ce9387b97c7678694a53891028f32a059a315734ac0e36c6266804afeb
542de92459e70b08b4ef47fb032988be2076f811fc1159e41c35db43fc80d898b6a7c1982e3e4570
48dddc63694e326c736bb0512c72f587a3a0af73292beefc22fa4087bffaef55cbfa36f78695747f
156734807ba40e65c0007ae2a207b3a59085352e14ddb01c1b61e90557e63e8fe0dd47aa4d693b97
74c84f3958a86a9f704f1cc8b44bf6274c9b91d701c65352c5e646a40c6e6cf82170cddc8336371d
32f296c102c21f14eb683dc188aba23e29a4571f9bc1910a93aa3d2034d61b23494a0a1d622f2913
e9663021c2ffd0313148b876a41947c63434175bf252c76e02e8a441b2dc3127c3d9a334daffec0a
110d87e60a8854ee50daa0845baa7d1ed033c5b57597dad6ebd21bc539574443e78a767f52c253a9
459218bfaa1738eb867498d5b9f00aa01d12aaaec8e540624ce5d85665cbb913aa09fb83acf24c57
c97e72108fc371809ee4735cefd49385765c7ba571a9f8c695364e87faed10175d0cfb24f95c1e8e
2b785ebac257bca9fc270e30253300cf229a988d11f701c9eb5a3ecfdec27cc1bba8b16589fd7457
c55c3099e2e17b6f5905004bc1a2d1a4a9c38321685a9cb67f3d0af409d37a36f45dae6ea4ea8b48
5ea8ae7bb3c66fdcdc6d0e0028cfa478597bc2a73517a6c23308d455a44a1f8b23e11d9d24386219
a9eaf034ef607e5bbec6eba692f6ed8d5f2943ded37fb9016b10de0ce15c48438be344b11d429619
0a51cf0a4941705a102932eaf3c134744170533527ab26c2e945992f453ef0d23fef20cd53ce15e7
26b6366c2cabe03f2db21d5bed9afc6e9d47ec473709a73a7c4a6f88bd49eb121a89c6fcfbf2c1c9
f8e14fb11bf078da6a8b99dd88d7ffc01131c05ea2e2656c35707a9f3e02046da8d0eecfb1cee257
d41bd2fa2333f18a09a9543aec2778659eaab4a014fe4d5abf5be0a377170dadf629f15ae7fe81a8
699eda928ac0ef939cb1dae81cecc6f2dc54ab826a3a5f6bdd9418b56dcca55fa21cbd0fc221388e
f0cbb8b701d7b5b242912486fca2467428baad2d16057b753c46cd1f7d3ad3aebbf261c2d5319b0e
862494c99add8cd3fb24f34986efcc02b9093edff6cd638fbf78273a012a00a7b5b5e04f4a04ea56
db62626c71fd5088a188e5ff6bab5817950a55bfc59bfb6910020257b8bdbb9a733c071ef3f1d36c
a2061f7ce7aa854bccd72f396e8b40099b2678ad358f8a840b1dfec9d57506d901aa372e59e883ef
703ce9a1595696f1dff5d730af6f2dc83c1cf5ba011a573bb362c25c997bda41cc3418f9e0562813
626dda0c6e6991c2ded515f2d795e652b80bf2b742638ac5dec262600280095c078a4f81aaafcd3f
ec6c9d92bfaa38356abf279d9937da66eb928bb13e14536ddaf3fe43295a9bc0f63e7fa0b2e65e51
49ae31f1d336167b47c59308e3ed60f0ed8f2dedde9d1f387f216120d1bee1180c9e8d4dfc773fbf
9df472806937bedc888d33121381b2f0512293bc2f8f5829a610269626ca6da21dd25e657bc27666
2f3f3c94fd93bf012cf6f51bbb3702b046c4f67aa936d51d0b581be9394db64965864cbdedb4f079
9e45e7687653b6aa0adcfe8af7a1d833eb63332999fa8a7929845338d0727d38ed8d9090cdef549a
3e279c5b752d9c7c35a15b841daeb9579556db39895407007a250fd000badf56ca2ff707c322f923
d41e952d90a1b09e7bb9a8e13cdbcc5b043f64aadfd1b853b422338385f50445860658188aa94f35
6a407faa0ab73ea247275597d1abfbea76bda6254080f21edc6d25f81f48d653e0c0f913576c9b36
4e8ef90b84a45c00bf42dba496e933b948ad85f9779dd9e3a228c5f363e27944a3d78b23c7c5442d
a5a275b839b94243a41adf5a540cd9639f607a15c8a9b2ac07225b419de51728e07f85daa791d869
768306764a644663bc487256e9219088ea7d69780dfcf4e53e5e2e2eff5ffea29fb2785d7703a4dd
c2c868c659034d25b63bc1c5987865038babd8498b6b318830d2459aacafd78b3700e5ce397df254
7606916b6537a113b696fa16b8a5fbc1d9132c0412e2aeaa7ffc7e0e3f27f2690a8e3bfe2d40a570
a3daa8b69d48370b73dbf997eb1ea4912eeb3855680c24bd2ff626e177940954a44b6dfeba46b638
844ab40b13a4b11a64bf682991d0ba3d2983ecacb1f62f862a6755a78b8d6303179b1f8389be106f
d620c7c0387e9494189e3f5caf90bdef7f78fea226a9027a237601944f73ff79d80f9eee75fc7ec6
33fef4b75d884868d692787cf076d7b447785900cf5474b918d55113a76493011a97f8433b6cbee1
97d1762e34d2980d7c96ab6312bf87fea33056089192f7764c13183b38c94c876fe28e44315e123f
72464e7b22394ab39fcd11376ad8c96673110b1883caa50e7ddc0a965c49308b2dd54433df0e993c
eb933e89a7e4d06736ccf1853566ba44541acb644485ae3e017694821da602bc03acb6c7d1925929
64f5241c4229e637738552b2c0edc5d87e985c34473016bc485e1e8ff24c29a4b9d4ed80e6d9cf0b
d3b2cd828eb1be6370f08395dec09ef8a4f4157c7e61c0367830b811a619046c55c278e80154db26
3d4c9bc0831bb5935edb7a39af97f0ded21fcf7761ffaae61a68dd06480d7414c5f1f64c4257068b
707f5b2a71ffc3e374c3af3e01d254504d879a3559012dc632bc94abcfe6f1f65ae004764122f274
159e8748a6a52088381cdec9b4e7e273b112603cd28d71da02c19cf4a5a91f8ef9639feff82fb72a
9df7b3e2f3e165a8572f6065c254315e08966d12eec0dc5f2595a867f5baf341e2651ce8dfd290d8
bc8daf5ce0917c60a5e815b98ca8d76c9ec3d42bef3af8dd1a3c347808385d6207ac7391ea84ed6b
d74b00df4b469b19467b8f1b820e8fd602a2777f4f250704f396e51a2d7675cfc400f30c07684b51
881dba75a0e04c3410806dd67787aa30269a6679c030ce7499feb7d9dda6b8d5aa3db33aca7c1192
b9bc915110682ce9c5666082f82de9dd02d2d33e2c7627cddde873e039d2e6a4db94da8ec0d10eeb
a50f18c7ea00270e59803d7d3dac13a0af709c8450b65f5f2e795c35f9199fe8db85924da61586a1
67d833513b7bb3518a54c0f3e39abd6ab5d9f0d5fc3fed1720efa18a3c5a907226b2264eed0a02f0
2470c6d52da27c6a45a4c641477e3e1ccca7da814e531a4a53d3191eb7b6b497658f70468f9492c1
9fbb3e1e7ae12cfc93448b2f315b968354f742f953e857d3c24148cc6b9714e8d04ffd897574b66b
9b0ad9a214eba3fa29704571f016cdaa23b2243a828cfaed5c55e71056d3fb0084d6c1b57b604407
f15e414079752f0c9045195910356840f9798e7900f36286208425d1af6a8711bba00ded59f6851f
92a52f2dcf49329effd07592317fdd7b06b6f8a86470ea3468d48ea433f434e13c8fc8bda715d1f5
c7db862b93bd0904b82f2557c01ad3e67c3d02071f1d6f9434dcaed047677d634553fca5f67753af
f1e245aa2b4410ae4a159199678a68ffbba2b9cd007b54118a5044d359db0262722a1d72f215d734
934161bd8af30949e16d5d78525f7c538c0fdc3656c4149f77267bc39809f7127915a2f8189d841f
b44bfbe1abb31afb2bd8d2dd98dc98b80e4ec48fed0fbb21d205329920a66fbc0c6b0cfa8c56a661
d21e24b81175711744ad51ca43ac401c0dc19a56adb251c1135e07b02f4800598c014a43f1f0b29f
4a307ad7552a2edeeab34097a0758e943f5fa7d2bcb38507a62fd26b2191c632d6d37db604591d93
1c4c4fd572f79f20dd67e066aa91f47808863bda6a995558bd5c70d8092fb497baae90d7b53e2e2c
ccdab6aba35a3a6e58ab451c25ba64467ea795cf802529003b54efa4f1c076b93d0aefe5ccb12122
4a40c52d4a9789277b654e149a6532012ede926120f8613ee4dff925e72b4dc4a872dbbde06a42da
8f58c4e1364df49b6f5e39100d3c328ffcb7355d3894105d046d755c797e80758d57c7c11e398f98
34c04043384ba44dad3419c17a4102d4ae14278ae9908a1e59aa2736629b7c0de70e6997ec7a3f3b
a9880ab9ca6fc5628f85579c1bc80a1c38dd7e2ff973414a632a0801526e3d623bff555eb8a96011
b46d2715fb10994dbd063e0751e32e5cab2e9f66cb4936892c6af9995421525c573cba86b09aeda1
12ecb54a19465d9afb2dfdc7927fc59f56b6c85dc6b3017cfb7d55af2c4a282c4abd67931369c172
36b9b9c01ff19d0907385052d1ac51e9bded91cb109fd77ff4f7bd4e7e52de48614eec70405b2818
f955d2443ce969614ebd19a246ba97994db1f87c00f642e152791e855ce6c4d39cbc7cde481d17e2
6d3b1e8e070b8b83741900a3b5b83ec1e7938ba4943b359e055849b1a955ba13e0a2d5057d112d28
d35ff5a99c3e5046cb41e4e045a019230fc5d0e5e1ea761fc9cde7d007c6bf8130caf4eae5b6efc3
b03ce9a7245ffbedd8950046a2b27a36985376f662dccf450eaa5f6b1ef543c96985f3dcb0a32e5e
4b98b01bd618d1f6be185d7faca391fa924d10e1262d0be17a23944d4fc1a2fe1381aa1ea4d6bbc8
1118e4e5190a1875921458afbc98c9f4efca9907487330390e813b957fb60507dc0f22b95441cfb2
be323b402e5d52b82b6a37245712078c0d86d6d30a9e002ff4316cffd7be9959d1f426776bc18a6c
329e75508a50d29bfcba2bbe7f9140f29566a3fe278f568aaa7460ca7fc3d0f31c5d14578d5dfbd8
583877fcc3aa9e1aa6fd1d2050c606bf9c2d1b638e758b884b8051ac52d16e98e99c0f9789049c69
cf78bde17c7c62bc9d792dea3a763a7aae96b51bd63f30c30624637f15caf74a54e76ed9975a8b07
247c109c0ce55c3a5a78d9a7672f39e13a84c9a9db9651da9e14a375a57954d946e08ca111746113
4d0113621ca3956ff37ff2ebbbbcb906e86de20d16d29cdfe831b3c42a30a6c35a765e72f6032b7a
3edb8e00712e5de64d16b7e45c7eaf010000cb7771a7ab4c3092acbae75bb844eed29044e01b82c1
19166718a7b0c09c965719966e61bb8a6f4d8a40ff36203a3959d64c9de139593a9ff987a302deb4
734c08dc9a7a2090a17ffc117aed9f03debf42537cd8a39623ca8ebbfc9985fb29cb7b4367ee258b
b4aecfb46c8210b26d4d1283f0f2e7065b1d0d5df2588198f168a2b2560e1d732bd7420917f5d3fc
778a35316f4b8d04ebf5ebf2c0f03d51bc8251eb0d3274e01c140be0034cea9e4f3beba7e4b075a6
71e03db6449e73207c609f8f4bcba9f4f12bf5161142a5aa38befc4a2a7207efa864e513629203fd
49fefe4a3c4fd740ffaff4a8caf2de8c82a4adcfdc68dcb5fd19cfcfd435c301dbb62f38c3aa71c8
0090b6a04a5cbb5f0f8d2db579ecd297c8b6446fc9ebfbfde5e325911b177a3b45773ec9756d157b
765dce339ec13763afe2ff4f179a81ab8fa63c09a595d401742ca0d2b81b8e5bb85f9a7c28f57715
230a0a30e3aea608524b966e6241f9ba56dff7fb56f1c461e8d7e6183ad995c86fedbdd29f2f519c
0813054a6437e9857124340d2f1dfa05d8ce0fc94c9254860c85c5b018e379a2c41b5fca6bfeecf4
7ea2fcaffda2d9130c4f1d683576fabda9cad0ffd82fc478ede9cb3d70982bf13504ebabe0cea0d7
fd0b9200a32bd03ea621595893484a1c6102e8be617c0a6833ff5d97b6d304687cb05bff3ab2dfef
39fca0b8bcefe71e877f2f52bcc113c4a5982b17b90505877b2fe1213d3159f834746d94b075d7f6
27102fe114acdd123eeb2791b86a24f70fc42546889296acb4bc02392b1cf1098c6b79dad9375a29
c66a2bb8bf7d0b3991e1b558bca09b57820519eade098fcf8a467058a90c5eec581227f042ec4164
7dad076b0816d19d5a52ad9e67c9055524f67bbe06a59efb216dba1ec6db1a215065839f6336fd7b
3bff9e099c217f69c43a61e54e86fc122e772f7cd5214882cb110a56350be04f8d7761dde3fd29af
5039a3fda48e1ce87fa74782620577e8ec8f15fb4e910403f91750c52091c5f3406d73f2a366161d
f2f2a872ea50dc97ac0af2797c8164f32d48df56bfcf3bbb5255b8ccf38b67835bb9ebee88a24473
fee23dd372bf6496c7b64d495652c97365b435edda7d6bb5005d3e6e5946a93ae89cf33ec7a7e666
cc13c6ac9e698fe42725b52e6e34b488ae76d570bb319dd8a2f12517b7af4e05abb9c79b5b3c6730
5696894483b9b5528f88200bbaea37d71d49452371ce0f2c2f43c1f768d19a3b4af550df0a0c7344
9710749ff54810dea4dd1f86da6984e26dd111edc99e74893b6ab359a8fd5533c1f3a1a22642b0ad
e814071119e070dffd45dfab649de306f0ae1506031dc5936c8315edfe0fbe069ab787e0c94ebba3
355370941927aff2d5cc8fb29929250f5f19297e20107818e57f329c33051738a342a53715892f66
82575db841221640a7e949af12af285aff5a38659ab7fee52d6fa0255afbad247c1bfd167d1433a5
f6556d06728951d6b7a6a58c5ed7f021419bd2dfa6adf781e70ea64023ed6fc978748a88d8438ac6
c826a454aca82be432baf92ee0580fde6063e678e573d6a228a6f5fb9fefaba326b513b9c7fd5827
caa09d57be333d0d4b9d598d05d34cf2c57e6849715b17497cd7c84ec22505dd9ab1dfb9c2dd6916
efebdc770a9e7fc3d75ac3bde55e40b224963a143c50f73e54b5f9ae2bd7d1eec03a4f30650c8fc6
f27507ae36557051b3610a6972c3b8473cdfe1986196e81a85bdf0cc1e3f87578a8a25587583848a
d3def7f9c01486c7b1f21024fe2ebcc1976648be238c42e1148eb304ab2f30aba97397bfbbacb7cb
d73847af01d09e1497e2ee481fd7c5f9f427e89835d89fd6bf41267ef24d40546407a3fcf4008c0c
23ed17d069a33c4672521a23366594b08932eb0b81b76b664f3247ecb73893e3a14b79c23e0a2c69
335df960dcba925fd4c5ebc5b0fedb44e6be88c1055d04b64a15ddf2db163ab71e4436d4af320aa5
06e4fe79bcbe7f77bc68d164afa093bff31eccfdc3b7943c0ad6e9cc8f1b13cdaec9b700da384795
0b424a1610d48a5e0908dbafb84975943e2f359e8ecd557ab48d9c7757ae1a9a7d6cf6db54d246e2
f209705c2dde5d8008302a9bc7729567492b2130328363816a0ad6e399dc347f8d0dd22a34e96226
09b3c4c3c978c3d1c28ded479af64241ea743047efdcd347f4092b6d9915434e56616943013f81b1
f5661ebaa5547cbe24587f424b853f9c6e0af8f8eabdf31fd56d1ecc81f063357e3ace997d88c223
c3e5924a0779d4cde2ff780330637fb4cd4ee0e689336ef589af524feeb97cf025c0fe50706d251d
d10429be75762140863b09a7056bd21d9d642d4683272a7839e059eb31097f3def41a787069bc82a
44756b3974aff0d11b5a4aa21edc1601ac21ada5b4fdc169f5ffb89cf982461490609ab8b57d0045
ba541470842466f5c98b1ab2f453ccde8a7cf31cea1a22c8cd877bd20c0e1d0161687f2c5ff0afd9
b96339388565d74151399daf21721f6b343035b8766605e5fdf5992a3d7d636e872a42fa17df557d
51f382f9749174919ec0c4d1085f840b1359cc49e0ddc5f363c97af07ca366ddc25268099718a1e9
f9c68481303770a42b65c82f821ac984bb0b18c6d750b512819d895f37dc1654d31462fac9267c10
d1d95f5a0168243d27d1fda12bf5687fdcd7bc99da373791fbd68f842f082d6fe4668999ae6d9ea5
2a76ddf285dd5041fba65363d7aec0521d332bf7a5c70f7b29806644040f2260c21cb36de0c2f937
0eebc6d1a4ff8df191cfd586c15149d82f5fb3e1804051c45a61df0383eebfcb0d23585aeb30d259
233080a6fbbf92736ecdb3275cb9f45ba1f88938cbfb6d10dda8e019de2dde26902bf685836baef1
871210e054f1dc2401e6eb58067eeb0dbf87c9e923e0d1e24436f9bf886cc008433da72f1469ab5c
9a160f337900675454625470d42e0ba4f911916ba50145ce339a0c6fde4a0b7f10fc1ba2ce81c266
ccfcbbdb0be73d9552caadeae7089077bf5e1fac5b2527fd630d89a5df5de6b1c5fe9c178d5a8b4c
43a727042bc30b8e40a08ee688bbb4d9e2aaea3dac5f5e4d5c59362b110f045c152d020dffdd907b
d6c6e6c10f9651a39df49720b27430c554ae53b9f22bfbac66d6fbe061661fd928b644e61265153c
e3e995c25b6d21bfd32c89dab145f49f3ddb4b3d8164b2a8c434a98bd150033b8cc89cb8da5b9836
4f4760401598d94daf6d69525041adbbd17b75eccb335d1033e113112a70961f3212e7716e94d721
e7619a2be0cc7625ed5b5c1b5989dd3a1ae83c20bb5ae42eec2d016201f22b33578b4e3d37fb05e8
fd1004f82cc6399cf29bc06a9a4db02ec4e8a3f50139681e60560062819ca491a5f64f1d98cae041
fa41ac3002f71f580c96fd2089a6a94b1fd37f8dad53e2507dff26d3996d9512f06acfe7a4b14454
b1a1c9283fb21b34015d88ecfee6606cf947b18f4a3847d75355f71a9905b244ce3625fc83aa67cc
697ce8941d5ed069779f42ac3d75cb7715b65c8ce960d1f5b5db21b48a1c98cec87877631143156e
9f57689a3b2adcbf327dc271473a8f4cc1834b2684de44bf55cc414387a99618fa6d3a91eb2bc6f2
be02015df19132bb6c4bcfd85c039d087e4b01b1b631432e60ed1b1297740677b91f9dd8a6699fd1
67955616e00693fb7a13f7d74a7e63299e46f08974ba8eb88abd4356e91656f3abf9526f707b130f
69ae23b313328a3e4cb0b8275b5f43405565b3330d86c0f936d8f17f205d3b520c2150ca1dc04f18
e6b63956f1236c8a33c158744adc53f38dcaf91c8fda5a02bbd1aa4240248453b1355eb0f65bafab
7a5cd822b15b031b69216d8572daeeb1356416e155574f1f0cdbb2b337af23eb62f5d3de38845782
099882b15e259f301881bd7b5656c05e6bd2915d9346d7f91fb390585960744b9a4bc07d96d28438
fdd199fa7185830fdf05565c2c45917655d41cf2a01c0bfbeb8883ec6b0c2b7dd0e43fa8cf2dbe0d
81cb9b00200165b5622a6cfae2f70e41686935d3895191d6be064851fac6a0bbd13b8f54e5f376cf
c836799da72d7ad9dfb2d0b7ee19103e1a361b8c7a37f459eb9974bfaa0fdb260a1e424263fb9d76
a3edf3b480bb1f4901873c1444862016093486e6b3588215d94323e96ffb3667bccddb1b07ec8d2a
6d68597111c0f7dafe3497fadae2eb2c18e4205ecc294807bd81c872564ba28af661a4e3afcb4d99
97de80b165acd046654bb4b76fa969a4d0c0a175fbe80a1c501114c714bdcfeb0379a5137df0f181
2e7e4180e6fd026c1284e73dcf6270de2553a84b4e152e9927d8e62f98af22220074ad849ea6092e
36ea6937ca09c49569e61ea4fecedac7e8a21e8cfae20ebbb62565ee1e232cf8bfd3d545206a8b24
4c10022df26ed5f7a02a4e90bdb187448b28ddf34babef85fe959429f3795519b5a11c67cdbefa48
42cac9337010f8008b8cd6b178567e75b935841d27f790662e2ed9515cf3fcf8c30679184ab607c7
10be2a15533e9f8d5fa596f3244edd1a95929fb2e83e644a4ce203dc526b38ad96fe229d54a58c20
fe18230307d22dd8549998d94d5671e67df1ecc823b64791d28a58409699efcac42c7d6f01844bea
995c7a4b8c84b2386947b3f1a2883a05024b5d149f05ee8251a29ba2cbebb2154de63637846ffc12
0df55519ebf15fad
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
 HBW_SetTarget_XZ <Virtual>  0
 PID_10 PID  0
 VGR_Movement TASK  0 -1
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 V801 MHR799 1"

// Rung VGR_Copy_State#2
// Offset 37
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 C810 MI402 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1 0x0 MHR801 D1601 1"

// Rung MPO_Copy_State#2
// Offset 35
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 MC808 C1621 1"

// Rung SLD_Copy_State#2
// Offset 25
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_SetTarget_XZ
$LGCMOD HBW_SetTarget_XZ

// Rung HBW_SetTarget_XZ#1
// Offset 0
NOP

// Rung HBW_SetTarget_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5280 V140
POPBOOL
ANDE V105 3
MOVE 2990 V140

// Rung HBW_SetTarget_XZ#3
// Offset 24
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
ANDE V106 3
MOVE 3240 V142

// Rung HBW_SetTarget_XZ#4
// Offset 47
NOP

// Rung HBW_SetTarget_XZ#5
// Offset 48
RET

// End of Code Block HBW_SetTarget_XZ
$LGCEND HBW_SetTarget_XZ

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
STR ST1
PID PID_10 0x60 $HBW_Encoder_X.Acc 0 8100 0.0 8100.0 """""" 20 100 WY0 DST511

// Rung HBW_Move_XZ#10
// Offset 57
STR ST1
MOVE V140 PID_10.SP

// Rung HBW_Move_XZ#11
// Offset 60
STR ST1
MOVE $HBW_Encoder_X.Acc PID_10.PV

// Rung HBW_Move_XZ#12
// Offset 63
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#13
// Offset 78
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D140 0
OUT Y50

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D140 0
OUT Y51

// Rung HBW_Move_XZ#15
// Offset 90
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#16
// Offset 99
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V120

// Rung HBW_Move_XZ#17
// Offset 114
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D142 0
OUT Y4

// Rung HBW_Move_XZ#18
// Offset 120
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D142 0
OUT Y5

// Rung HBW_Move_XZ#19
// Offset 126
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D140 -40
ANDLE D140 40
ANDGE D142 -40
ANDLE D142 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#20
// Offset 145
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Test slot X & Y target value for out of range<br>"
"if X value greater than 4, fault code 105<br>"
"if Y value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#9
// Offset 38
#BEGIN FMT_COMMENT 
"Task Send<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if conveyor light barriers broken suggesting a pallot "
"is still there."
#END

STR C101
ANDN C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
AND X1
AND X2
JMP HBW_Program.S7
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
STRN X1
ORN X2
ANDSTR
JMP HBW_Program.S2
MOVE 107 V181

// Rung HBW_Program#10
// Offset 73
#BEGIN FMT_COMMENT 
"Task Recieve<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if outer conveyor light barrier no broken suggesting "
"no pallot is there."
#END

STR C102
ANDN C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
ANDN X2
JMP HBW_Program.S13
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
AND X2
JMP HBW_Program.S2
MOVE 108 V181

// Rung HBW_Program#11
// Offset 105
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#12
// Offset 107
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#13
// Offset 109
#BEGIN FMT_COMMENT 
"Task Send - Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 111
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#15
// Offset 114
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"

// Rung HBW_Program#16
// Offset 123
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#17
// Offset 128
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 131
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 134
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 136
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 138
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 141
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 147
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 150
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 152
#BEGIN FMT_COMMENT 
"Task Send - Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 154
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 157
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 162
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 167
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 170
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 173
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 175
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 177
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 180
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 186
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 189
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 191
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 193
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 196
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 212
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 3000 C80

// Rung HBW_Program#41
// Offset 216
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#42
// Offset 220
NOP

// Rung HBW_Program#43
// Offset 221
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 223
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 225
#BEGIN FMT_COMMENT 
"Reserved Stage<br>"
"Just incase I need an extra stage for Task Send"
#END

SG HBW_Program.S12

// Rung HBW_Program#46
// Offset 227
#BEGIN FMT_COMMENT 
"Fault<br>Should never hit this reserve stage"
#END

STR ST1
JMP HBW_Program.S2

// Rung HBW_Program#47
// Offset 229
#BEGIN FMT_COMMENT 
"Task Receive - Conveyor In<br>& Move XZ to Conveyor"
#END

SG HBW_Program.S13

// Rung HBW_Program#48
// Offset 231
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 10 V131

// Rung HBW_Program#49
// Offset 234
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 45
OUT Y49

// Rung HBW_Program#50
// Offset 250
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x1 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
AND X1
ONDTMR T4 3000 C80

// Rung HBW_Program#51
// Offset 255
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#52
// Offset 259
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2750 V142

// Rung HBW_Program#53
// Offset 264
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#54
// Offset 269
#BEGIN FMT_COMMENT 
"Movements completed<br>"
"Conveyor inner beam broken and XZ move complete"
#END

STR HBW_Move_XZ.Done
ANDN X1
JMP HBW_Program.S14
HALT HBW_Move_XZ

// Rung HBW_Program#55
// Offset 273
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#56
// Offset 276
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 278
#BEGIN FMT_COMMENT 
"Task Receive - Pick"
#END

SG HBW_Program.S14

// Rung HBW_Program#58
// Offset 280
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#59
// Offset 283
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#60
// Offset 289
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S15

// Rung HBW_Program#61
// Offset 292
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#62
// Offset 294
#BEGIN FMT_COMMENT 
"Task Receive - Move to Storage"
#END

SG HBW_Program.S15

// Rung HBW_Program#63
// Offset 296
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#64
// Offset 299
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"
OUT C99

// Rung HBW_Program#65
// Offset 309
STRPD C99
MATH V142 "V142 - 100"

// Rung HBW_Program#66
// Offset 319
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#67
// Offset 324
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S16
HALT HBW_Move_XZ

// Rung HBW_Program#68
// Offset 327
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#69
// Offset 330
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#70
// Offset 332
#BEGIN FMT_COMMENT 
"Task Receive - Place<br>Place onto storage shelf"
#END

SG HBW_Program.S16

// Rung HBW_Program#71
// Offset 334
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#72
// Offset 337
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#73
// Offset 343
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S17

// Rung HBW_Program#74
// Offset 346
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#75
// Offset 348
#BEGIN FMT_COMMENT 
"Task Receive - Move to Idle"
#END

SG HBW_Program.S17

// Rung HBW_Program#76
// Offset 350
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#77
// Offset 353
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 4300 V140
MOVE 1400 V142

// Rung HBW_Program#78
// Offset 358
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#79
// Offset 363
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S1
HALT HBW_Move_XZ

// Rung HBW_Program#80
// Offset 366
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#81
// Offset 369
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#82
// Offset 371
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#83
// Offset 373
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#84
// Offset 375
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#85
// Offset 378
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#86
// Offset 380
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#87
// Offset 382
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#88
// Offset 385
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#89
// Offset 400
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#90
// Offset 402
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#91
// Offset 405
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#92
// Offset 420
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#93
// Offset 423
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#94
// Offset 426
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#95
// Offset 441
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#96
// Offset 444
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#97
// Offset 446
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#98
// Offset 461
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#99
// Offset 463
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#100
// Offset 465
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#101
// Offset 467
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#102
// Offset 469
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#103
// Offset 471
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#104
// Offset 474
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#105
// Offset 477
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 100 MHR120 1"

// Rung HBW_Program#106
// Offset 493
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#107
// Offset 496
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#108
// Offset 513
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#109
// Offset 529
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#110
// Offset 546
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#111
// Offset 562
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#112
// Offset 566
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#113
// Offset 568
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#114
// Offset 570
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#115
// Offset 573
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#116
// Offset 577
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#117
// Offset 580
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"Reset Stage"
#END

SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Reset VGR Fault Code"
#END

STR ST1
MOVE 0 V801

// Rung VGR_Program#7
// Offset 25
STR ST1
COPY 0x0 "4 0x0 0 N810 1 0x0 0 N811 1 0x0 0 N811 1"

// Rung VGR_Program#8
// Offset 37
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#9
// Offset 54
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#10
// Offset 71
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#11
// Offset 88
STR X25
AND X26
AND X27
ONDTMR T54 100 C798

// Rung VGR_Program#12
// Offset 94
STR C798
OUT $VGR_Encoder_Rot.ResetEdge
OUT $VGR_Encoder_X.ResetEdge
OUT $VGR_Encoder_Y.ResetEdge

// Rung VGR_Program#13
// Offset 98
STR C798
JMP VGR_Program.S2

// Rung VGR_Program#14
// Offset 100
SG VGR_Program.S2

// Rung VGR_Program#15
// Offset 102
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#16
// Offset 110
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S1

// Rung VGR_Program#17
// Offset 112
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#18
// Offset 114
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#19
// Offset 116
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#20
// Offset 118
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#21
// Offset 120
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S20

// Rung VGR_Program#22
// Offset 122
#BEGIN FMT_COMMENT 
"Move Crane from 0 state to HBW"
#END

SG VGR_Program.S3

// Rung VGR_Program#23
// Offset 124
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#24
// Offset 132
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE -5385 N810

// Rung VGR_Program#25
// Offset 135
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 820 N811

// Rung VGR_Program#26
// Offset 138
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE -620 N812

// Rung VGR_Program#27
// Offset 141
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#28
// Offset 146
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
JMP VGR_Program.S4
HALT VGR_Movement

// Rung VGR_Program#29
// Offset 149
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#30
// Offset 153
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#31
// Offset 155
#BEGIN FMT_COMMENT 
"Pick up disk from HBW"
#END

SG VGR_Program.S4

// Rung VGR_Program#32
// Offset 157
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#33
// Offset 165
STR ST1
SET Y28

// Rung VGR_Program#34
// Offset 167
STR ST1
ONDTMR T51 100 C414

// Rung VGR_Program#35
// Offset 171
STR C414
SET Y29

// Rung VGR_Program#36
// Offset 173
STR C414
ONDTMR T52 100 C415

// Rung VGR_Program#37
// Offset 177
STR C415
JMP VGR_Program.S5

// Rung VGR_Program#38
// Offset 179
#BEGIN FMT_COMMENT 
"Move crane from HBW to MPO"
#END

SG VGR_Program.S5

// Rung VGR_Program#39
// Offset 181
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#40
// Offset 189
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 400 N810

// Rung VGR_Program#41
// Offset 192
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 0 N811

// Rung VGR_Program#42
// Offset 195
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#43
// Offset 198
STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#44
// Offset 203
STR VGR_Movement.DoneThisScan
JMP VGR_Program.S6
HALT VGR_Movement

// Rung VGR_Program#45
// Offset 206
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#46
// Offset 210
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#47
// Offset 212
#BEGIN FMT_COMMENT 
"Position Crane to drop disk onto MPO"
#END

SG VGR_Program.S6

// Rung VGR_Program#48
// Offset 214
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#49
// Offset 222
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 100 N811

// Rung VGR_Program#50
// Offset 225
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 100 N812

// Rung VGR_Program#51
// Offset 228
STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#52
// Offset 233
STR VGR_Movement.DoneThisScan
JMP VGR_Program.S7
HALT VGR_Movement

// Rung VGR_Program#53
// Offset 236
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#54
// Offset 240
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#55
// Offset 242
#BEGIN FMT_COMMENT 
"Release vacuum and turn off compressor"
#END

SG VGR_Program.S7

// Rung VGR_Program#56
// Offset 244
STR ST1
RST Y29

// Rung VGR_Program#57
// Offset 246
STR ST1
ONDTMR T53 100 C416

// Rung VGR_Program#58
// Offset 250
STR C416
RST Y28

// Rung VGR_Program#59
// Offset 252
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C416
JMP VGR_Program.S1

// Rung VGR_Program#60
// Offset 254
SG VGR_Program.S8

// Rung VGR_Program#61
// Offset 256
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#62
// Offset 264
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#63
// Offset 266
#BEGIN FMT_COMMENT 
"Manual Control"
#END

SG VGR_Program.S20

// Rung VGR_Program#64
// Offset 268
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#65
// Offset 276
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#66
// Offset 291
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#67
// Offset 294
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#68
// Offset 296
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#69
// Offset 311
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#70
// Offset 313
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#71
// Offset 316
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#72
// Offset 331
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#73
// Offset 333
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#74
// Offset 336
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#75
// Offset 338
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#76
// Offset 340
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#77
// Offset 342
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#78
// Offset 344
STRN C500
JMP VGR_Program.S1

// Rung VGR_Program#79
// Offset 346
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG VGR_Program.S30

// Rung VGR_Program#80
// Offset 348
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#81
// Offset 356
STR ST1
HALT VGR_Movement

// Rung VGR_Program#82
// Offset 358
STR ST1
ONDTMR T99 15000 C700

// Rung VGR_Program#83
// Offset 362
STR C700
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"C801 is the ready status bit"
#END

STR ST1
ANDN C1000
OUT C810

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#17
// Offset 48
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#19
// Offset 55
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#20
// Offset 59
STR Y20
AND X17
RST Y20

// Rung MPO_Program#21
// Offset 62
#BEGIN FMT_COMMENT 
"Once inside, turn off the compressor, which will shut the door"
#END

STRND Y20
AND X17
RST Y17

// Rung MPO_Program#22
// Offset 66
#BEGIN FMT_COMMENT 
"Once inside and door is closed turn on oven"
#END

STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#23
// Offset 72
#BEGIN FMT_COMMENT 
"When done timing move to next stage"
#END

STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#24
// Offset 76
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#25
// Offset 78
SG MPO_Program.S2

// Rung MPO_Program#26
// Offset 80
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#27
// Offset 88
STR X17
SET Y17

// Rung MPO_Program#28
// Offset 90
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#29
// Offset 93
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#30
// Offset 96
STR X18
RST Y17

// Rung MPO_Program#31
// Offset 98
STR X18
RST Y20

// Rung MPO_Program#32
// Offset 100
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#33
// Offset 102
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#34
// Offset 104
SG MPO_Program.S3

// Rung MPO_Program#35
// Offset 106
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#36
// Offset 114
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#37
// Offset 132
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#38
// Offset 135
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#39
// Offset 140
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#40
// Offset 146
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#41
// Offset 150
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#42
// Offset 152
SG MPO_Program.S4

// Rung MPO_Program#43
// Offset 154
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#44
// Offset 162
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#45
// Offset 179
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#46
// Offset 184
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#47
// Offset 190
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#48
// Offset 194
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#49
// Offset 196
SG MPO_Program.S5

// Rung MPO_Program#50
// Offset 198
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#51
// Offset 206
#BEGIN FMT_COMMENT 
"Turn turntable until at position to saw"
#END

STRN X15
AND C800
OUT Y45

// Rung MPO_Program#52
// Offset 209
#BEGIN FMT_COMMENT 
"Once you reach saw position, activate the saw"
#END

STRPD X15
OFFDTMR T103 D1601 Y43

// Rung MPO_Program#53
// Offset 214
#BEGIN FMT_COMMENT 
"Once done sawing, move to the next stage"
#END

STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#54
// Offset 219
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#55
// Offset 221
SG MPO_Program.S6

// Rung MPO_Program#56
// Offset 223
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#57
// Offset 231
#BEGIN FMT_COMMENT 
"Keep rotating until we are at plunger position"
#END

STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#58
// Offset 234
STRPD X13
SET Y18

// Rung MPO_Program#59
// Offset 237
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#60
// Offset 242
STRPD X13
SET Y47

// Rung MPO_Program#61
// Offset 245
STRPD X14
RST Y47

// Rung MPO_Program#62
// Offset 248
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 250
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#64
// Offset 252
NOP

// Rung MPO_Program#65
// Offset 253
SG MPO_Program.S7

// Rung MPO_Program#66
// Offset 255
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#67
// Offset 263
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#68
// Offset 268
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#69
// Offset 273
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#70
// Offset 278
STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#71
// Offset 295
STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#72
// Offset 312
STRN C801
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STRPD C1610
COPY 0x1 "4 0x0 1 C1621 1"

// Rung SLD_Program#8
// Offset 33
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STRPD C1610
JMP SLD_Program.S2

// Rung SLD_Program#9
// Offset 36
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 38
SG SLD_Program.S10

// Rung SLD_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 48
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#13
// Offset 50
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#14
// Offset 52
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#15
// Offset 54
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#16
// Offset 56
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#17
// Offset 58
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#18
// Offset 63
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#19
// Offset 65
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#20
// Offset 67
SG SLD_Program.S2

// Rung SLD_Program#21
// Offset 69
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#22
// Offset 77
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#23
// Offset 83
#BEGIN FMT_COMMENT 
"This timer gives a delay for the color detection to get "
"correct color."
#END

STRND T200.Timing
OFFDTMR T201 2000 C1601

// Rung SLD_Program#24
// Offset 88
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T201.Timing
JMP SLD_Program.S3

// Rung SLD_Program#25
// Offset 91
SG SLD_Program.S3

// Rung SLD_Program#26
// Offset 93
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#27
// Offset 101
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#28
// Offset 106
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3200 0x1 10000 8000 C1602

// Rung SLD_Program#29
// Offset 111
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#30
// Offset 113
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3200 0x1 20000 18000 C1619

// Rung SLD_Program#31
// Offset 118
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#32
// Offset 120
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3200 0x1 24500 21000 C1620

// Rung SLD_Program#33
// Offset 125
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#34
// Offset 127
#BEGIN FMT_COMMENT 
"Increment W counter when W is in color detection range."
#END

STRPD C1602
INC V3202

// Rung SLD_Program#35
// Offset 130
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 3, jump to S4."
#END

STR C1602
ANDLT V3202 3
JMP SLD_Program.S4

// Rung SLD_Program#36
// Offset 136
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 3, jump to S5."
#END

STR C1619
ANDLT V3203 3
JMP SLD_Program.S5

// Rung SLD_Program#37
// Offset 142
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 3, jump to S6."
#END

STR C1620
ANDLT V3204 3
JMP SLD_Program.S6

// Rung SLD_Program#38
// Offset 148
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#39
// Offset 155
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#40
// Offset 162
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#41
// Offset 169
SG SLD_Program.S4

// Rung SLD_Program#42
// Offset 171
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#43
// Offset 179
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#44
// Offset 183
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#45
// Offset 185
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#46
// Offset 190
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#47
// Offset 192
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#48
// Offset 197
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#49
// Offset 199
STRND C1604
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#50
// Offset 206
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#51
// Offset 209
SG SLD_Program.S5

// Rung SLD_Program#52
// Offset 211
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#53
// Offset 219
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#54
// Offset 223
STRN C1606
OUT Y30

// Rung SLD_Program#55
// Offset 225
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#56
// Offset 230
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#57
// Offset 232
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#58
// Offset 237
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#59
// Offset 239
STRND C1607
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#60
// Offset 246
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#61
// Offset 249
SG SLD_Program.S6

// Rung SLD_Program#62
// Offset 251
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#63
// Offset 259
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#64
// Offset 263
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#65
// Offset 265
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#66
// Offset 270
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#67
// Offset 272
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#68
// Offset 277
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#69
// Offset 279
STRND C1612
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#70
// Offset 286
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#71
// Offset 289
SG SLD_Program.S7

// Rung SLD_Program#72
// Offset 291
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#73
// Offset 299
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 10000 C1630

// Rung SLD_Program#74
// Offset 303
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#75
// Offset 305
STRND Y30
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#76
// Offset 312
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRND X37
DEC V3202

// Rung SLD_Storage#2
// Offset 3
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRND X38
DEC V3203

// Rung SLD_Storage#3
// Offset 6
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRND X39
DEC V3204

// Rung SLD_Storage#4
// Offset 9
STR ST1
COPY 0x1 "4 0x0 V3202 MC808 1 0x0 V3203 MC809 1 0x0 V3204 MC810 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

// Beginning of Code Block VGR_Movement
$TSK VGR_Movement

// Rung VGR_Movement#1
// Offset 0
NOP

// Rung VGR_Movement#2
// Offset 1
STR ST1
RANGECHECK N810 0x0 8000 0 C780
RANGECHECK N811 0x0 1000 0 C781
RANGECHECK N812 0x0 1000 0 C782

// Rung VGR_Movement#3
// Offset 14
#BEGIN FMT_COMMENT 
"Set fault state if out of range"
#END

STR C780
OR C781
OR C782
MOVE 1 V801

// Rung VGR_Movement#4
// Offset 19
#BEGIN FMT_COMMENT 
"Initiate starting values"
#END

STR ST1
MOVE 0 N813
MOVE 0 N814
MOVE 0 N815

// Rung VGR_Movement#5
// Offset 26
NOP

// Rung VGR_Movement#6
// Offset 27
#BEGIN FMT_COMMENT 
"Set Crane Rotation Direction (Encoder Values decrement on "
"CCW Rotation)"
#END

STRLE $VGR_Encoder_Rot.Acc N810
OUT C411

// Rung VGR_Movement#7
// Offset 32
#BEGIN FMT_COMMENT 
"Set Crane X Direction"
#END

STRLE $VGR_Encoder_X.Acc N811
OUT C412

// Rung VGR_Movement#8
// Offset 37
#BEGIN FMT_COMMENT 
"Set Crane Y Direction"
#END

STRLE $VGR_Encoder_Y.Acc N812
OUT C413

// Rung VGR_Movement#9
// Offset 42
REPEAT

// Rung VGR_Movement#10
// Offset 43
#BEGIN FMT_COMMENT 
"Calculate Rotation position difference"
#END

STR ST1
MATH N813 "$VGR_Encoder_Rot.Acc - N810"

// Rung VGR_Movement#11
// Offset 52
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Movement#12
// Offset 67
#BEGIN FMT_COMMENT 
"If crane needs to rotate CCW to get to target"
#END

STR C411
ANDLE N813 0
OUT Y27

// Rung VGR_Movement#13
// Offset 73
#BEGIN FMT_COMMENT 
"If crane needs to rotate CW to get to target"
#END

STRN C411
ANDGE N813 0
OUT Y26

// Rung VGR_Movement#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calculate X position difference"
#END

STR ST1
MATH N814 "$VGR_Encoder_X.Acc - N811"

// Rung VGR_Movement#15
// Offset 88
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Movement#16
// Offset 103
#BEGIN FMT_COMMENT 
"If crane needs to extend X+ to get to target"
#END

STR C412
ANDLE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y25

// Rung VGR_Movement#17
// Offset 117
#BEGIN FMT_COMMENT 
"If crane needs to retract X- to get to target"
#END

STRN C412
ANDGE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y24

// Rung VGR_Movement#18
// Offset 131
#BEGIN FMT_COMMENT 
"Calculate Y position difference"
#END

STR ST1
MATH N812 "$VGR_Encoder_Y.Acc - N812"

// Rung VGR_Movement#19
// Offset 140
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Movement#20
// Offset 155
#BEGIN FMT_COMMENT 
"If crane needs to extend Y- to get to target"
#END

STR C413
ANDLE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y23

// Rung VGR_Movement#21
// Offset 169
#BEGIN FMT_COMMENT 
"If crane needs to retract Y+ to get to target"
#END

STRN C413
ANDGE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y22

// Rung VGR_Movement#22
// Offset 183
#BEGIN FMT_COMMENT 
"Exit Conditions for all movements"
#END

STRLE N813 40
ANDGE N813 -40
ANDLE N814 40
ANDGE N814 -40
ANDLE N815 40
ANDGE N815 -40
ONDTMR T50 500 C499

// Rung VGR_Movement#23
// Offset 210
UNTIL C499

// End of Code Block VGR_Movement
$TSKEND VGR_Movement

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"T3","T_HBW_S6","",""
#END

