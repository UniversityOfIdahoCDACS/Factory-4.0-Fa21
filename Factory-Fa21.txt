// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\hunte\Documents\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
cfe990825418f6fd78eb49d470fb911b9003efd19d4fcc13ffe9509c956e7bac18ded7a63f4d4de9
c673dc5534097f64ca4ef65df99a33cfc3a93202eec8878cfefc309cb6251f4f0fa0b9be3cd9aa72
0dfce1a1188034b41d8db57915cb7814225aa93629753b5f488313ac97ed491501ecc1782d9ce230
2b7137fd0c08f41a790666228541cd6800f7c69e87251ad52802bb56f160f1125e8c9294856f9614
0ac29e6c03deb0baad83344ebca603ca628c88debac1786a1440f1e284cc09b9095af9bfb38ba11f
a8cf211236598d8a81e82118628746deb88cfe9bfc83dfb17b1a1a9d027b94e71aa4e8b77770be96
6db5808d74109f92c62a350bdb96f225eb3d1a94ab9670cf4ca7002e8670c49395a4d454a6a25a1a
83a5c099f8f2d0516a7cde1a79cdaa5536ef00a7ee3e03a27d63253ce99d0935cb9d2a5a654005c1
f295c1bccb02b016e02b87d7c05040a6fde79d70d67ef6bd9ec1ccbc252c504986b0ee2892e6421d
d06e04dbe069b30c752ea99e09dfb55f06313066033a8c9f0b782d15668b8dea00a3804ed7f0a938
033feffd27b3a578a6a4241819b70081d6c4b2676d6e254c23151f7bc273182a1075a9a67c9fbbc3
3ab31d9ba1db9f30bc592bdf99bc169b2b1a7a48f38189c66fbe5e7a235a9c447c60338131e12abf
b75d260ab90cad2e64b6cae2c90032ffbd53e66e1c1f2001a6a648915e46c868aa68e1e0fac60790
78679a0649a55297e808ef5d9f095c3dd5b7cc2025fc21e74e5c1f86c6c3ff804226d4168eb8645a
c682dddb0471d175b2ddc53f36a39b4c91ecb195ee514d50bcf82490a13e191393e7592a6fd63087
21b6f9090baefb9cc17329205af5e9d87993aaadf29b0dfa7a5543d912aa6d7a8c8eb49981e135f1
e1a1898a7da06ea53bf1c5905887a54f9f4bfb375f49180d40ff7b29f006067a3ccb1abc477af5c8
baa9138b0be128604250b805030bfe0c60eb2dc4b8d776cc64f660b5a51da107dfd5d75d8a98b4d2
4957a2bb66b8ed40a30168d113752a16048d284a2d34f9e6da23a6b18273a60ced2053679d100a63
d4ecfb4d3ea442652ab8ff157bbe7838245079f437e1e68698489970bea0aca96fc031a801799295
5b37776def5eba61d6971b5bc50cbb99e0c99284cdf9c45617f41bf24e817df16296659a2a59cab6
60a74c2b8ed134246b5945368e5645a609c0f39810ca0e43b62b7cecd3af4ebd8e6549f341bd37c2
c2dc3872013b5e2b08a7336d4da464796b79f989a0a5000adb4cdf90956bebdfac4e95367733ca8a
1379f1b9af90a94554986f2b7ddbdd6592c52ebb21b7fa8b599a90f901a289690f3307e48382a559
a10a9a90c2443c60b9e6a31c940be56818f1e44293e712c6937a873e387cb5ea7b3f8fcf797e1792
d87b97934acd8c80adf955ab359f2f265b41305c6e741bf798eccfed8402be6a49edf9694255492c
e6c7b8b2b2ac36650b1f834a712579943058a159b24de531a131de53194689b179f45ed8aae4ad1b
a81027138c30ca9f5d0737b7d931a72483d7aab7ed090d9da8bfde3257c3b1028908a3ce2a74611c
d6cc81dc4021ff0d4c937d5018d41f193142091aeccc3f3267a4bb2d06c0c6ead58dea2bebe06c75
0fd1192c0e9ad691da16c90d286f297c234395acab347c45faed888a380e9da32d4dca7e1d29c7a1
38d45f73685de63dd98b57b86fb24b56ccc88dc061cc76b3afd8ffd7efdc428e33ec8d191cfac3d2
0de775ca5b46619aed34816e90fc3352762a06c582942739be7fea959b38f25f7cd52da7f256bdc9
4611e63da1a44e12409108e42be3602f6607e71080f47b2cdb069a9f75297baab7154fd6164912fa
170b258d6d53f59955717489a463ba2c5770834d1a87345d76125d890112091b2d0abb20bc8b9e56
a7fcfef5e3c29a939257d05d79d088d266ddfc9f98d706a8d13c8ac9b6d0ed566d18218edb176045
8b444c06b341767bb874769f6fda620ebbb1bc723caae0512d2a81ba5e93abf59c364c595f0f17e9
8644fbe57f679d134187629b8c08a26e287945178d8814efaaf3abc39abfae1a44ddd1f397b80cda
55a655ea289c91a04a8195ad2ec2d79fd45c02090c4c611df93329858d1a087e5dd207e2d44c62a4
9a4aa018592052c20ef3643f16689c4ecee7d04aa2a8aaacc885f63c616c3262406665877ba92dc4
1fd1714f4f201205763c22740ae9bf3834e51f70072909a464d0c687cca5caac3b16eabbcd3eff05
3570ca7b58dc6ee008d90fa853e6b67dc2ea4c4ef9e9d7f944cb874498a68ca016703e4fc1e72f64
edeedf2a939b4c0a74ed7e17771b5dcec5179987178761dd8d143f99e5f1bd61774e971d142da5ac
f22cfb047588a8e1909a666b0c25b8a4e9b4c68d0f1b67c9420f569318117e42fae7059f1612c2e5
53a84efa34374c3fb01dff745b6528b59132fdafd10e407d08f3cd9891a2a93538900b363ecdd980
4bec00aa8b57468b14667e237b12fbdac4168044b2fafd565b3585c9cce09ae085f19e48ad9212fe
a3046828744bd54f658e5340a9ca22a0063ac2d41e384cf32b82e9f6fb08f2b7b53e4b47e4eddef4
af98eb882622ac179973d9c5cbdaf6821d45eee54341c4d4eac4c14f23e33f012b20fd76f9b98991
991c6a329f3fa1f5252aa79103c2ddd995ba01257626a2c40b3c1073488a4f6d54366db92d62af5c
97f4df7c8061d5317013e9e632587238967c4018a687a823875877e180e773164838202ccadd296d
4a3330aae65a972659674c0a6632d2d00fb177c8da45f68776f2b8280d6454158eaa4224131d8044
a4a17979cd1509255055e3f6ec29461312752d096b122b5376c4c892df9c4d618e686664f8a7f093
8d77ab8b6667a2f1ee00ba81cd9f856192250768a4e798abc52f1193a0f25dd6be7621ac99574bee
c6a5023d7c1ebe892e710cb7b899c987fb85d7053bd07e3c3e64130e30d41ba877eef1c31df61dc3
fc38ddc54040c6d75dda97f3af8f49ca5b9e5b3a13b1985f11fd3f8bad64efd01ca1c4f0ee15326a
2cf8873c18b47920270c7c847e3afae5ab7c5fcaef682a819a7a21c413f9bbc2219e3c0ffd91390e
e13eb2aa9a71a6b6d44b41ec83bac96b87b3942bc651328df29bcbcddcbbef233ab8ed895fd1a52c
8f1e0ac4b300f8a9befa03628e78713537bde750f59719a982191158dcbe280572f5f5153a80495b
adfaf511d1328db8fb966a869fcd3960bd00ca5bfeadc57b4f1744edb4b1e6bcaf295e40821ffce4
e89bb089f40ede035c23297aebfe55ef000f44e751cc69fecbac243c7cf2b08f6b5fb64fef81b8ce
93187c737b39a4e5e781c1f6b85aff668a8026320c6c8cab69ccb69fa40e1b14149ddf3ad0c3c430
f2d4072754efcd98e353bc5d944ec11cd764e79de11b5a80603e030442a2cb8da5849287b0deb81b
2e9e68e244dfefafd47d9e1572834faf66bc33d0bb4314893a739250d06e3b5ecc54256338703783
0f574f1967acdf3d8ed8b9be4c9f54a5b69bb082ee29b6b52cad68e137d5021da7dc03d57e844d46
f7ec809fd3e6a66f4ba9cf2ee2d2f701b2cb8e73f82ecc9b86880945d3860def88499648ea1d83e8
968ccccac2b077ebebb232bec15e4ccf6056e01be63e56d77d7b458641b9c39d61f4b4f092aca8ec
90336731a6f5b2e679506fb05021b2595de0203bf83fc7e26c42a58c783ac337a59aa0878e10a7a8
031fea9cc216960a916208daceebe9f4ac2aef3ab0cd50abd8dfad57f74b45d792f2fad5e111edb8
3b57b2aa5adea3219942b40f491ec308e9db4f8916150c8e6bf5b4508c9f29926cb4dcdd7076dbb1
c584dc82eaab4c5e8a324d07ea093c12946b56bee98cbadca27dab00aa63d4647f132c61f9b0c1e5
5645a55570efefb6b634d1f21a4da8b1bfeb34e249fce5ee5e45294e82b1fd3410f28e6ff4043109
5c8fca9fbf2669120be6e94bf739a8d9ada58abe210d70bf4e666b9b7fc294f5f206d544e692ccec
7e71c53380397c4969f0bf849fd2bff7270793e2cbc317df11966d9e22d3c0edecae47556d382b6e
d36ac91d8d9538f482e775ed9c17a7bcd08fc2d7dc6826a1e76e9b08370d6a621ca66da7c323f949
8c8bf63aab79817ebab184df510fe86a20471efb68fb3b8a0149cbe98107f57485df0075f1843dc6
e7aab03d616c31391b2c5e38eee20537d865a41bd05c6739659fb1a3aac3d31834aa42de53df2f32
fb5df8073f6677075139e9aca905261223dacc9af65457258595e1d29c8935ff44d4867bc801e74d
dc94292f6929406ad18a162174fa9cd81f75f5e0a236f867e39ed2400278e7cc73a236fd816a58c3
2533316cbf2022ebef219ea228514a70b638a971ae67283c562aebac9a5ed3e696c3fce2c9dea6f3
2065c845adf297b5d300fb13efb1364f16fbf76d92372e734a83690dad779ff187eaf85f46b98ade
1deea1a3cbcc36e9506b62c076a0136a2f820ae2bdd8dc6a4f6f3c23271328213ebb1f453fa132fa
cf20e9b3b20eee5a6a1f633d311ef076aa49e8ae872c88cd397716ce221e88967605a7af7bf9bf79
6409666bd012dec2a1c4fabfc28e7448937444c14f845abd343af79c480e7e65d8d0a79528ae18cd
9df212d145efbc859922a05d0da8d0069908a55f892e896179a1126c3e9df66dc325b05512137b42
ab5be9c439fb1ee61ea4f38da05e69caec19161ff2b3393e4e25eb91ffed378657f8f75d70874a98
cf7062791ccde36ac9468943f5d156936c85d5af4034a9e27b6865a95155c1bb3701de96ff5df754
bffee98e05e7a06ed215ede97ddffe4c4b6bc5843c96a2d614a1ab13b686f27d8fe4d33a6afe738e
53a80ce771b06e4123a9316980f28b84d4e7ef48243a6a0d127a215c5f10c6f6bb7d029a9184ea2e
ded1d3e94f8ff54607c2dc21c4c3a51344f3b0bb7cdb535c5e649a25103e984ba7e934739175da20
e0d81fb833f9cfa764515e997d9ffee4b653ffcd9d242fdae02e0c70c0dd72a45bff871ceb73433f
75edfa0c5bbe78af2ccba5d1e57807d17443299cfadaf0aa782a5e6c845d78a33ae17da580a7ccdd
361da79affc6c7748b5d086fbb3d3754a492e8f5b54cd05289d7d2493148d12465aa069d4cf9f412
b229b0f261ac31bac8ce0eba46459c3de5f1117660e0ff2e5477df2d057092f2d11513d5ff89bc6a
01fc68ef9d55601d6767360944381d759ecc4877aab6631b73cd882e1450a3649ed1b808c1853905
aced6d4134f6a222754786de71609ffc8deee8b3298d3aabc58687f025d2050544b42c86e2332b7c
2ab061a4527c1c3a39a7d16125f33326a9a359eacd86aef248010039774ffb760581b6c806fd1224
f26481ece6c749f9fd672825306606cfad5c6eaa73de9d0be6802aa93a90afc35896c4c09747b15c
098d0dd1784de615b95fde29e10e3e2e6d75ec0c41eaf2decf671578eb3a771266c22529d317d20f
71f1aee46d5171c6e5671ec1020d3f20dd3ed7dfc81847ef078126f2ffaea86c7496bc1798eabd20
0084bcf49dfb703f55722fde064a24a7cd6d4c48852de4150748589e7b784298b492ace949a346de
5174edfc5d117cf8c039fd7a911fee051f08933d1eab27bc73bf98beabc1e24361c82fc372302df9
8590323987436246fa7ab9c1157d7cbd88ef4c32885745d3bb4fcdc2a8d2ad79efbadd90df0df272
59677c5336a8ca3a4856c6474160d9d75f8e46ca4974ddd0c4c93c1757f331231770ff7863fd7c2c
626df7c36fc1979efcc8e495651643c57e2035ba9cdcbf8989681558c4441c883791d07677816a30
fad893e253f5f9841b47a274f412dbe959563f5d8e351831aafbdba240a22d97a8d5b927e5ce959c
22bfc353cb3d77d679346a39bf5e0586c394bffc019d2cb326b27133d5a4e4c24e6dd95d9a303165
e925b84c2ee3f8c894a5d7f48e2fe53dfd2b266dda81feb2971e1a9471dae09be5591c2b8522a434
3f228a6f3bbc99cb4c3ae0d00164600fca7bbfaa099594550641a445f4f5272d5ac677a3c4b25c98
8cf4c1b66459219c419db311d0725dd04e6dd7a94e6b369244b54bc171c7996a41d6e3814927d236
361946c44cb7051845a4a2ae8152f67862d2b1220767470a4fcb75f1dacda6fe2ad94af8a09c35ba
a89c34a3e97ae5a988164b8ff02c85ed7e51fa527ec88d592e94ea595f52971d607f5a81161d1416
75d87dc70397c5a4fc85c94c296ed1ea69fc8a723520c1838255f9403cd417eab8be4ae0b51878c2
a1e14ecaf933f58da6b919b545b30e435864cc6b4d44c757a18e01a6a7e57a50b803ed60d2329269
9f30f310315d57222ad2431a86b09ecbbaf1e80a2d6fe208329cde541f7d13114bf524dbf8a41df8
1920163c290334d5d274293233e9a1742876ab2119607a9865cf5994776007c233862efc303173ec
01fcffa38c18d5a7003f8829be5f8807b98a08f9a89a48da2edd434f8952b98d9d9f7f69053830c9
835e8e57c1c3680d51e8ae1630866c45c8d833d38d4245963f39eb8034289cb86334969803ca3e92
f0d96c785530d830a6c42f994c6ac72d3070c87f3d36327a5caf3a2387f7791b019ffc7df6d80826
06a025a7185a9b5c0e72d7ea509cd1bbe3f7c8291e6be06d435fd5bc3eb9b4ca7a34816d13cf2ff0
4ea756fd4e896befa7ee6513a8bdb3b988fc33dab3f535397074f36e06304cda8f8b19588c3f28b3
e4740b60a11c64946838f30988a2139ddef1d7042e45e416d3a86db805d4f4618a309a0e1e1c8a6f
344db52483adf11dea1a87ad06dbc831718111b8b5d3632fea295232027b2e6b9df498cbcdd48922
d510f54b9abafb1c26950111d345a073d639894520d636d16531804de0159bda7076c4d4f1a37b8b
304851074b14e445c67b0ac62320ced96150b491c52c516f1e88c7c3513cc2706db5332674fef35f
62b537fb4aa200df4da206f457acb0283869b19b33948843347367dd17af0f3d02b539c255a39e95
3bd6874cd97baa8255c52f5bb3129ba3be1978f2a6edb6b48a1e776a014593ac00ce7d3b864fc1d3
5aa96032a8361349884063bbdac237355dc8ffdba65824980b53925ff34fecd9a6df3a755cad560a
cc38188de2692dfe909a9da3b7e749a6d6722d8a7fa49732f37c5e8887b564d4b3d39176b24b23d2
7ff9e975a7a3c5de1429bcebf118d425b66d2738b36b6f1e3e17ea96ac9444805cf31c4786247efe
0e98e2a4256be8c792e8b61150c6ca671e53f5807d518bf2520953be61576105af4995e6132833a1
a0a1d9a02d28207ab57f1208659bf96bcfa17015807770d2f4f15e6f278aa49901ff703ce0559abc
c321176ad7c778eb98982064a7b24e9faacd2d75118d1977a61e413cdef907cf31570463a6f51ac7
22f4f2fa32ca78dc56c94fd7b5ed5cf28bf64e61f091c83e714ae0c9bd66386ddd665febad0f0e18
07d4c11f58317fbe67c19d1eb09c1a25007484744f282204990d29695216f4c9ebe5ae7b592dff74
d2bab9fafcfbe4d0be5ac758c18fa196524beb5abed321301fe053b6bdb39c2f750d41dbfcd3a98e
da86319fe21bf66ee293273f7189c1dc23ce5cc36471aecd0ed305657d0a876d6cb04a67b7d7e800
9e0e9fe47ba8be9c670427e508102558587c6f970027e96b3cefc8ad174589e8a64d4718071841c4
911f6e3142b99eff924fea9d23319e118ea181a81576e3a4ff414c5bb430aa29122c5e2eee17208c
6751cc1a2a58288b9719233f22cacd462bd02189cae8905d403e3e8ce2cb31e82caa4827e83e5102
2f60a252c69179a22019e75322342a476180d26de49c3a924038628174aea1e3c107c57b1501b126
0443d40f6999996defa85269bce0231f7af37b4d4de59fcfcfe4cbe98604aa63aadcb2f66c1aa6bf
be787d610676ec06a08af0ece22095a0a527ff01d5829cb88db386650b0387c4b2265f30bd092bf1
b0e1a0820efdd2d6a1a45059d5331e102ca66ffe810af0322a3491c222126cbd14a91d2a4b0c925e
63e24b85eb584131195887226964029fd92c4612d697b2ba91c3b6a1f50727282ef406d55a397308
c98ab9c39d908bcd64ae4f1412586ffb4281e058d60336f4a7ecdf91653a65f9551a0f29257031f5
38791901a6d2dd7ef258003e4f10d460438c20c320578de38eff59b07e1f677ecb2920c7b564250f
c375c63421fc16b3183b25a0d56fa18ad7bcb4bb4fddf2bd2fc65cb9cc686feb327415907133aab8
a92268bbeb11989b4d2836428e8b07631d09bd1d861fac16e049c77c81c1a3f4dd926b04e3eed868
02ccf306298f83f867ab6af4c253fec3e56f354178b584f449f77d4a27917a92c1565887faa40241
edb4cea1e1a2c8fb5aa50fb269bf7fb8bfa5505b1eff67d0a8d644392f4600953945a383c5da3fbc
5572a7c56065cc22398799b9cf817d7dc07cbb1e78e1ce725e94bb8822f539796099bfb9dafb2a3d
02cc2991e02f03de12a4895b15d62ee50467a9b3477e646df3c8daed00f87d9a08aba8c6aad93692
d3404785f3c16999cd20c4d8a512c31916cc2a30c7d71698daf8cfb68f7c391b7cff0ec5fd9497f3
caa17bb0703955f873eb2b03ecb47feae85c57c582546f4e1ac23e13bcb1c69e4e9854009315d014
77e03588d6bc0df3a82c876dcaa3b3d82e82845eaa44356c77e9152d54d3d422bbf79785f9433ba5
df8a6df12f54d4074ef5f7e593faa3d8452480938183115d629b01f070a5e4801f71a516a10a9242
a34cbe95baaab37e4d794a7dbe9d63f271b4c09e3911d4fabeeab26f7cf9ce484d766d03cef6a409
9b9fed0771d3ccd870dade15bb2912df026d58520a17b7993712bace7a903ac70ce3f765fe04041e
f8ea7200a58458cb53758c3b75c76fcd35c40e357110c07f4896f95938fb4da4187e7470ef790af3
2a37c801d2eb8c519019257e430d3678f3b669ce604796a6cb317b272562eeaefcf4c28ff261fba8
4396290abf48221f200e21a7aa47e7605238fa0cef3ea75443fbd67616078f4b74490406d74e8f09
660a79560ff001ea0f0dc7efe8eaa95661f93746d13292650b1e5236a6c74edbc8451cf292fdf6d6
d7f982706033495450f2bfac7ed1ee471d95e0429676ac0d2d2d5953eff6697247c6547e5f11eca2
e6357528e3c673c6a6cbf79eebc7868540ee8cacabcdfb5275922d0789acd3164fe925245fceab7a
f4b8abcbaeeb862c4c680520765c34d29af00be3e0f022baa37488f9eaeb893b4bfe457f54aa9f23
57ae3803662f05a231422e2397d0eedff4343baf27c034965556cc305ecdf9e86722ef77a9d95196
7c1a5785b5faf9fc43da42079b02717442320080c47a7bf475057e08a9a9cf52a0d8551ca0a0465b
e8d5b127658c82ea744cc3ffb9547942c2553b3af9d4172c4cae55a5dc368df6f15a2a2cf79d4c6e
8af4a314573055ca0ee5408031d7d8a4f4c6619ea75f9833db06449673000390acc261fe1ba81082
d6a6d33104a4330ea6b0fdddbe164ab5890b775211f2f291bcfb8b009ab1e6be542f861b72c19b53
33971a1450caed479d26f2648778194dfb9fb0ad6d0d35b51f1b8e2386df13068d6da25aed18b5cf
49ec53d9f23c77e06eaf12ce310d2b61a114b949541824baa38463356a2c30568db36f6c7635e802
f1c00f92cb6a0ec2678cb2384e0965caee290b40257c275523c1e4003873cc3094d591e084d3f579
587b77a0928015df8284118029ea11f91166d91236d683752e433e28a5549856fd3da7a9fc22c539
4b3ea0f2b04963b6d272b07ab6fb3a48cee0114e323f74a772d26f1a51536b8c1de338a69efddd2b
44c9b4b90e88a5c83e72df81e0833177c0073ee0e0fd2feb909486ab5d606d5ec20e2a5cf9cd57f7
79031872234d03f6ba64bb024b78cbbce9168ec03ea7d4f791611cd0720b243598cf2d60d7845617
2b454095e710e39d5d37837f04610aa9aad530bbfaa6219fb3457adc80254ec7872993dbe07fd5d1
a883fe6df4136acaf55f7bb4b3baac64f667f6887f82fc5a04e334b4aafba8cacd2fb2af525d1ced
838d0f6431f1439edfafaa96a8c263e7adb85c2facabe1f891a2b29924f1c850112e2582c2e71ea6
4daa0385305fa9d6132415f73ebd8bb39fc4e0361a18c201d64f107acd7be7561d53dd02555d61d7
2f1325887f0b89d36e2820b7c5aceaecd34a56026e3c46eadc6866b42326d1d295dc552cb229d754
778b974ef99da7753472bf036db829c66c42a54f6400b05dc4b7e200665dcff52509d6d86c6629f8
d1e7698cb184f351410fa6c28477b57f30ff285eb8d25e6d687a16b4edfeeb592343459d0f6f9bfd
1bdeaf90ecb917e5e8701c17b1cd0c4a763adeb344c97b8eef35ee30f7648d67c5bea8d46fe4910e
0a281d0b3a9047ad9dc52c8e7fb83fd2b70cd6e7b307892ac708f6d3e9aa131da6ce4a99d142393f
14b01b86879da5dd666317e28a84f713498310b8b9d8aa48cb9412a5568e83d7491d26fb34fd70d5
bdf86317d03585fb2eeed8f55aab5e3c58385711ae0e5bbd9d61233767b086d723eaee7734640e59
519189fcb5ba893d2a171288cd40b69939f8ddf88569cbef12f1ca1e6b21057d2ba564d816595e18
280c76558b5c21c567cc22c3707334e07fa60569bebf0edd0e7a54bfd018baf5b5501e0a5c49736b
7737376ff7fdcf6833fab15a55e8a4c82a6db9a8761bee7eef31d3b826645e0629b29289f1ab5942
9f18400d52bfc56a2e886fa94585187d22d4f956c854a2bda4fa1b39da58efeac3112967b305c888
8d18c6a8fc94207d2fce8357368bacfed615420f66a3f71f3e369308959cde70caad9144a0838749
3c53d7652592e3d1629f71cbe6b504f1cc556edca674f80162d08185ca2488323650adf3455afc86
e7932cb6aa7cb862776526f37d8873ae48dc67fe8a5438bb217eadeaaac99ee35f122338cf06b1be
019120e2c3b5fd400899ef4057efe09d351a949f7f4a791627c55f0dd03a6a6da487374eadf16707
900dc82050fd1fb4b473d98d90e144c9067a5e76e8f59e975fac3deab66458f7e85cbc1c653423d2
906bbe8b45cc88ea89f2b781471bfd8dfb0fae8cdf2cfeecb8e6ef935e2357a41e34221276f504b3
881bb563c9762a68c20fd5f32a308848a237c340ddb99a29babb4b674dcbd9975271921b870924d0
9e5e67a6ce0a5e8a4c2498d64f554da0336884d1bd52ff51e39e5c0eb4cb1d4364bf7d731ef64bc0
1f67d5a530ae18fdad9727da11cdef63273cad54b455b0420783dcae925441be33356af8448ef848
45dc73ad1c465227acb820cd60c87df9c11e545f1cbbc59f35f80c37abfcd3af8bd82f2a33d785e0
797ed10622ef5028c22ecff91c3c833198d0582dee1b4b6be89c44a0b240b3bf53b4a21264e9c43d
4ab6a2c3a806a1c62dfe24f564105d09c5078c61048e87df22755ef30cc0d417c34282d7982e5172
6ed2bb8ad08dce8e56ba02203955a1f1cd878a8134650999c67ac85116f4a205fcf10403e1c23b49
18a72d4ada6fe8393204a853ef2e162ce5ccdbf221295111160f5c7391d1d815072697b82c29ed44
fba898c41a83d2d48cdacd78481e778204c8e91520465103f88d4013bd59c762a3f185dcaa54a482
9fa3eee62d9f0df221f067ee0a4e5ce0c589b8db60969014b9790be50f4c15cc94d1fb5e36ab7cdf
dfaff30efc8927817121db06cc6ed90b625342cdca7bbd4fee71d4f62f722ebe4c6de017e52c194d
72df32454f255c3488b1e8672352e634ad2be23a9350fbafefe838eafcb8afb4a9c37f6b79d53a43
3ee01d4afc08d42b2a491920301e4f0e6d5e7a7a92ec7bb76c7afb314d3af86506dd7fe3914fc158
a792b271f9c3295d95a4f589f1b2cbbd467f7afc737445261cb2175eb414bed7278f1f4bc557ba27
e7ad8c06a3ef3f33f58ff670e999e590de5206d51b4461f9b86b28616bbaa243cd2cd163b581d8e4
fa29c365ad39aa0fcebc2e6229852f80f610fba40c07c435f8a58803d117366cb4d750687f5eeee2
61aafbee0c1198be22fe05472cb145e87d75bfd4cbf824e583ef0966b1f41db98c7e236c1c052700
75d2f652c34ff83dc00ea0c633e66079b3c622327e49906fc8dc1b9fd920f09cf3cb32544aba3626
47d68a2613915e86aff41ea2c1d2ce22c500620371c2d33db5a0651dea6c54ff4b9462d13f1fc13b
28a5ea0572142b4a43f15161e5694bae73c2c3737de3da349e159ae716ae665c8260a9a889eefa2e
6b86cca4e73b5d586fc834d92aa14d11fd81fa5bbd4fc925d861f800d56d3835da54cde4e5c71266
1f93129161d79d3ca69a493d1961ad47baf75feff1cf5ccb88c85a4985a9da084f711bdec5454eca
f9d3f6d48181f3e4417dfa4f90fb0033c0a796d4c9b4f9a29e457a05cb02fe38de8e2d88eaf7a9c0
47244c1b2f9475d83c812c83a519b0ad194adf3c301bd4fbc288e052b1aa9c2a86d6996b710d17
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
 HBW_SetTarget_XZ <Virtual>  0
 PID_10 PID  0
 VGR_Movement TASK  0 -1
 SSC_Check_InOut <Virtual>  0
 PID_11 PID  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 V801 MHR799 1 0x0 C797 MC397 1 0x0 MC250 C799 1 0x0 MHR420 V820 1"

// Rung VGR_Copy_State#2
// Offset 43
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 C810 MI502 1 0x0 C811 MI503 1 0x0 Y16 MI500 1 0x0 Y43 MI501 1 0x0 MHR800 D1600 1 0x0 MHR801 D1601 1 0x0 X24 MI504 1 0x0 X14 MI505 1"

// Rung MPO_Copy_State#2
// Offset 41
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 MC808 C1621 1 0x0 C1621 MI808 1 0x0 C1633 MI818 1"

// Rung SLD_Copy_State#2
// Offset 29
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 C1200 MI600 1 0x0 C1201 MI601 1 0x0 MC600 C1202 1 0x0 MHR1200 V2400 1 0x0 MHR1201 V2401 1 0x0 MC601 C1500 1 0x0 MHR1202 V2402 1 0x0 MHR1203 V2403 1 0x0 MHR1204 V2404 1 0x0 MHR1205 V2405 1"

// Rung SSC_Copy_State#2
// Offset 25
NOP

// Rung SSC_Copy_State#3
// Offset 26
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_SetTarget_XZ
$LGCMOD HBW_SetTarget_XZ

// Rung HBW_SetTarget_XZ#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5280 V140
POPBOOL
ANDE V105 3
MOVE 2990 V140

// Rung HBW_SetTarget_XZ#2
// Offset 23
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
ANDE V106 3
MOVE 3240 V142

// Rung HBW_SetTarget_XZ#3
// Offset 46
RET

// End of Code Block HBW_SetTarget_XZ
$LGCEND HBW_SetTarget_XZ

// Beginning of Code Block SSC_Check_InOut
$LGCMOD SSC_Check_InOut

// Rung SSC_Check_InOut#1
// Offset 0
STRN X42
OUT C1200

// Rung SSC_Check_InOut#2
// Offset 2
STRN X43
OUT C1201

// Rung SSC_Check_InOut#3
// Offset 4
RET

// End of Code Block SSC_Check_InOut
$LGCEND SSC_Check_InOut

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE $HBW_Encoder_X.Acc D140
MOVE $HBW_Encoder_Z.Acc D142

// Rung HBW_Move_XZ#5
// Offset 19
NOP

// Rung HBW_Move_XZ#6
// Offset 20
#BEGIN FMT_COMMENT 
"Loop Start"
#END

REPEAT

// Rung HBW_Move_XZ#7
// Offset 21
#BEGIN FMT_COMMENT 
"Enable/Disable PID control<br>"
"Set this to ST2 to disable PID for XZ<br> <br>"
"When PID is disabled V118 & V120 are used for PWM %25"
#END

STR ST2
OUT C90

// Rung HBW_Move_XZ#8
// Offset 23
#BEGIN FMT_COMMENT 
"Set XY direction<br>"
"Based on starting position compared to target<br>Needs to "
"be inside loop to keep outputs active"
#END

STR ST1
DUPBOOL
ANDLT D140 V140
OUT C51
POPBOOL
ANDLE D142 V142
OUT C52

// Rung HBW_Move_XZ#9
// Offset 36
#BEGIN FMT_COMMENT 
"PID Controller for X<br>& PID constants"
#END

STR C90
PID PID_10 0x60 $HBW_Encoder_X.Acc 0 8200 0.0 8200 """""" 20 100 WY0 DST511
PIDINIT PID_10 1000 0.01 0.01 0
MOVE V140 PID_10.SP
NOT
MOVE V118 PID_10.Output

// Rung HBW_Move_XZ#10
// Offset 61
#BEGIN FMT_COMMENT 
"PID Update current X value"
#END

STR ST1
MOVE $HBW_Encoder_X.Acc PID_10.PV

// Rung HBW_Move_XZ#11
// Offset 64
#BEGIN FMT_COMMENT 
"PID Controller for Z<br>& PID constants"
#END

STR C90
PID PID_11 0x40 DST511 DST511 DST511 DST511 DST511 """""" 35 100 WY1 DST511
PIDINIT PID_11 1000 0.01 0.01 0
NOT
MOVE V120 PID_11.Output

// Rung HBW_Move_XZ#12
// Offset 80
#BEGIN FMT_COMMENT 
"PID Update current Z value"
#END

STR ST1
MOVE $HBW_Encoder_Z.Acc PID_11.PV

// Rung HBW_Move_XZ#13
// Offset 83
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 88

// Rung HBW_Move_XZ#14
// Offset 98
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE $HBW_Encoder_X.Acc V140
OUT Y50

// Rung HBW_Move_XZ#15
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE $HBW_Encoder_X.Acc V140
OUT Y51

// Rung HBW_Move_XZ#16
// Offset 110
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 WY1

// Rung HBW_Move_XZ#17
// Offset 125
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Move_XZ#18
// Offset 131
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Move_XZ#19
// Offset 137
STR ST1
STR C51
ANDGE $HBW_Encoder_X.Acc V140
STRN C51
ANDLE $HBW_Encoder_X.Acc V140
ORSTR
ANDSTR
ANDN C150
STR C52
ANDGE $HBW_Encoder_Z.Acc V142
STRN C52
ANDLE $HBW_Encoder_Z.Acc V142
ORSTR
ANDSTR
OUT C150

// Rung HBW_Move_XZ#20
// Offset 164
#BEGIN FMT_COMMENT 
"Loop End"
#END

UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Test slot X & Y target value for out of range<br>"
"if X value greater than 4, fault code 105<br>"
"if Y value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#9
// Offset 38
#BEGIN FMT_COMMENT 
"Task Send<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if conveyor light barriers broken suggesting a pallot "
"is still there."
#END

STR C101
ANDN C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
AND X1
AND X2
JMP HBW_Program.S7
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
STRN X1
ORN X2
ANDSTR
JMP HBW_Program.S2
MOVE 107 V181

// Rung HBW_Program#10
// Offset 73
#BEGIN FMT_COMMENT 
"Task Recieve<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if outer conveyor light barrier no broken suggesting "
"no pallot is there."
#END

STR C102
ANDN C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
ANDN X2
JMP HBW_Program.S13
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
AND X2
JMP HBW_Program.S2
MOVE 108 V181

// Rung HBW_Program#11
// Offset 105
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#12
// Offset 107
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#13
// Offset 109
#BEGIN FMT_COMMENT 
"Task Send - Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 111
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#15
// Offset 114
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"

// Rung HBW_Program#16
// Offset 123
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1
OUT C12

// Rung HBW_Program#17
// Offset 129
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
AND C12
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 133
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 136
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 138
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 140
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 143
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 149
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 152
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 154
#BEGIN FMT_COMMENT 
"Task Send - Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 156
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 159
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 164
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 169
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 172
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 175
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 177
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 179
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 182
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 188
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 191
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 193
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 195
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 198
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 214
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 3000 C80

// Rung HBW_Program#41
// Offset 218
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#42
// Offset 222
NOP

// Rung HBW_Program#43
// Offset 223
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 225
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 227
#BEGIN FMT_COMMENT 
"Reserved Stage<br>"
"Just incase I need an extra stage for Task Send"
#END

SG HBW_Program.S12

// Rung HBW_Program#46
// Offset 229
#BEGIN FMT_COMMENT 
"Fault<br>Should never hit this reserve stage"
#END

STR ST1
JMP HBW_Program.S2

// Rung HBW_Program#47
// Offset 231
#BEGIN FMT_COMMENT 
"Task Receive - Conveyor In<br>& Move XZ to Conveyor"
#END

SG HBW_Program.S13

// Rung HBW_Program#48
// Offset 233
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 10 V131

// Rung HBW_Program#49
// Offset 236
#BEGIN FMT_COMMENT 
"Conveyor Out In"
#END

STR X1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 45
OUT Y49

// Rung HBW_Program#50
// Offset 252
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x1 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
AND X1
ONDTMR T4 3000 C80

// Rung HBW_Program#51
// Offset 257
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#52
// Offset 261
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2750 V142

// Rung HBW_Program#53
// Offset 266
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#54
// Offset 271
#BEGIN FMT_COMMENT 
"Movements completed<br>"
"Conveyor inner beam broken and XZ move complete"
#END

STR HBW_Move_XZ.Done
ANDN X1
JMP HBW_Program.S14
HALT HBW_Move_XZ

// Rung HBW_Program#55
// Offset 275
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#56
// Offset 278
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 280
#BEGIN FMT_COMMENT 
"Task Receive - Pick"
#END

SG HBW_Program.S14

// Rung HBW_Program#58
// Offset 282
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#59
// Offset 285
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#60
// Offset 291
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S15

// Rung HBW_Program#61
// Offset 294
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#62
// Offset 296
#BEGIN FMT_COMMENT 
"Task Receive - Move to Storage"
#END

SG HBW_Program.S15

// Rung HBW_Program#63
// Offset 298
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#64
// Offset 301
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"
OUT C12

// Rung HBW_Program#65
// Offset 311
#BEGIN FMT_COMMENT 
"Math calculate Y target for placement"
#END

STRPD C12
MATH V142 "V142 - 100"

// Rung HBW_Program#66
// Offset 321
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#67
// Offset 326
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S16
HALT HBW_Move_XZ

// Rung HBW_Program#68
// Offset 329
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#69
// Offset 332
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#70
// Offset 334
#BEGIN FMT_COMMENT 
"Task Receive - Place<br>Place onto storage shelf"
#END

SG HBW_Program.S16

// Rung HBW_Program#71
// Offset 336
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#72
// Offset 339
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#73
// Offset 345
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S17

// Rung HBW_Program#74
// Offset 348
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#75
// Offset 350
#BEGIN FMT_COMMENT 
"Task Receive - Move to Idle"
#END

SG HBW_Program.S17

// Rung HBW_Program#76
// Offset 352
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#77
// Offset 355
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 4300 V140
MOVE 1400 V142

// Rung HBW_Program#78
// Offset 360
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#79
// Offset 365
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S1
HALT HBW_Move_XZ

// Rung HBW_Program#80
// Offset 368
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#81
// Offset 371
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#82
// Offset 373
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#83
// Offset 375
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#84
// Offset 377
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#85
// Offset 380
#BEGIN FMT_COMMENT 
"Force Ready<br>Jump to ready state without resetting<br>"
"Reset Fault code"
#END

STR ST1
MOVE MC105 C105
AND C105
JMP HBW_Program.S1
MOVE 0 V181

// Rung HBW_Program#86
// Offset 387
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#87
// Offset 389
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#88
// Offset 391
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#89
// Offset 394
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#90
// Offset 409
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
ANDLE $HBW_Encoder_X.Acc 8050
OUT Y50

// Rung HBW_Program#91
// Offset 415
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#92
// Offset 418
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#93
// Offset 433
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#94
// Offset 436
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#95
// Offset 439
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#96
// Offset 454
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#97
// Offset 457
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
ANDLE $HBW_Encoder_Z.Acc 3500
OUT Y4

// Rung HBW_Program#98
// Offset 463
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#99
// Offset 478
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#100
// Offset 480
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#101
// Offset 482
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#102
// Offset 484
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#103
// Offset 486
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#104
// Offset 488
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#105
// Offset 491
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#106
// Offset 494
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 40 MHR120 1"

// Rung HBW_Program#107
// Offset 510
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick
HALT HBW_Place

// Rung HBW_Program#108
// Offset 514
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#109
// Offset 531
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 100
OUT Y7

// Rung HBW_Program#110
// Offset 547
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#111
// Offset 564
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#112
// Offset 580
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#113
// Offset 584
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#114
// Offset 586
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#115
// Offset 589
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#116
// Offset 593
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#117
// Offset 596
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"Reset Stage"
#END

SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Reset VGR Fault Code"
#END

STR ST1
MOVE 0 V801

// Rung VGR_Program#7
// Offset 25
#BEGIN FMT_COMMENT 
"Stop VGR Movement Task"
#END

STR ST1
HALT VGR_Movement

// Rung VGR_Program#8
// Offset 27
STR ST1
COPY 0x0 "4 0x0 0 N810 1 0x0 0 N811 1 0x0 0 N812 1"

// Rung VGR_Program#9
// Offset 39
STR ST1
OUT Y28

// Rung VGR_Program#10
// Offset 41
STR ST1
RST Y29

// Rung VGR_Program#11
// Offset 43
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
AND X26
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100
OUT Y26

// Rung VGR_Program#12
// Offset 61
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
AND X25
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100
OUT Y24

// Rung VGR_Program#13
// Offset 79
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100
OUT Y22

// Rung VGR_Program#14
// Offset 96
STR X25
AND X26
AND X27
ONDTMR T54 100 C798

// Rung VGR_Program#15
// Offset 102
STR C798
OUT $VGR_Encoder_Rot.ResetEdge
OUT $VGR_Encoder_X.ResetEdge
OUT $VGR_Encoder_Y.ResetEdge

// Rung VGR_Program#16
// Offset 106
STR C798
JMP VGR_Program.S2

// Rung VGR_Program#17
// Offset 108
#BEGIN FMT_COMMENT 
"Ready State"
#END

SG VGR_Program.S2

// Rung VGR_Program#18
// Offset 110
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 118
STR ST1
OUT C797

// Rung VGR_Program#20
// Offset 120
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 122
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#22
// Offset 124
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S8

// Rung VGR_Program#23
// Offset 126
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S13

// Rung VGR_Program#24
// Offset 128
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S22

// Rung VGR_Program#25
// Offset 130
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S20

// Rung VGR_Program#26
// Offset 132
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

SG VGR_Program.S3

// Rung VGR_Program#27
// Offset 134
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#28
// Offset 142
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 5360 N810

// Rung VGR_Program#29
// Offset 145
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 800 N811

// Rung VGR_Program#30
// Offset 148
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 620 N812

// Rung VGR_Program#31
// Offset 151
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C414

// Rung VGR_Program#32
// Offset 157
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
AND C414
JMP VGR_Program.S4
HALT VGR_Movement

// Rung VGR_Program#33
// Offset 161
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#34
// Offset 165
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#35
// Offset 167
#BEGIN FMT_COMMENT 
"Pick up disk from HBW"
#END

SG VGR_Program.S4

// Rung VGR_Program#36
// Offset 169
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#37
// Offset 177
STR ST1
SET Y28

// Rung VGR_Program#38
// Offset 179
STR Y28
SET Y29

// Rung VGR_Program#39
// Offset 181
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#40
// Offset 196
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 199
STR X25
JMP VGR_Program.S5

// Rung VGR_Program#42
// Offset 201
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#43
// Offset 203
#BEGIN FMT_COMMENT 
"Move crane from HBW to MPO"
#END

SG VGR_Program.S5

// Rung VGR_Program#44
// Offset 205
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#45
// Offset 213
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 3550 N810

// Rung VGR_Program#46
// Offset 216
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 800 N811

// Rung VGR_Program#47
// Offset 219
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#48
// Offset 222
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C415

// Rung VGR_Program#49
// Offset 228
STR VGR_Movement.DoneThisScan
AND C415
JMP VGR_Program.S10
HALT VGR_Movement

// Rung VGR_Program#50
// Offset 232
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#51
// Offset 236
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#52
// Offset 238
#BEGIN FMT_COMMENT 
"Assign new values for next VGR location"
#END

SG VGR_Program.S10

// Rung VGR_Program#53
// Offset 240
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#54
// Offset 248
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 3528 N810

// Rung VGR_Program#55
// Offset 251
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 3400 N811

// Rung VGR_Program#56
// Offset 254
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 2000 N812

// Rung VGR_Program#57
// Offset 257
STR ST1
TMR T51 100

// Rung VGR_Program#58
// Offset 260
STR T51.Done
JMP VGR_Program.S6

// Rung VGR_Program#59
// Offset 262
#BEGIN FMT_COMMENT 
"Position Crane to drop disk onto MPO"
#END

SG VGR_Program.S6

// Rung VGR_Program#60
// Offset 264
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#61
// Offset 272
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C416

// Rung VGR_Program#62
// Offset 278
STR VGR_Movement.DoneThisScan
AND C416
JMP VGR_Program.S7
HALT VGR_Movement

// Rung VGR_Program#63
// Offset 282
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#64
// Offset 286
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#65
// Offset 288
#BEGIN FMT_COMMENT 
"Release vacuum and turn off compressor"
#END

SG VGR_Program.S7

// Rung VGR_Program#66
// Offset 290
STR ST1
RST Y29

// Rung VGR_Program#67
// Offset 292
STR ST1
ONDTMR T53 100 C416

// Rung VGR_Program#68
// Offset 296
STR C416
RST Y28

// Rung VGR_Program#69
// Offset 298
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C416
JMP VGR_Program.S1

// Rung VGR_Program#70
// Offset 300
#BEGIN FMT_COMMENT 
"VGR.T2 - Move Disk from SLD to Loading Bay"
#END

SG VGR_Program.S8

// Rung VGR_Program#71
// Offset 302
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#72
// Offset 310
#BEGIN FMT_COMMENT 
"Get assign location values based on color input as number"
#END

STR ST1
RANGECHECK V820 0x0 3 1 C555

// Rung VGR_Program#73
// Offset 315
#BEGIN FMT_COMMENT 
"If N820 == 0, no color passed, enter fault"
#END

STR C555
JMP VGR_Program.S30
MOVE 4 V801

// Rung VGR_Program#74
// Offset 319
#BEGIN FMT_COMMENT 
"If N820 == 1, White disk needs to be picked up<br>"
#END

STRE V820 1
COPY 0x1 "4 0x0 1790 N810 1 0x0 1485 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#75
// Offset 333
#BEGIN FMT_COMMENT 
"If N820 == 2, Red disk needs to be picked up"
#END

STRE V820 2
COPY 0x1 "4 0x0 1470 N810 1 0x0 1715 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#76
// Offset 347
#BEGIN FMT_COMMENT 
"If N820 == 3, Blue disk needs to be picked up"
#END

STRE V820 3
COPY 0x1 "4 0x0 1205 N810 1 0x0 2315 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#77
// Offset 361
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#78
// Offset 366
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
JMP VGR_Program.S9
HALT VGR_Movement

// Rung VGR_Program#79
// Offset 369
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#80
// Offset 373
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#81
// Offset 375
#BEGIN FMT_COMMENT 
"Vacuum on to pick up disk at SLD"
#END

SG VGR_Program.S9

// Rung VGR_Program#82
// Offset 377
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#83
// Offset 385
STR ST1
SET Y28

// Rung VGR_Program#84
// Offset 387
STR Y28
SET Y29

// Rung VGR_Program#85
// Offset 389
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#86
// Offset 404
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#87
// Offset 407
STR X25
JMP VGR_Program.S11

// Rung VGR_Program#88
// Offset 409
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#89
// Offset 411
#BEGIN FMT_COMMENT 
"Move VGR from SLD to Loading Bay"
#END

SG VGR_Program.S11

// Rung VGR_Program#90
// Offset 413
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#91
// Offset 421
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 990 N810

// Rung VGR_Program#92
// Offset 424
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 2275 N811

// Rung VGR_Program#93
// Offset 427
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#94
// Offset 430
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C423

// Rung VGR_Program#95
// Offset 436
STR VGR_Movement.DoneThisScan
AND C423
JMP VGR_Program.S17
HALT VGR_Movement

// Rung VGR_Program#96
// Offset 440
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#97
// Offset 444
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#98
// Offset 446
#BEGIN FMT_COMMENT 
"Assign new Values for next VGR location"
#END

SG VGR_Program.S17

// Rung VGR_Program#99
// Offset 448
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#100
// Offset 456
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 990 N810

// Rung VGR_Program#101
// Offset 459
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 2275 N811

// Rung VGR_Program#102
// Offset 462
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 1650 N812

// Rung VGR_Program#103
// Offset 465
#BEGIN FMT_COMMENT 
"Delay to reset Done for VGR_Movement"
#END

STR ST1
TMR T52 100

// Rung VGR_Program#104
// Offset 468
STR T52.Done
JMP VGR_Program.S18

// Rung VGR_Program#105
// Offset 470
#BEGIN FMT_COMMENT 
"Position Crane to drop disk into Loading Bay"
#END

SG VGR_Program.S18

// Rung VGR_Program#106
// Offset 472
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#107
// Offset 480
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#108
// Offset 488
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C424

// Rung VGR_Program#109
// Offset 494
STR VGR_Movement.DoneThisScan
AND C424
JMP VGR_Program.S12
HALT VGR_Movement

// Rung VGR_Program#110
// Offset 498
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#111
// Offset 502
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#112
// Offset 504
#BEGIN FMT_COMMENT 
"Release vacuum and drop disk"
#END

SG VGR_Program.S12

// Rung VGR_Program#113
// Offset 506
STR ST1
RST Y29

// Rung VGR_Program#114
// Offset 508
STR ST1
ONDTMR T54 100 C418

// Rung VGR_Program#115
// Offset 512
STR C418
RST Y28

// Rung VGR_Program#116
// Offset 514
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C418
JMP VGR_Program.S1

// Rung VGR_Program#117
// Offset 516
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

SG VGR_Program.S13

// Rung VGR_Program#118
// Offset 518
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#119
// Offset 526
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 40 N810

// Rung VGR_Program#120
// Offset 529
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 140 N811

// Rung VGR_Program#121
// Offset 532
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 3085 N812

// Rung VGR_Program#122
// Offset 535
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C419

// Rung VGR_Program#123
// Offset 541
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
AND C419
JMP VGR_Program.S14
HALT VGR_Movement

// Rung VGR_Program#124
// Offset 545
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#125
// Offset 549
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#126
// Offset 551
#BEGIN FMT_COMMENT 
"Vacuum on to pick up disk at Loading Bay"
#END

SG VGR_Program.S14

// Rung VGR_Program#127
// Offset 553
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#128
// Offset 561
STR ST1
SET Y28

// Rung VGR_Program#129
// Offset 563
STR Y28
SET Y29

// Rung VGR_Program#130
// Offset 565
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#131
// Offset 580
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#132
// Offset 583
STR X25
JMP VGR_Program.S15

// Rung VGR_Program#133
// Offset 585
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#134
// Offset 587
#BEGIN FMT_COMMENT 
"Move Crane from Loading Bay to HBW"
#END

SG VGR_Program.S15

// Rung VGR_Program#135
// Offset 589
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#136
// Offset 597
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 5395 N810

// Rung VGR_Program#137
// Offset 600
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 763 N811

// Rung VGR_Program#138
// Offset 603
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#139
// Offset 606
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C421

// Rung VGR_Program#140
// Offset 612
STR VGR_Movement.DoneThisScan
AND C421
JMP VGR_Program.S19
HALT VGR_Movement

// Rung VGR_Program#141
// Offset 616
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#142
// Offset 620
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#143
// Offset 622
SG VGR_Program.S19

// Rung VGR_Program#144
// Offset 624
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#145
// Offset 632
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 5405 N810

// Rung VGR_Program#146
// Offset 635
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 763 N811

// Rung VGR_Program#147
// Offset 638
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 685 N812

// Rung VGR_Program#148
// Offset 641
#BEGIN FMT_COMMENT 
"Delay to reset Done for VGR_Movement"
#END

STR ST1
TMR T56 100

// Rung VGR_Program#149
// Offset 644
STR T56.Done
JMP VGR_Program.S21

// Rung VGR_Program#150
// Offset 646
SG VGR_Program.S21

// Rung VGR_Program#151
// Offset 648
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#152
// Offset 656
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#153
// Offset 664
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C426

// Rung VGR_Program#154
// Offset 670
STR VGR_Movement.DoneThisScan
AND C426
JMP VGR_Program.S16
HALT VGR_Movement

// Rung VGR_Program#155
// Offset 674
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#156
// Offset 678
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#157
// Offset 680
#BEGIN FMT_COMMENT 
"Release Vacuum, Drop Disk"
#END

SG VGR_Program.S16

// Rung VGR_Program#158
// Offset 682
STR ST1
RST Y29

// Rung VGR_Program#159
// Offset 684
STR ST1
ONDTMR T55 100 C422

// Rung VGR_Program#160
// Offset 688
STR C422
RST Y28

// Rung VGR_Program#161
// Offset 690
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C422
JMP VGR_Program.S1

// Rung VGR_Program#162
// Offset 692
#BEGIN FMT_COMMENT 
"VGR.T4 - Move Disk from Loading Bay to Shipping Truck"
#END

SG VGR_Program.S22

// Rung VGR_Program#163
// Offset 694
STR ST1
JMP VGR_Program.S2

// Rung VGR_Program#164
// Offset 696
#BEGIN FMT_COMMENT 
"Manual Control"
#END

SG VGR_Program.S20

// Rung VGR_Program#165
// Offset 698
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#166
// Offset 706
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100

// Rung VGR_Program#167
// Offset 721
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#168
// Offset 724
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#169
// Offset 726
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100

// Rung VGR_Program#170
// Offset 741
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#171
// Offset 743
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#172
// Offset 746
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#173
// Offset 761
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#174
// Offset 763
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#175
// Offset 766
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#176
// Offset 768
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#177
// Offset 770
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#178
// Offset 772
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#179
// Offset 774
STRN C500
JMP VGR_Program.S1

// Rung VGR_Program#180
// Offset 776
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG VGR_Program.S30

// Rung VGR_Program#181
// Offset 778
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#182
// Offset 786
STR ST1
HALT VGR_Movement

// Rung VGR_Program#183
// Offset 788
STR C799
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
#BEGIN FMT_COMMENT 
"If we are not outside the oven, turn on the compressor"
#END

STRN X18
OUT Y17

// Rung MPO_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"If the compressor is on, open the door"
#END

STR Y17
OUT Y20

// Rung MPO_Program#5
// Offset 14
STR Y20
OUT Y52

// Rung MPO_Program#6
// Offset 16
#BEGIN FMT_COMMENT 
"If the crane is not at turntable position, move towards it"
#END

STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#7
// Offset 32
#BEGIN FMT_COMMENT 
"Turn off the conveyor belt when reseting"
#END

STR ST1
RST Y47

// Rung MPO_Program#8
// Offset 34
#BEGIN FMT_COMMENT 
"Reset our bit that said its detected something"
#END

STR ST1
RST C1000

// Rung MPO_Program#9
// Offset 36
STR ST1
RST Y18

// Rung MPO_Program#10
// Offset 38
#BEGIN FMT_COMMENT 
"Reset end of coveryor belt detection bit"
#END

STR ST1
RST C1001

// Rung MPO_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Reset the turntable plunger"
#END

STR ST1
RST Y21

// Rung MPO_Program#12
// Offset 42
#BEGIN FMT_COMMENT 
"Reset turntable to crane position"
#END

STRN X12
OUT Y46

// Rung MPO_Program#13
// Offset 44
#BEGIN FMT_COMMENT 
"Jump to manual control mode"
#END

STR C801
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 46
#BEGIN FMT_COMMENT 
"Make sure the crane is at the turntable, the turntable is "
"facing the crane, we are not wanting to control manually, "
"and the loading tray is outside the oven before beginning "
"stage 1"
#END

STR X16
AND X12
ANDN C801
AND X18
ANDN C802
JMP MPO_Program.S1

// Rung MPO_Program#15
// Offset 52
SG MPO_Program.S1

// Rung MPO_Program#16
// Offset 54
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#17
// Offset 62
#BEGIN FMT_COMMENT 
"If our oven timer is less than 100, fault out"
#END

STRLE D1600 100
JMP MPO_Program.S8

// Rung MPO_Program#18
// Offset 67
#BEGIN FMT_COMMENT 
"If our saw timer is less than 100, fault out"
#END

STRLE D1601 100
JMP MPO_Program.S8

// Rung MPO_Program#19
// Offset 72
#BEGIN FMT_COMMENT 
"C810 is the ready status bit"
#END

STR ST1
ANDN Y17
ANDN Y16
OUT C810

// Rung MPO_Program#20
// Offset 76
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#21
// Offset 79
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#22
// Offset 83
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#23
// Offset 86
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
OUT Y44

// Rung MPO_Program#24
// Offset 89
STR Y20
AND X17
RST Y20

// Rung MPO_Program#25
// Offset 92
#BEGIN FMT_COMMENT 
"Once inside, turn off the compressor, which will shut the door"
#END

STRND Y20
AND X17
RST Y17

// Rung MPO_Program#26
// Offset 96
#BEGIN FMT_COMMENT 
"Once inside and door is closed turn on oven"
#END

STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#27
// Offset 102
#BEGIN FMT_COMMENT 
"When done timing move to next stage"
#END

STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#28
// Offset 106
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#29
// Offset 108
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#30
// Offset 110
SG MPO_Program.S2

// Rung MPO_Program#31
// Offset 112
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#32
// Offset 120
#BEGIN FMT_COMMENT 
"If we are inside the oven, turn on the compressor"
#END

STR X17
SET Y17

// Rung MPO_Program#33
// Offset 122
#BEGIN FMT_COMMENT 
"If we are inside the oven and the door is not open, then "
"open the door"
#END

STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#34
// Offset 125
#BEGIN FMT_COMMENT 
"If the door is open and we are not outside of the oven, "
"then move the tray out."
#END

STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#35
// Offset 128
STR X18
RST Y17

// Rung MPO_Program#36
// Offset 130
STR X18
RST Y20

// Rung MPO_Program#37
// Offset 132
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#38
// Offset 134
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#39
// Offset 136
SG MPO_Program.S3

// Rung MPO_Program#40
// Offset 138
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#41
// Offset 146
STRN X19
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#42
// Offset 163
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#43
// Offset 166
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#44
// Offset 171
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#45
// Offset 177
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#46
// Offset 181
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#47
// Offset 183
SG MPO_Program.S4

// Rung MPO_Program#48
// Offset 185
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#49
// Offset 193
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#50
// Offset 210
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#51
// Offset 215
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#52
// Offset 221
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#53
// Offset 225
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 227
SG MPO_Program.S5

// Rung MPO_Program#55
// Offset 229
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 237
#BEGIN FMT_COMMENT 
"Turn turntable until at position to saw"
#END

STRN X15
OUT Y45

// Rung MPO_Program#57
// Offset 239
#BEGIN FMT_COMMENT 
"Once you reach saw position, activate the saw"
#END

STRPD X15
OFFDTMR T103 D1601 Y43

// Rung MPO_Program#58
// Offset 244
#BEGIN FMT_COMMENT 
"Once done sawing, move to the next stage"
#END

STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#59
// Offset 249
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#60
// Offset 251
SG MPO_Program.S6

// Rung MPO_Program#61
// Offset 253
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#62
// Offset 261
#BEGIN FMT_COMMENT 
"Keep rotating until we are at plunger position"
#END

STRN X13
OUT Y45

// Rung MPO_Program#63
// Offset 263
STRPD X13
SET Y18

// Rung MPO_Program#64
// Offset 266
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#65
// Offset 271
STRPD X13
OFFDTMR T104 3000 Y47

// Rung MPO_Program#66
// Offset 276
#BEGIN FMT_COMMENT 
"If the light barrier gets broken, set c1001 true"
#END

STRN X14
SET C1001

// Rung MPO_Program#67
// Offset 278
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#68
// Offset 280
STRND T104.Timing
AND C1001
JMP MPO_Program.S0

// Rung MPO_Program#69
// Offset 284
STRND T104.Timing
ANDN C1001
JMP MPO_Program.S8

// Rung MPO_Program#70
// Offset 288
SG MPO_Program.S7

// Rung MPO_Program#71
// Offset 290
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#72
// Offset 298
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#73
// Offset 303
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#74
// Offset 308
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#75
// Offset 313
#BEGIN FMT_COMMENT 
"Manually move crane towards oven"
#END

STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#76
// Offset 330
#BEGIN FMT_COMMENT 
"Manually move crane to turn table"
#END

STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#77
// Offset 347
STRN C801
JMP MPO_Program.S0

// Rung MPO_Program#78
// Offset 349
SG MPO_Program.S8

// Rung MPO_Program#79
// Offset 351
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#80
// Offset 359
#BEGIN FMT_COMMENT 
"Turn on flashing red light"
#END

STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#81
// Offset 364
STR ST1
OUT C811

// Rung MPO_Program#82
// Offset 366
#BEGIN FMT_COMMENT 
"If Reset Button (C802) is pressed and both the oven timer "
"and saw timer are over 100ms go back to stage 0"
#END

STR C802
ANDGE D1600 100
ANDGE D1601 100
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STR C1610
COPY 0x1 "4 0x0 1 C1621 1"

// Rung SLD_Program#8
// Offset 32
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STR C1610
JMP SLD_Program.S2

// Rung SLD_Program#9
// Offset 34
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 36
SG SLD_Program.S10

// Rung SLD_Program#11
// Offset 38
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 46
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#13
// Offset 48
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#14
// Offset 50
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#15
// Offset 52
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#16
// Offset 54
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#17
// Offset 56
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#18
// Offset 61
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#19
// Offset 63
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#20
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#21
// Offset 67
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#22
// Offset 75
#BEGIN FMT_COMMENT 
"Start timer for start fault. If light barrier isn't broken "
"by timer end, FAULT."
#END

STR ST1
ONDTMR T212 2000 C1632

// Rung SLD_Program#23
// Offset 79
#BEGIN FMT_COMMENT 
"While bit is on, if light barrier isn't triggered, FAULT."
#END

STR C1632
AND X35
OUT C1633

// Rung SLD_Program#24
// Offset 82
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#25
// Offset 88
STR ST1
COPY 0x1 "4 0x0 26000 V3205 1"

// Rung SLD_Program#26
// Offset 95
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T200.Timing
JMP SLD_Program.S3

// Rung SLD_Program#27
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#28
// Offset 100
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#29
// Offset 108
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#30
// Offset 113
#BEGIN FMT_COMMENT 
"Checks for lowest color value in color sensor."
#END

STRLE V3200 V3205
COPY 0x1 "4 0x0 V3200 V3205 1"

// Rung SLD_Program#31
// Offset 123
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3205 0x1 10000 6000 C1602

// Rung SLD_Program#32
// Offset 128
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#33
// Offset 130
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3205 0x1 20000 18000 C1619

// Rung SLD_Program#34
// Offset 135
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#35
// Offset 137
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3205 0x1 24500 21000 C1620

// Rung SLD_Program#36
// Offset 142
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#37
// Offset 144
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 4, jump to S4."
#END

STR C1602
ANDLT V3202 4
JMP SLD_Program.S4

// Rung SLD_Program#38
// Offset 150
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 4, jump to S5."
#END

STR C1619
ANDLT V3203 4
JMP SLD_Program.S5

// Rung SLD_Program#39
// Offset 156
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 4, jump to S6."
#END

STR C1620
ANDLT V3204 4
JMP SLD_Program.S6

// Rung SLD_Program#40
// Offset 162
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#41
// Offset 169
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#42
// Offset 176
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#43
// Offset 183
SG SLD_Program.S4

// Rung SLD_Program#44
// Offset 185
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#45
// Offset 193
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#46
// Offset 197
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#47
// Offset 199
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#48
// Offset 204
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#49
// Offset 206
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#50
// Offset 211
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#51
// Offset 213
STRND C1604
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#52
// Offset 220
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#53
// Offset 223
SG SLD_Program.S5

// Rung SLD_Program#54
// Offset 225
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#55
// Offset 233
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#56
// Offset 237
STRN C1606
OUT Y30

// Rung SLD_Program#57
// Offset 239
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#58
// Offset 244
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#59
// Offset 246
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#60
// Offset 251
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#61
// Offset 253
STRND C1607
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#62
// Offset 260
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#63
// Offset 263
SG SLD_Program.S6

// Rung SLD_Program#64
// Offset 265
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#65
// Offset 273
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#66
// Offset 277
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#67
// Offset 279
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#68
// Offset 284
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#69
// Offset 286
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#70
// Offset 291
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#71
// Offset 293
STRND C1612
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#72
// Offset 300
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#73
// Offset 303
SG SLD_Program.S7

// Rung SLD_Program#74
// Offset 305
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#75
// Offset 313
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 8000 C1630

// Rung SLD_Program#76
// Offset 317
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#77
// Offset 319
STRND Y30
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#78
// Offset 326
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y37

// Rung SSC_Program#5
// Offset 14
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"c1202 is reset button, c1500 is execute command"
#END

STR X40
AND X41
ANDN C1202
AND C1500
JMP SSC_Program.S1

// Rung SSC_Program#7
// Offset 27
SG SSC_Program.S1

// Rung SSC_Program#8
// Offset 29
#BEGIN FMT_COMMENT 
"Look at HBW"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#9
// Offset 37
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#10
// Offset 45
STR ST1
ANDPDPF
OUT C1203

// Rung SSC_Program#11
// Offset 48
STRN CT150.Done
OUT Y38

// Rung SSC_Program#12
// Offset 50
STRN CT150.Done
AND X46
STR C1203
CNT CT150 V2400

// Rung SSC_Program#13
// Offset 55
STRN CT151.Done
OUT Y35

// Rung SSC_Program#14
// Offset 57
STRN CT151.Done
AND X44
STR C1203
CNT CT151 V2401

// Rung SSC_Program#15
// Offset 62
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#16
// Offset 64
STR CT150.Done
AND CT151.Done
JMP SSC_Program.S2

// Rung SSC_Program#17
// Offset 67
SG SSC_Program.S2

// Rung SSC_Program#18
// Offset 69
#BEGIN FMT_COMMENT 
"Look at VGR"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#19
// Offset 77
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#20
// Offset 85
STR ST1
ANDPDPF
OUT C1204

// Rung SSC_Program#21
// Offset 88
STRN CT152.Done
OUT Y37

// Rung SSC_Program#22
// Offset 90
STRN CT152.Done
AND X47
STR C1204
CNT CT152 V2402

// Rung SSC_Program#23
// Offset 95
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#24
// Offset 97
STR CT152.Done
JMP SSC_Program.S3

// Rung SSC_Program#25
// Offset 99
SG SSC_Program.S3

// Rung SSC_Program#26
// Offset 101
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#27
// Offset 109
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#28
// Offset 117
STR ST1
ANDPDPF
OUT C1205

// Rung SSC_Program#29
// Offset 120
STRN CT153.Done
OUT Y36

// Rung SSC_Program#30
// Offset 122
STRN CT153.Done
AND X45
STR C1205
CNT CT153 V2403

// Rung SSC_Program#31
// Offset 127
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#32
// Offset 129
STR CT153.Done
JMP SSC_Program.S4

// Rung SSC_Program#33
// Offset 131
SG SSC_Program.S4

// Rung SSC_Program#34
// Offset 133
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#35
// Offset 141
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#36
// Offset 149
STR ST1
ANDPDPF
OUT C1206

// Rung SSC_Program#37
// Offset 152
STRN CT155.Done
OUT Y37

// Rung SSC_Program#38
// Offset 154
STRN CT155.Done
AND X47
STR C1206
CNT CT155 V2405

// Rung SSC_Program#39
// Offset 159
STRN CT154.Done
OUT Y35

// Rung SSC_Program#40
// Offset 161
STRN CT154.Done
AND X44
STR C1206
CNT CT154 V2404

// Rung SSC_Program#41
// Offset 166
STR C1202
JMP SSC_Program.S0

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRPD X37
DEC V3202

// Rung SLD_Storage#2
// Offset 3
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRPD X38
DEC V3203

// Rung SLD_Storage#3
// Offset 6
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRPD X39
DEC V3204

// Rung SLD_Storage#4
// Offset 9
STRE V3202 3
OUT C1628

// Rung SLD_Storage#5
// Offset 14
STRE V3203 3
OUT C1629

// Rung SLD_Storage#6
// Offset 19
STRE V3204 3
OUT C1631

// Rung SLD_Storage#7
// Offset 24
#BEGIN FMT_COMMENT 
"Upper bound W fault state."
#END

STRGT V3202 3
OUT C1625

// Rung SLD_Storage#8
// Offset 29
#BEGIN FMT_COMMENT 
"Upper bound R fault state."
#END

STRGT V3203 3
OUT C1626

// Rung SLD_Storage#9
// Offset 34
#BEGIN FMT_COMMENT 
"Upper bound B fault state"
#END

STRGT V3204 3
OUT C1627

// Rung SLD_Storage#10
// Offset 39
STR ST1
COPY 0x1 "4 0x0 V3202 MC809 1 0x0 V3203 MC810 1 0x0 V3204 MC811 1 0x0 C1625 MC812 1 0x0 C1626 MC813 1 0x0 C1627 MC814 1 0x0 C1628 MI815 1 0x0 C1629 MI816 1 0x0 C1631 MI817 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

// Beginning of Code Block VGR_Movement
$TSK VGR_Movement

// Rung VGR_Movement#1
// Offset 0
NOP

// Rung VGR_Movement#2
// Offset 1
STR ST1
RANGECHECK N810 0x0 8000 0 C780
RANGECHECK N811 0x0 3500 0 C781
RANGECHECK N812 0x0 3300 0 C782

// Rung VGR_Movement#3
// Offset 14
#BEGIN FMT_COMMENT 
"Set fault state if rotation out of range"
#END

STR C780
MOVE 1 V801

// Rung VGR_Movement#4
// Offset 17
#BEGIN FMT_COMMENT 
"Set fault state if X out of range"
#END

STR C781
MOVE 2 V801

// Rung VGR_Movement#5
// Offset 20
#BEGIN FMT_COMMENT 
"Set fault state if Y out of range"
#END

STR C782
MOVE 3 V801

// Rung VGR_Movement#6
// Offset 23
#BEGIN FMT_COMMENT 
"Initiate starting values"
#END

STR ST1
MOVE 0 N813
MOVE 0 N814
MOVE 0 N815

// Rung VGR_Movement#7
// Offset 30
NOP

// Rung VGR_Movement#8
// Offset 31
#BEGIN FMT_COMMENT 
"Set Crane Rotation Direction (Encoder Values decrement on "
"CCW Rotation)"
#END

STRLE $VGR_Encoder_Rot.Acc N810
OUT C411

// Rung VGR_Movement#9
// Offset 36
#BEGIN FMT_COMMENT 
"Set Crane X Direction"
#END

STRLE $VGR_Encoder_X.Acc N811
OUT C412

// Rung VGR_Movement#10
// Offset 41
#BEGIN FMT_COMMENT 
"Set Crane Y Direction"
#END

STRLE $VGR_Encoder_Y.Acc N812
OUT C413

// Rung VGR_Movement#11
// Offset 46
REPEAT

// Rung VGR_Movement#12
// Offset 47
#BEGIN FMT_COMMENT 
"Calculate Rotation position difference"
#END

STR ST1
MATH N813 "$VGR_Encoder_Rot.Acc - N810"

// Rung VGR_Movement#13
// Offset 56
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100

// Rung VGR_Movement#14
// Offset 71
#BEGIN FMT_COMMENT 
"If crane needs to rotate CCW to get to target"
#END

STR C411
ANDLE N813 0
OUT Y27

// Rung VGR_Movement#15
// Offset 77
#BEGIN FMT_COMMENT 
"If crane needs to rotate CW to get to target"
#END

STRN C411
ANDGE N813 0
OUT Y26

// Rung VGR_Movement#16
// Offset 83
#BEGIN FMT_COMMENT 
"Calculate X position difference"
#END

STR ST1
MATH N814 "$VGR_Encoder_X.Acc - N811"

// Rung VGR_Movement#17
// Offset 92
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100

// Rung VGR_Movement#18
// Offset 107
#BEGIN FMT_COMMENT 
"If crane needs to extend X+ to get to target"
#END

STR C412
ANDLE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y25

// Rung VGR_Movement#19
// Offset 121
#BEGIN FMT_COMMENT 
"If crane needs to retract X- to get to target"
#END

STRN C412
ANDGE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y24

// Rung VGR_Movement#20
// Offset 135
#BEGIN FMT_COMMENT 
"Calculate Y position difference"
#END

STR ST1
MATH N815 "$VGR_Encoder_Y.Acc - N812"

// Rung VGR_Movement#21
// Offset 144
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Movement#22
// Offset 159
#BEGIN FMT_COMMENT 
"If crane needs to extend Y- to get to target"
#END

STR C413
ANDLE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y23

// Rung VGR_Movement#23
// Offset 173
#BEGIN FMT_COMMENT 
"If crane needs to retract Y+ to get to target"
#END

STRN C413
ANDGE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y22

// Rung VGR_Movement#24
// Offset 187
#BEGIN FMT_COMMENT 
"Exit Conditions for all movements"
#END

STRLE N813 40
ANDGE N813 -40
ANDLE N814 40
ANDGE N814 -40
ANDLE N815 40
ANDGE N815 -40
ONDTMR T50 500 C499

// Rung VGR_Movement#25
// Offset 214
UNTIL C499

// End of Code Block VGR_Movement
$TSKEND VGR_Movement

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C11","C11_Interlock","","Used to delay logic by one scan"
"C12","C12_Interlock_2","","Used to delay logic by one scan"
"C51","X_Direction","","True: Left False: Right"
"C52","Z_Direction","","True: Down False: Up"
"C80","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","Fault_X_Target","","Active when X target out of range"
"C183","Fault_Z_target","","Active when Z target out of range"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"D0","MC","",""
"D140","X_Start_Position","","Distance to target"
"D142","Y_Start_Position","","Distance to target"
"T3","T_HBW_S6","",""
"T4","T_Conveyor_Timer","","Used to detect conveyor faults"
#END

