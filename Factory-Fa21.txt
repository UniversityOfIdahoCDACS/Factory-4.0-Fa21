// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Nick\Documents\GitHub\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
7d2e4b48cd5ef787be4c5d66b72047de9a4ef91f76f5be2f243110ed16410da72bd0a7af8a00dac5
d1a3b5e591b10ea19daa0d4a5a152d7cd4e020f811b79eed821cbbe5bff917508862419e564226c2
dd5db4a53d95d380573cd78e3f447c3aab883289d51fe9af8d002b2cfd2c7dcbde2873bcfa37afc0
fa53a740f770aaece067fa3e24879eee9c944ca0a8ac4eba95e85c2346b06786b6bb1b668672158a
1cf024b177db0abb370d5161ae25dd48e3caffec12fada1bdda18a3aebb5a7fde370fcdc022fa038
51a9cb14ab9e8ee5fe97d70f5db5b2fc26d16f82b47d359dbdb34eb1320913f42bd0f82ec707fc9f
37bca668d98491ededc78337e263169219a90aba16156c0f2046b2865ce2e6d727b95be8df5858b7
46d8c51d8e7d1396740b06180e9cc9e7d4574ff2ff130ff2e87436891238f0d34f8557850012dcb1
765524ca03d8ef4d3645b46cb1a06e2be864a6176d3cd69fb132764b5f1a7b9c768a2680ef54b4e5
6bad08d676a60ad19116f2eee4dbc122702b005d3d81b83c3f31c5f8839289c1971efb09c1c65bdd
a84ed51b20aced14ba6db3adbe631a6beef1ff52af9e50c1136abc6ff794d9b43434ac1bc14d15c2
1c9bb0729949aa441d58775962952565897ab1cde63a5fc854e92d05b963007c0287c8546ad7982a
2258a5b1545689bb0fb23c109bbfdffe8a3607fdb2b288c8684b5c6b81bae8e7d9b0ed78fbdd5a50
387ae35bfa0b210d690eb052bfcbf035c2fb92a840327b3a507830ef44421f33216af38d5e9af7ab
dbc165014d11172683affa9862e7dcdc6848ca447f582f5c96bed70fedc87f97335a3da41e8d75c6
21a0c19c516da40b99d9330694bc618fa1af127bf77aacc5134ee086920db61ff752e8b373006997
e5114fd092b7a24bfc809f1d10a2b3ef37df4b4930dd3c5cea1396c840042a83d25fecbc836bc188
23dc5a2e38bc3b4eeb4e6185a2125e0b2a0a1a888d2dd620fb058cf215384d15620761c0fc09da6a
45d304e44c5ad195a773bcb922bfb19e6fa57cef2b2f4d535f703c650b0987e365cd19939e324ea0
c51c97afdfac99199ce898ecbd9805ca9c4d3e64e4c8e01c0fbe330e104f115fd692708568e07985
4253ec7ca3b1a1d21e8c77556773f259913151a44242785a661d65c7ff1a30a93ac39d0734bb9992
01996877d6bd675d918ac8b48a11adecde3e4dfd93bd3a9f1683bd63600677cbbefbc0199aa1eb11
f1b10fa150489741488bb37c2b2fef244b69fc7f2da2472843e9ed9bc8345e0657688c4c8e53d7b7
30dc5e7124d9cae80d58d49e40b7741b8312d14c48a4cf52465bdc585b4786afd77e14688137ebeb
3390cc7d55c2b7c6bd4bdf9a1c97a8339b1bb47785600f96dd3f5bb998370bcbe9facf4435689742
1249024f6e2f89828f98b48d464785d70f027640d2f3b36956d090c538d2c2e0aa1498ff99c18c4b
5615cf90e063462c864ebdb65beb318848a0f5428bc37f0c736c056af87ef32517bd2cf245d047ad
a2dd290dd96f25fdfe5a62b2630bc0dc7de80d4c171e378b104c2758b7c2ddeccc490ce896cf0c59
d6040eb84631ebd4e9e41e957e5c0a010d650b1bcb55824279819223ce7a89f20556d59a6c4d10a4
f4ed2c2be583eb7b991a548be1579476839e3f9897f5d2e96f4d7d68dfb70126ca065cdfc53c762b
2f2c8c64af69a3f753b4fe51f8e7bf2f36f18a8f75565b5dcabe995d6efbd0b6ac91950bfc3a18df
354b8b832c70086eb6c9c3067fd434a03d7e96b5b5b202416d23bc4b3612b1ceb872ba93998d789f
cf452a7b84acd69f1d535275be0c907ed50358a18e849c6edbc95ca357504577f1c19387cdbff55e
be4aeb874bef90e6acc4bfc91c9661b1407362733772876d9a173547090c573f44ea2047fa08aba5
cc734b9516384c260bd4c1f0b494e8c7d7916e61c0f83ea9cabf946e5a1e4cde4857bc7718c88dca
2cb4eba9b5a9a7019a685341c87d7de0c4da13dc9c48eb830d48ef0fe77192d546e6d0f6475cada9
5be1b09889be90039865cf96f6f57c2ab74ff079166107ec6692a8e04396e51af2d9c2be2c0447ce
56ebe26c657523fc3a8f60fa4c6fac7b9dad48859aecb3ea906205d8779fbfbfc516406efb41ea33
46525ff96abd4a18e2c686da6d26d5b0008ab0d07339aada819c99a6f85a81a5e76d9b2434ab4bdd
0fcaf6b6b295aeaf7aa12be14bc860d543e3f0f4a2445c6ab595f60d25bc6c078ec9117026838957
e336ed65a309913c890feffc2059bf2711ccecbf446c394abbef1da175134a118e2b80eb6ba9eb94
9544971aba1dfc710aec14d767c48e1c4a0c66eaca5fa9c2351ebe143c32397ecfa5fb5d3c5879f5
6c6fac3c0e6fac266db23072c4a0b68cf22680e14b4d777c5bafdcb9ab154f0968a85bfa7dc97af3
e26e775aa1bcbce99fb300cca753405561f7ba73427cff615a9bf9f3b4adeed8feb9c51618e17d42
6b3a7ff28ca984996ea3fdc2fa129c9cd03fb15b302b519a88249212e31dd88da4796d1deac8e859
99fefe7b638fd218663deba113e213e2515671f50a23af31704e28597501aed91dad629a7fc0a04b
2c365563d53e0c78b90b3665e6ad19abed05d4009756a183a17e6e508e7829a8d1151663f52cc9e1
b28f8d48f9031a4e890b910784f2474517dcadcb298f4a2d59a88c249b041e025db8f8144b827fbd
22085d66a6f0c352b1c22a0c47cd9e3deea1f5ce22ab6104a69ae24c4c866b1796c9fc4a2ddd78ea
20a2bf17f757b249e1b5aa2db06d764630c4ab91d4f69a5bb9f0d13bc9f8045344ac2a1e2f402818
c156f583e1f2393c7ec3ac9ad42ac1d171b2b633b98304200a5a9dc1d8a985737c5a2a5fa7679993
5ab81e417c1081a7dcceec0110ba2f82a0a7b1af427d3ca1062a3160ae896fbfafd632d332db1f89
7abef60e420bcb8db8b24411889d6c5e81ff0597490663866eb955f9e49aef850b175320c41541a4
8a4569fd927602cbec9b06c4289b7674eb51e09eeba8797250087a52e78d5afe406f1fc19b53b056
f20a40539fb7f19a622cfe96f29f9377d4b73dcec2f4b682f2f5d5b8c42d7908fdbcccb62adcef0d
efc8c556b28975aaa88fb371a671bd87daf7e63c56ede39ce71fbd8217fce0c1cd95c0a41612285f
b34860da8bcc8738656d5bc12372d85acce0f9205f2d666a48f99fa7935aee3ee63660f82dc50c87
5ecdd0609ad851edcd74b19688ad74c8a18fa2449db856b7f2c5034a743e248d91c9f59a2dd498ce
f9334cb6c6dbb2faa646f980d0fe5e32ab20076edd56d11e92ee91fb52c839b596310c8c60ed0b1e
d51aed7da7a38b72e4b8eb328ee7c97015613f18449b552c756a14f120eb6191d2c6dd627106100a
ec9c73cc607c60a37492e20166f65430707584f2116c4f74cd5590ede5daf09acbfdac4b428ac290
8935d2dd02ae3227fded497f51447895c654f692d237c16d2595d50545d4cb3a9b078a44b8db14e5
cdbc0c03e029124ca518040fc82f125067754d183733d56fcc1838249ef926f05be12883322945da
95a0e52c08ea9c7d8111be2fefbd58fc45e6321206bc57113d8cd9228f4afe86eafb2d964e19c40f
2e1c689c76438d0ce97332d60a0660f1dba49acde449328c217c3d3f6285ac58ca33ffa19283da9a
1d5692266b221c4bf20cd4bcfd520e70ce63feb80e9b867b450188245c3021fd3649521214e414e5
14fecb65fdb69f47b572aeaa3be18c21440402dae8048091d80848dbc43b9a060bce5a5996674fbe
0ed90bb7bad33b5ce644306e61233a2810458a8ec0201c922b333d2c067947f0d8b5a8fc3d4e0f39
13f4dd290bf206b5fd6665fc7fda370b853c20ae63157062ddc4778a0cadcf80557c23ebcf0e7bbe
9b07075e5edc799ca02e574c7622fd2b80352ce7574c20478bb8f0391dff8362e191a49cc91a5f8a
ab327d061ff2ff5de12fbecf979fb0841b37ba7584acb1c04227a51dc63c87738291bc5765f5e7df
8ae5e03e8724f0908f6f6ac874ba120be873ce70974d4ea3819adadc043662a7383b52d77f95a927
5e4d77058938e05f9659209e33aeeed8545822fd3c840b95dbf980b3864ac711f3243f8543355042
f5ec67f76a636457b8e542c7bfb0880c800e06171944e3fb03c43d975876897fed1eb978c9c5d4b2
a798fcac27e57aa524fa0eb879b2d1cb27a3c5b738676e7420258b0288c49ce789c0c288cc0b61e1
c08212a442cd7ef609e1a14d8fa9719155c629a295e58a6b3dde9e3f36e86f8acffa677e5e820cad
49a201294d8f40a6d63592363dfe9631c20eccfd498f24ee277a8244e587c81df1fa44b90f0c44a7
b27cfb86e2b1d6ad3219c6102a85bef64bc404b24af6f9709c61afbe7e78c83b5ac8b497b2012204
7de2c9f62e8e832a90acdc89b1afa6f2d74f0d8a42f9c54ff6f7919276db87319d01695a7419f19e
e82784e0be9e0c8949491454c78c4236dcc20ad2b2998b45270c0f384cab9e1c5e6731c0e26f45a9
c69fc96cb1127d2f1cba4d4c3db3aef6d0c82f0afebf666d2698ff37eb790454bdb46e6a41348264
80f919a1cca5b0ffaa116518637fe21a8303aebd4e47985a6ea9586bfd5b3d1ed8e0b7eda963895e
f741672219dc20697c605f994a5bdcab88170b4460daa0f60773ea5892f779215ebb5fb98e537d86
e0f4fad3a727fa0599aac8bd8fc4195127d12086a1984344a272b3a2bde15577235bc33ef013b23b
df0dc1dcf67c60208d4ad84ac810e523fd57caf48358006624d93118fe9fce5df9bc8d7c2c27e4b4
a02d200375cb8c7199b0ba8dac6363b5750eda025b215c91b1a0285281f95fb46c63211be55ac730
c46163d7e41da4905559c8f50cc78527844eb940970c397aa6fcfcdfbb8b3946aeaa4e9a23e22df0
edefef663e7687d37a41b6058e45b898f373fa11de031eb00fb1271e14a9290fd0a90a3e67065bdb
d288258236867cff1d8715f6dcbd33450dc03834a0de625026038593184bb8eac4650ede1c39a6cd
1208941020fec543b99b3ed82649ea4c65a15cf8b45fc4f9b8b8ad1c65d98c01e3df71d41d3a2b33
1daf6196ab55d01bf7ba09e633c9d178eb626b3b235be069e42785526ce59690b5615a418df40654
fea1764826be2b256746014ceca5fbdc8134b6aad0b901b2b791ac3aa26ac1941bde64cbbf3162e0
5df677892492887a20e288972684dd7280c7794fb9cf3ba748b418a7fca40e3bb23174ea9b24dfb8
e6207d3e8689921ccfc3695e134b2bc86fbca3fca155b4d02ae9a421787d63b1e0af4fd3d532dceb
441187a80dd023499a4ea2640168b603bfb1eb3bfc997286a5e129cfdceeb24735260a7d2351493b
b541bfee83f12afe09b6ed2baa0d29e39863938b00fe53a47051bc0dee68947ba3a0169c4fd562ed
f234e06553015427a26a158dc5054dbe8cdf39c330b802437bb66c34223da7127458f7a6125e68a8
c6b4db5b1f8ae2f2321cf4c7ac8ab80bf51b718bcdb959d048c292f6a90a6fb4c10663db8a10366b
acd5e97b380c5d84478329c95c2241dad23d23110bae0cb54a0bfd5ae06ee702fcefc2b306c34cfa
5949a6a11a7f44816950b9b2299f71b984ed2fe69f53ddd672f4767c1f431c95e49e006bb2899984
e56974f1f1ec61044d9b9f4cb3939d38253e56e1542be03daa8097018d649882908bc129f8e804b7
b987b9d6c1f19f0dbeb0e9bc2c8b1a60a48186ce5f3f610bf565b861e1bed7b4398bb0b17870b62b
656c36af479e1f5da6ca107e62f0388249e27faebbddf493688f69da573f756c7beaa253323ce0f9
eda51a9d42f71ac4da24c623380c265a81e2ee9f4215ffb7bf2c2d5987046114eb6133b2488f2d49
6d6b3955d0cd24a5a9b5871a402295b14a2d80a062321e7bb7ce744ba61fd04085012ef9e2bde5bf
e27dc0d1f438f7b7115b2f2060f3a26ccf3e00925f0dea5cbb19bb8b6ba4f3884a6916856e5a85fc
4736e7adfa924126cb1f156d242ec1d232172f70d7555049244f8d9947cf701339c59846381e2975
1659ce9878e9d7873332d7231a92d062b5df2b4be9671a6aa9bcc22581728d2ee44bdb5891be04da
563732ff366a7d094a73bbd4a9498998c4b94501f22ec3ab8cfbe240bbb7c9b7da23ab42554b80ba
a12476358c739d4ec9b6797057561da4b7dfadd6d2fd1e2b6f31b094a008fc2bcf9ea64162e6be87
25c46a447194f43ece874bce2773ce75091590f8e9b58d4c95b5957552b9382bea09289b62bf04c5
7071aef9ccb4380e68b5afa1f90324d06a364c631736a3fe8a6fe75fe9bc5fcad388afb639763331
1f1573f37adaf49699b6a5e41f4cbb3adba921e814ad9ba87c1c63821b1f12f5fff3d58bf5b8378a
59801475827ce04516d999f2c7210079ee4e66ab7332948692f0e0b25d2279718d7be03328ea9604
d66d333c54fc7040bdc571aeecf71677a4504bced409c6aa4bcc09a0a6f2c1532b78ecea3d3adc7e
2114b47a51aae66981c816f665092b83d6b2d243e0d1cd594ed3229ec44dc26041f3543a3a6c88c5
f70f4fec3d29fed76aad864a9b04c4296916a92ff88a0bbaa18ad9a01fec6c834f748763f357a78e
42a5d2c7d67d35d9532b1fd9b70fccd7a97936f55d05f525ccecdefe54e7c00786a3c84fe989cc21
5ae21368a8f3800f37da934dbc07577a2cc80d7fc8ef5e17f8aaf8dc199e931d37fbb8b8c1b55fe5
d37904324126b4f1d873fc8c72525bd1c50ef4755fb10c4f745281f3e7d2cce46bb6b82299475428
01a85a39f9a6583a61b758e2ee069133372f7ecec7ff79b2ac30365bd8ce3410e56b0af84d1dc0aa
b487285d183d5fd1e3e3fa9a958dd9cc4059326f627d52b3bb04963d70bfa66b11f09686ce0369c1
6af6fc299cf6a838a9c515696ae14f8efaf8ccc624ed260a07e4cb86d39de9e5d3bcb51bd6a715c1
c336b1c9d3622e2746dc71d1efe2540946ab17d8cd865e6a60139208bfa4cf20173957a2a4c9e7f6
4cb980892330f0c40a132e2fead54c23dfa13979aa03873eb0365337ececc90134426ccf33cdad4b
64dbf6583425296aa76a54a7b9564eed5b39212f3f495d94f541a8d32b0e180228f5e20d3a7c8669
f9450f6ac7bbb870bc210c546879e4952e763207450717a136c384a693c4ddfd1b31488ca514c703
88938ec5c24971ccd47a630cdba1f255f258832db12214f4a199472e0c62b20ce93abaad6688daab
ea86fb8997420f5831143f934d1bf84a278edcdc3ce229a8a1a342e505596c96e21365cb0c1ca491
1177c94a76d2de9cf794ce0cc66a16d3f0d13130363a36296e64882eff3a124ca1035e2964f878d9
6e67d130e8280659bb8d08b4942bb8cfcf770ccfdc18497c25c5f2d4908220204d73f747cfed39ac
f82f9d85e60fb5ffded06f99bbcce68bfea2c266532372dc7fec77581cf3a4645a0bf965f88905c1
c3781f37f92a12db8a92738a7ba47cdc550742d2ec8c4566047d613836759121046b24d68cc76619
2fde59602915dc8bda789b7daa9b220a3f0c3a6b39e8d2752c576f5b3fc8327ded7a476edbac8841
8f77c4561a10f591630ce3a4bb7bd994123dc6fe557eccc64642b73d11f6f34c6443a78a4389db1e
e49a0730627d227bcd447d8a7df67fa24f227814f96c843855863e4d4c22b65aea8a3a9b1094d8e0
cc48bd95a46cb30a0a666c7057538732f26cb1d1fb11f4dace98e5e59ff0ae1c5e890c548e372b6f
1739f10d1b11b018fd24bf520623281871d5e273a841442bc7235550ac77fb1244d4319409b7acca
498a04e527c30da8985575eb420dcebdaca0bb727d0a780aac34261cfa1174ad039ab3a005b9c2f2
757b1c58bc3adfcf37371f6a4697a584e01c61089c906c44075142dfc71c078b0073093cd2aa842e
d61b644c67894720d9c98b37ba0a6a34ba7cf1fa7d07d382294bedd099fe2425c7a49c3d5bfb15c6
4cfd1467017b38d2eeb8adabc4e45d8d45714ee048c75aca0ee0e1ea2ccc21ca0b7db384aebaffa0
4fd3f1562ebca6619eb5cd4fff5bc32f41403ca5a199580ef979c4cb63ac1defe8d37d50e606268a
26abe565a1d7330f6fd5fc15e1236a0ab477391d93ccf11ca3d95ddb58853b4b4efe79e42ea92fe5
77b79d2c5cee5c7a8cf4474d92562e762421b05eabf63a3c1837d5572782901426d541f5c70c964d
9e2531a385a29333e3747dde6ef56478fdec698c58fb5624f67b93d3fc7b42047d1b6cbc070c1509
e963a75b3b5d38c747b81c5896e3d0440ab648360af5b2ab5c76cbd6920f1671702249817c07fca9
624c46f9105cd478e6250ebbc1e75ff679613985c1bd79950a69508c62f4606ac56f32bc35e40fec
23ce5aded2d5bcca2b34bb858f69f09a4ded7763031b5bf8717d09dd129be087e2b305c2edff0ea9
384bc85079ed00ed293ee1cab1b1cc7eebf509c057c3eac5ccedc17d956242d32c8e27cf32ccfb79
087f2c3b0f5028a7f3179b8277803cf299c260500de134f49f4e6566cc57f609569bb4f2a513fc3d
27895236bfbb100e5e0f2bbf1b709c11658253a53920eb40f406bc786fea6cd73a667d287f12411a
bc9343aa566327ceea90d144ab0660221a12a0ef8f45a5a253d5d7b2537d5669b9cce1f4b79e7683
bda9f59d79e7f4885a5f836b9e23078fda0d79e3e52ffd385178b0fe02b55f2f93d582dc6d49d78a
f1c0fecba65f97076eb04273da4c9912cd045ba3289d144f46c0d81d7bf0e14f96b71b3919aca2f6
cabb22a7f8665652b2337074bbc5a244d6d9b85ee1360c084b26ae9ed104402bb1e0b4a42a86a8a9
1e63d2cddad309f3cadb5185e4e734493f6d61797ebfab6546611fe915a39830acfd0218e6914345
eb0cd6ea3f3e4b8b12ce67e05a4118b88842b11c1204754a8353e3be7395fea0cb2013ebf16a0fc2
1d96ee4b9a342ebb3b65495b7132c91a210150fc9cb3474a8ee653206bdb278d0b1865fd3a58c9d4
67bd9b634a85048627a59119b00e7cbc9bb6cbfe8b0222dc6aea2f8d0ffb6a13c37991d898e3108a
ebbaff712123ce1be53caa0e752cdbe2627c300f597f120430108b615cdd48b7bccd6368bc3cc5e9
ea3508d0da59e7860657ab5209906032245f3ecc90b7c36344f69fbdf527b5448d0e9c07340154c4
e3ba12613e209ea3b6418bfe0668de9dd6a47237e3692cab1bd89f36b03d778d228ba9373daa32fb
bcaa68c63ec6da437faa3e4d965ce4b04712d1c9eb1a74cc81983644ea9ffd123e31deed25643e7e
5519c081564e0dedb234085cdd9f1796ca75669a6d8071594eb63c03fae73ea938cd2d5c40d9f6de
b6a6d11dd1c12a50c36e4a50c4c69b98e647a0375398136080b6b5c08e19b227dcd1cbf7bdd56d99
8019a8493c1e80bdb1e9260674d9abe185ee3a3e28bb1774a2cced31113ee6b47448da12dbd8d9fb
1223978af9101335381ebcbbb359db7269c41516c70d5b52209de7f6ce712dcda81a256568abdb1e
5d97d714941a1450ca1d74ab9405937089e8bc0a6e41dc6d0c34b61c22b09e24e7a00e7bc611d382
fe532520a1150577905172182bfad2941fca50327125c6439ce70de5b9f6b68aa3f0ac991a70b0bb
7e80ae25d2fd16317638b1f648607f395147989e41da66ba9074057391b250682761910c7669980f
a5a75bc24b426e2d59d12d081d6ac8b5dae09e97e41ef0d4346e98c3aed3a7aaf306f61e17432673
6d49b7c6afbae8aa437f523a9f367603b26f4c4259e693d0de9edac3d326ff74ff2b31a0f4dc84a5
3c8135059b4778d34ff28f088f3ecef2941a2830d492aa73c2fdd2ddf633a7ea07a1f1be814f4896
f8d906e2c3b2f9a10d68b60fdc0d967a8fd58e19b9249300aaa8910e1a60caf8e8e06c457bad8961
06d719d3504dc67e0501780f2753a7b0af5f17784b6d4c34740d894a8083aa18ce5e1f6b91129ecd
fd5b07a2c970307ec38b1814babc1be40ad2f50b1f55f4a3a7aa441ad5c8305545ce506d573e0413
1034b2f0e920d0aa381120f4b65f31840fa60b4c79d17c0fd5286cce0d51c36e62c22242b62d36cf
7aead83a028118ac14e8bf147930c5e8b34fa8754891a65ba2c1cca8dbb67f18646997f6449b44e7
2ac9324a3440cfbe8b6f407a4ee798a49f3a19d3312b4d8b8841c5ce1a2eb151062f3ab7ac52e6fb
e839daca55aa8979214c8955ab24d413db36f34e8949083af4393cb50a8d52cafd283789fa1c1236
8c39339dcdd61c46e7460409fc775c7aeb3073b8c71565903c1851a86a60978e3c0501d4109b3671
d65b7e467785a3e7f00f8cf9ab0a063dd36b25d34e2f25393a5913a375336f65e6ff19f4b75da15f
dbc6bdf4191233246712f90d044f5ed8d3f3f42ebb40c519f6eca5a317f761d643b58b37e738bb8d
bdd08b81911684c18c6514e31212e333d8bff77875f83b863148e5a902343f33628c90e6896573b5
8a0d68ffc5323158f970fb2108edcabaad452ff5ebcc202bcfe1a9385fe59c8bb635ba0a12a980e0
721e5733e06c365a94d028507236cf29431c17703a0a93f280d11fef7008a3b42e665dc75038bde3
e64ffd2b315d1187e0c6718514abedff1bc78cda975f04f2f15ec0855895021e4f6291c0c1311f45
13f1cf5a2d6f8a715d5f5fbe1b8ef3f180db29c3e7ecf24bcda0f1c8df648f5319a290ca0b9a6cf9
421a2b1b8b12454e22d9798ee0aca4babca7fbef44414729a4f6449756e4894ed4f8bf96814196a1
1ef7328d7976919b4bd1a9f09d5e498db7d53195b165a22c38f127651ab8870176d661ffccdc8f55
2b2cf4d34605e0b1fcc321e44bc2d2880330867a4400d35d4933d226ae7db24493c34ba4690d2ceb
ad9d2935eda25278b2fce0f63c967127abddba1f8819e30c42ebb06e0af6bbcaed30758df4e906d0
a37574cf8065ccb766d1a1167b32d16414640600d2254e933394c26123f734a3065d94b57c5989bf
d75900e611d942b6addb278effb3a1274a3b3b7f2be0a0229dc6e0052e8b5ba85b34882a82d43514
7346d58bb30de20ee16d5a7f23672a359a9a9c6841a8c39e1bcee3cc7e95393917d2032117c0ab60
a3b43716cb8b053d991b8b3913779d32a15a26550fbee08bde09d236e4ec1385e1b8f4cf547bd80f
ba9aa628674482585b70ca8850f61cc44a82586f0f22987280bc99a498a7d393fb660d5bc4256529
0193c0457e0a7a3f2c6dcba0e1652b0291029a5cbfc47ef7e030eeed94784ca05d4d1e97ac945d1a
d71105c425da2f44c12ad3ba717285089c3cd825984d81a3bf779cce7e66391428b57e029fcff361
292a5c7dfe02cb41bcad1e2d76393f52a4b75c793268807cd3843c98b05bd3a727008b9cbbc40510
3d71461df508e5af23243b1951c254fbde503ebd1f66fbee5b0f59f3582f63f815c0d76a773b4b3b
eba3645ef45cacd5b1077beddb253286431362d00ea79097217c01208c13bd53c4971e368d487524
65f2e7faa46d93987f0a3e8c6e01520ae3ebf052137001b567ce8964c267bb9c68542a4e465d3dab
3793e406ed396835d208f6a5280ea731b6556057a9c34a3792681cae8d14f8d379ad743c0ec8361d
b1e2d58362a73e7fac6f2c26f7ef1b956085770612797d63b282fa7076cd9f665e9acaf45c08145a
0cbadb1e240c983ea31bfd2b9623414701cc3fba1cca333f65cb44588ae23b39b3254baebc3e5340
c9d8456c5c769ed495bb30fcbdbbe2ad093eb50e561ec7f0496031bd9ab857316a8c058ab3828d69
9e3196ce06cc7664cba5b4be2ecd81b66c876985af4742c5e3a2a8d20f89eefd05918d1bf834251e
ff93be6a1c451b35e9a032e3161945db342819779e764070bc97b7cb1b8ecc917912d15640def812
c18e18d60e4e18e052b8038f4389ec8d194cb42929fe5042f67b22bba2560052fd1e2e1fb1b9b63b
f7ad7d27c483c9211447f69b3ef2da7b4a0f436bfe6e3f4fb9fb800ca5a8142d64f4ef60f56469f4
d535af5c09b2eb7860b6196f547490f1e32da8e34d3df8deef3f311794c5eb9cdff4de6cc2c38023
7af70fe9c89102c7e596eeb7104bd07008bb5632fd3719c98072687101
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 1345 V810 1 0x0 180 V811 1 0x0 175 V812 1 0x0 860 V813 1 0x0 200 V814 1 0x0 400 V820 1 0x0 420 V821 1 0x0 440 V822 1"

// Rung VGR_Copy_State#2
// Offset 51
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1"

// Rung MPO_Copy_State#2
// Offset 25
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 V3201 MHR1601 1"

// Rung SLD_Copy_State#2
// Offset 23
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every "
"scan</FONT><br></center>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 3000 0 C182
RANGECHECK V142 0x0 3300 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
#BEGIN FMT_COMMENT 
"Deadband for X position difference"
#END

STR ST1
DEADBAND D140 5 D1

// Rung HBW_Move_XZ#10
// Offset 48
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#11
// Offset 63
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D1 0
OUT Y50

// Rung HBW_Move_XZ#12
// Offset 69
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D1 0
OUT Y51

// Rung HBW_Move_XZ#13
// Offset 75
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"Deadband for Z position difference"
#END

STR ST1
DEADBAND D142 5 D2

// Rung HBW_Move_XZ#15
// Offset 89
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Move_XZ#16
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D2 0
OUT Y4

// Rung HBW_Move_XZ#17
// Offset 110
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D2 0
OUT Y5

// Rung HBW_Move_XZ#18
// Offset 116
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D1 -40
ANDLE D1 40
ANDGE D2 -40
ANDLE D2 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#19
// Offset 135
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V118

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Task Send"
#END

STR C101
JMP HBW_Program.S7

// Rung HBW_Program#8
// Offset 14
#BEGIN FMT_COMMENT 
"Task Recieve"
#END

STR C102
JMP HBW_Program.S9

// Rung HBW_Program#9
// Offset 16
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#10
// Offset 18
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#11
// Offset 20
SG HBW_Program.S12

// Rung HBW_Program#12
// Offset 22
STR ST1
JMP HBW_Program.S1

// Rung HBW_Program#13
// Offset 24
#BEGIN FMT_COMMENT 
"Task Send"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 26
#BEGIN FMT_COMMENT 
"Set Position Targets"
#END

STR ST1
MOVE 900 V140
MOVE 500 V142

// Rung HBW_Program#15
// Offset 31
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#16
// Offset 36
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#17
// Offset 39
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#18
// Offset 42
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#19
// Offset 44
#BEGIN FMT_COMMENT 
"Task Send - Move 2"
#END

SG HBW_Program.S8

// Rung HBW_Program#20
// Offset 46
#BEGIN FMT_COMMENT 
"Set Position Targets"
#END

STR ST1
MOVE 2950 V140
MOVE 1700 V142

// Rung HBW_Program#21
// Offset 51
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1
OUT C10

// Rung HBW_Program#22
// Offset 57
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.Done
AND C10
JMP HBW_Program.S9
HALT HBW_Move_XZ

// Rung HBW_Program#23
// Offset 61
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C82
OR C83
JMP HBW_Program.S2

// Rung HBW_Program#24
// Offset 64
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 66
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 68
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#27
// Offset 74
STR ST1
ONDTMR T0 3000 C12

// Rung HBW_Program#28
// Offset 78
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
AND C12
JMP HBW_Program.S1

// Rung HBW_Program#29
// Offset 82
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#30
// Offset 84
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#31
// Offset 86
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#32
// Offset 88
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#33
// Offset 91
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#34
// Offset 93
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#35
// Offset 95
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#36
// Offset 98
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#37
// Offset 113
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#38
// Offset 115
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#39
// Offset 118
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V118

// Rung HBW_Program#40
// Offset 133
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#41
// Offset 136
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#42
// Offset 139
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V118

// Rung HBW_Program#43
// Offset 154
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#44
// Offset 157
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#45
// Offset 159
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#46
// Offset 174
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#47
// Offset 176
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#48
// Offset 178
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#49
// Offset 180
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#50
// Offset 182
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#51
// Offset 185
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#52
// Offset 188
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#53
// Offset 191
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#54
// Offset 208
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#55
// Offset 224
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#56
// Offset 241
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#57
// Offset 257
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#58
// Offset 261
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#59
// Offset 263
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#60
// Offset 265
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#61
// Offset 268
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#62
// Offset 272
#BEGIN FMT_COMMENT 
"Reset X Encoder"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#63
// Offset 275
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#8
// Offset 56
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#9
// Offset 73
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#10
// Offset 77
SG VGR_Program.S2

// Rung VGR_Program#11
// Offset 79
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 87
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S2

// Rung VGR_Program#13
// Offset 89
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#14
// Offset 91
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#15
// Offset 93
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#16
// Offset 95
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#17
// Offset 97
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S7

// Rung VGR_Program#18
// Offset 99
SG VGR_Program.S3

// Rung VGR_Program#19
// Offset 101
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 109
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 111
SG VGR_Program.S4

// Rung VGR_Program#22
// Offset 113
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 121
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#24
// Offset 123
SG VGR_Program.S5

// Rung VGR_Program#25
// Offset 125
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#26
// Offset 133
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#27
// Offset 135
SG VGR_Program.S6

// Rung VGR_Program#28
// Offset 137
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#29
// Offset 145
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#30
// Offset 147
SG VGR_Program.S7

// Rung VGR_Program#31
// Offset 149
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#32
// Offset 157
#BEGIN FMT_COMMENT 
"Rotate Crane CW"
#END

STR C501
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#33
// Offset 174
#BEGIN FMT_COMMENT 
"Rotate Crane CCW"
#END

STR C502
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y27

// Rung VGR_Program#34
// Offset 190
#BEGIN FMT_COMMENT 
"Extend Crane X+"
#END

STR C503
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y25

// Rung VGR_Program#35
// Offset 206
#BEGIN FMT_COMMENT 
"Retract Crane X-"
#END

STR C504
ANDN X25
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#36
// Offset 223
#BEGIN FMT_COMMENT 
"Extend Crane Y-"
#END

STR C506
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y23

// Rung VGR_Program#37
// Offset 239
#BEGIN FMT_COMMENT 
"Retract Crane Y+"
#END

STR C505
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#38
// Offset 255
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#39
// Offset 257
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#40
// Offset 259
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#41
// Offset 261
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#42
// Offset 263
STRN C500
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#19
// Offset 56
STR Y20
AND X17
RST Y20

// Rung MPO_Program#20
// Offset 59
STRND Y20
AND X17
RST Y17

// Rung MPO_Program#21
// Offset 63
STRND Y20
AND X17
OFFDTMR T100 3000 Y16

// Rung MPO_Program#22
// Offset 69
STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#23
// Offset 73
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 75
SG MPO_Program.S2

// Rung MPO_Program#25
// Offset 77
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#26
// Offset 85
STR X17
SET Y17

// Rung MPO_Program#27
// Offset 87
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#28
// Offset 90
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#29
// Offset 93
STR X18
RST Y17

// Rung MPO_Program#30
// Offset 95
STR X18
RST Y20

// Rung MPO_Program#31
// Offset 97
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 99
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#33
// Offset 101
SG MPO_Program.S3

// Rung MPO_Program#34
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#35
// Offset 111
#BEGIN FMT_COMMENT 
"If we have detected something at the oven (c800), are not "
"already at the oven (X19), and the vacuum is not on [Which "
"means we do not have anything] (Y18), move crane towards "
"oven (Y53)"
#END

STRN X19
AND C800
ANDN Y18
OUT Y53

// Rung MPO_Program#36
// Offset 115
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#37
// Offset 118
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#38
// Offset 123
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#39
// Offset 129
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#40
// Offset 133
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#41
// Offset 135
SG MPO_Program.S4

// Rung MPO_Program#42
// Offset 137
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#43
// Offset 145
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
OUT Y15

// Rung MPO_Program#44
// Offset 148
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#45
// Offset 153
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#46
// Offset 159
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#47
// Offset 163
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 165
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 167
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 175
STRN X15
AND C800
OUT Y45

// Rung MPO_Program#51
// Offset 178
STRPD X15
OFFDTMR T103 3000 Y43

// Rung MPO_Program#52
// Offset 183
STR X15
ANDPD T3.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#53
// Offset 188
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 190
SG MPO_Program.S6

// Rung MPO_Program#55
// Offset 192
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 200
STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#57
// Offset 203
STRPD X13
SET Y18

// Rung MPO_Program#58
// Offset 206
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#59
// Offset 211
STRPD X13
SET Y47

// Rung MPO_Program#60
// Offset 214
STRPD X14
RST Y47

// Rung MPO_Program#61
// Offset 217
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#62
// Offset 219
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 221
NOP

// Rung MPO_Program#64
// Offset 222
SG MPO_Program.S7

// Rung MPO_Program#65
// Offset 224
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#66
// Offset 232
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#67
// Offset 237
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#68
// Offset 242
STR ST1
FLASHER 500 500 Y41

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: Listen for Doug's instruction to start module."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
NOP

// Rung SLD_Program#3
// Offset 3
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#4
// Offset 11
#BEGIN FMT_COMMENT 
"Wait for Doug Start Command"
#END

STR C1610
JMP SLD_Program.S1

// Rung SLD_Program#5
// Offset 13
#BEGIN FMT_COMMENT 
"Enter manual mode S10"
#END

STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#6
// Offset 15
#BEGIN FMT_COMMENT 
"Stage 10 has manual controls for SLD"
#END

SG SLD_Program.S10

// Rung SLD_Program#7
// Offset 17
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#8
// Offset 25
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#9
// Offset 27
#BEGIN FMT_COMMENT 
"Manual Compressor Control"
#END

STR C1652
OUT Y31

// Rung SLD_Program#10
// Offset 29
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#11
// Offset 31
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#12
// Offset 33
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#13
// Offset 35
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#14
// Offset 40
#BEGIN FMT_COMMENT 
"Manual Auto Run"
#END

STR C1611
JMP SLD_Program.S1

// Rung SLD_Program#15
// Offset 42
STRN C1650
JMP SLD_Program.S0

// Rung SLD_Program#16
// Offset 44
SG SLD_Program.S1

// Rung SLD_Program#17
// Offset 46
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 3000 C1600

// Rung SLD_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"C1600 is set to true when timer is running so the conveyor moves"
#END

STR C1600
OUT Y30

// Rung SLD_Program#19
// Offset 54
#BEGIN FMT_COMMENT 
"When the timer is done, move to stage 2."
#END

STR T200.Done
JMP SLD_Program.S2

// Rung SLD_Program#20
// Offset 56
NOP

// Rung SLD_Program#21
// Offset 57
SG SLD_Program.S2

// Rung SLD_Program#22
// Offset 59
#BEGIN FMT_COMMENT 
"State 2 is where color is determined by checking if the "
"analog value is within a range, and conveyor timer distance "
"is set based on color.<br> <br>"
"Need to integrate a counter here still."
#END

NOP

// Rung SLD_Program#23
// Offset 60
#BEGIN FMT_COMMENT 
"Subscrib is to get value from color sensor and convert it "
"to something the HMI understands.<br> <br>Need help with HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#24
// Offset 65
#BEGIN FMT_COMMENT 
"The disk should now be in the center of the color sensor. "
"This function checks if the color of the disk is in the "
"blue range. If so, sets boolean value C1601 to true."
#END

STR ST1
RANGECHECK V3200 0x1 23000 22000 C1601

// Rung SLD_Program#25
// Offset 70
STR ST1
RANGECHECK V3200 0x1 20500 19500 C1602

// Rung SLD_Program#26
// Offset 75
STR ST1
RANGECHECK V3200 0x1 16000 15000 C1603

// Rung SLD_Program#27
// Offset 80
#BEGIN FMT_COMMENT 
"If C1601 is true, Off Delay timer starts output is set to "
"C1604 which when true runs Y30 for timer length."
#END

STR C1601
OFFDTMR T201 3000 C1604

// Rung SLD_Program#28
// Offset 84
#BEGIN FMT_COMMENT 
"When C1604 is true, turn on conveyor."
#END

STR C1604
OUT Y30

// Rung SLD_Program#29
// Offset 86
STR C1602
OFFDTMR T202 2000 C1605

// Rung SLD_Program#30
// Offset 90
STR C1605
OUT Y30

// Rung SLD_Program#31
// Offset 92
STR C1603
OFFDTMR T203 1000 C1606

// Rung SLD_Program#32
// Offset 96
STR C1606
OUT Y30

// Rung SLD_Program#33
// Offset 98
STR T201.Done
JMP SLD_Program.S3

// Rung SLD_Program#34
// Offset 100
NOP

// Rung SLD_Program#35
// Offset 101
SG SLD_Program.S3

// Rung SLD_Program#36
// Offset 103
NOP

// Rung SLD_Program#37
// Offset 104
STRND X36
OFFDTMR T204 5000 C1611

// Rung SLD_Program#38
// Offset 109
STR C1611
OUT Y34

// Rung SLD_Program#39
// Offset 111
STR T204.Done
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"T3","T_HBW_S6","",""
#END

