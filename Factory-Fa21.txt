// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Nick\Documents\GitHub\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
e52ceb0d068310b9c9f009feb5f06e397b7107cc2aa34a7a284649c3d09e1eb70106661a77ffde01
e2b6bf69722d418f88cd1d026447b7a2b4a0cddf32af9c984582e4a7b8cdb3600542f4583eb733da
66f61f55356f012abe5f3a0daff0ce128f576824ae9373affc818eb4bb3c76b7b60568532f6d6a26
23ba0891298f7df3542f96c2a78ebc8f6b157c3b3543c01c12cfae96e59bb92a2f10a4dd8c02156e
388886874e96f8c1b266674b2dc482cfd2c7356e121d33299f7e73e700ba03db68184694a32e720e
2fd7294d22b2512d8e1eae22e36b23669431ade54c0a590ed7240312d182d8d9025e83d16dccc3a4
2a74ab68f537c424b2f21c4e8885a79fe4bf39062e8f5672312b2c954f32488b8abec6baafccf979
a766ec276fd6d39618bbd6f323e66a46d31a826b23b2051ecc0ee1bb25deff231bdf9dfc565c7b74
05d011adb3bd6dd4f0abaff582cf98cc071d5b83aeab7c0bdbef45e786a50e0d8aaa69069807e10f
f6c59ee1cfd658dc613f10f69efa001936a27c6c95417827d379b874d7e74f9b1b5abf49a551c04d
230f89eeb9638a7011a85401d7f959a10f7d1f1ed2a192b49419d977747084907467860398d4372d
e3eeb3cb4b5d13fc191427531ea3a29360782e2bff1b64a92aaa4a1683c7e172ebd89c9d7e3d6d1e
c7d801fe59ff2b9e3cf5a84df6defb4db624f7b263dee8ee3d9d1d9f9c829713acb0570bff2ca3c9
dbe29ed90851ca0c24449f9d9c4dd490bd377313acaedd43a5be656b661a6929c20e1da72ec00bac
f4ba87d10cfd9a5887d28d8a552a5ae20d6e7849e0ce43c8c43e9ada3c1e0941eedb0890a7fc24f7
fc286c1b0ca7a8885212b41537b4b5d28f953136a89bcc773bfc04c04960eb5536c531b796b06fdd
43d3ad1579770bd91ea865b4e0b853c759ab7f25ae4a8ab3696b75d91c0955fe7cb607cb7c33f3b4
ad3193ebd59384fd49e1e29d7445386ab73c64672c9d3971a775cf27f5c36e74580c6b966b994cff
7708ec202673b43b7af1fe9569e3d87a7e3f87f53c5208e821adf9940b326e727019975ec93f528f
35ffb2cb4d06e0cd4f957860e13bd765f3d955732eb1fd18b99793410f3ef612ae52d3a863060aed
9c6646234fd155cd376730abf0736a64a1b56c85abd84670ecf6da3251dc30a5a0c09f71f330cc40
d34f1cd7a6847e579246b50eca70640af08e93292d898d50e1289bf078a2e6ab7e5d7de9cc969845
de03a18a83aceb2c8d7b1d6191f9743cc288aaa52d810c6e58d07f4bb079b433216f233def8e4061
1e3bf07f5852d25c8ef56af36020689457c295aa510ab9e6579bc95211b59fad61dc5d42a7729d1f
1258613d0e42108225edca50c1ae08acbcdd80bdc178d82b80835b4b5dfc3f77546e7293c6ef5aa3
3f14fce36452c98f0618174c29d1a268e64500054bbd21a88bbefdfa0c7795356233498400bc1482
857f472a2c0500d145137f68605f0656d38c682538799159b433eaf6ac1a13724402a512699c445d
5aaa22e3b3eb792e23b5b4ac50bfd23d208bca854af228fd5b8bdfc1af596a7f1fd41ff314e00011
7577de665177a0d35085aa3d9afde8ddd634c41dbb31f34a910f0812c25e3625bda36b5a42ff941a
3965b65e062cee26f4a2f51d89e4f16efd8429edf41a11a68d96f54eaf74d9b08b1ca39c58beb871
84c37df9345a584524b91ab1abb62f494dcc0638aadf8e2c03131556ca597950cca8829fbdff057a
a0ecb3155e754fb3a8ad99f294d5794e5d9fff593759fccba2febfab93de51f892c3ee8a25628cac
ab99a682fe2fd100f72d76ec2826ceadd0473082860f3507381c60b24c9d6ab0eb7177defc376bf4
0a4cce32578b03934fc593d2d2d83cad497a485c995e266a4701665c816427122ff5ecd559c82cc7
f8018603bdcb9ef61756c803e9b1ebbfd5d8558c7f19e23af58dadea172708523bef2a0c5150f86a
264629b63d1ff930787aef47b4485c8952583264e073a69fb21223274e6342a64e13d5084dc84cd8
e448feeb463bee1ae829bc6f4e3cc37354bae146dd48b5642821712f8bc7e8fd49235f91639050cf
6d09490cf97596b8cca6db06839865a37a5c4dfb262bd1fe6fedae189735437afbb8a6e6b0f23af4
1786fb0b99caed6d64ff9b91a877eb2cd9374bef21ee6e99ea612b02bce57baec31ffc1d941dec42
f6683a8b17fe078ff80ae79ff629c81697e97aee91a22502419501c93018457ecec138fd815d149f
77f5e24726ce0c8c219412f2e1bdc721b98f52b213e033c35343a1d7a241db3057e94af6d65225e5
83ccfa352527d4c700034f013cfab8065c1a984d3ae62c90110d2d198357d5ee1bf788e6084438ab
e8504f741d165c504814e3612395f5e35926f25415bf79dfd1d592c09e4e037fc75e3e00a2e959a9
33a88b19ed0bdc8eb1fc29027b46dec6dca283d0439855b2edfcc706a9d0d6bb4c30be92d0497138
654b5afbffa236575882856f61bbe5235fcb4ba55200a88eb99eea55f5dc59f3fe90206eab304aad
6213016184267c91ac69047e1722e604f247e68a7e8d67f3f59aa5f3b2cf3bcacf62640d07520171
9a7d680b3d8b6052469b28af880e71e677710e712617b1428878e8f886f015f76d86614c5a10d00c
14cbcd7bb26cb21ada772196039aa7b548cd938bd1ff669d5d1a0f667831a3c51b3ab5f66fd77f58
4630525f6aea12953dbd955f2dac7a07c166c5422e9abda2b24ba995003f7d045a90348b3b0d2da4
2a7a9baf76ac1577a1aa177c9bca74a6595b081707daa79a3101814cee9a38dfc5912e4eb2f96d6d
9fcdee6ef6042cc83e271aa44f9699bfe23438f350c5c8448bb563c8bc99c7e906ac8b0b8e7c4099
ba73f309db7b5e5c4a176a96b3218819c6e4ffa0bbc6b0e9d967d4915d1ef3a80dc00c674b311baf
ab8bee2d7611be0864cfcfe2a88772ea3a922ba8b10bf63792c148fdc83dae6c580318265bcadda7
55261928d8a010622ede6420bab845d74072c8a2f8f764c96c5d78fa577f647832aaf01effe79f91
f0548fead2331114702859388b8ebd58744b3f16d6de72a490ddd4106489c31018cd2dc0f33834f9
9e972815c2683b6e2a7465e354ac91f6492fb09436e13c250e22996d30c957f128ca170d7dbbac26
84132631e9cf5ff1bb5fe554c5be61568fd7ded359e0658800425e1f54b573fb67e6ba105339213d
cdd8c169b890c8e37526197188acc1d16218e03182e290a8b925833c10e8f7b8810a2d3494a9d26e
7e384f7bc5acf47edc4b7e690d7d4f99d9ba402707100a9c49c61159655ec4b7d6b642c9e22a9100
4e5ce2f76547f692739138ad281b5477f42f6f666101118279437af1ead2aaa1f224bb187898da3b
aaff920f02a96f173d74c1e46a7a768ca3321280a7b5cde01bb29175c1ccfd17dd2102cd7c2c752b
72db49f63c33140430a093134142122da31554f39999a3090ceb6ab463e2c7e36ff8d10eda2053c0
2b2f9e5e7a4c224fdbf5881f5f1b79470392dcfe8788bdf39e9a18ce5566a3a4d91587f5c6b3f6a7
6bff4f2619d74cfc33d01922fc17aab0e9fce24ca20805c1c6bbd746995203d6f8e876e19416b4c0
9ebb918a3ec87b7c997dc665b121395493e580128afb56ab2d8c9e526129e0c4e69b4ebf61c3341e
946c6f2ce7b0d5cbad9afd1fec369d06184c8d7e37753ef7d3315b3a59db63b85ae1659487aa2113
0f50f56daf2ba328fe1c4b5a54a82eee5e0b90993afb75a49dc8b35642439e746b13c5b21057657d
dd4146d676fd9d1307a095e7b28d938166f7370a3f0f6266e4d2494241e35f91007102ff79d82ae7
143c1f57dbae7bb19a91f3741fb9fe99024d766ca1c88050f0686d592c6938e07493fac50b18e84c
aa4d36bc0a377da119ba6e5ec59ec3fe18ff6cde89163fe03288467c249926e65822d171b45b6ba3
4d786648a163b1ccffda2edd13eb3bbfec3aed278ad462c2de6d0773326a34b8b4ce1128127b4737
a06b634a9570b7c521e339447752ee1d07b3feb7d90e79bc71b039f33a3ff2af35ce2b27d4d9e8f6
d829eb38164214dd2e0868829de532855b6139841c0c2af94548c129d479dbaff1b92b8e1c1c4505
82c97c3dd90556e0231ccf6c9dc8ba2f9fa91dad41a601230283b1f390247974688d15782ad508d2
1836c921b340627095cde6e63f36763786e9b64f2bb82beb5ad1011bf70b6d1f78fa3a3f6026c567
cf1565d6862bf49f2f7d80337a93510d21650ff27d8ca1a88fa54f02406a778e3fd1eca898d6f006
9314715c4cdf4c2ee2f64b7020831665f027a5194d3d3360e52f05f12d0eb8e9c6f9c72088439ea2
95179dc93148b8938ac5d60cf4b3fb2969fa2510192612e21e7f7f5c167a08c7c2dcd979858dfec9
00ea8e106a237fdd65ab24550ab8bb1dad769c27ed747bd2ce3543d8a487a20efdcba9dc9dcc0094
ddd385fac1b07f944fad5ad05aa267fe43549fe5acf351e927a3bafea07ea934b67dee9d41d328db
63f2098b2a5908960aac3956b4959e4e4ec51834930dd994df295d3002ea4d9d78139637211d2784
8fb64c8612e2aaf4a82e45afb5971d9546f923e7327579887f76687e351de88e3c0420d926962bdb
b8907754b22dd291c20e42bb8e3eb46db7f3f2949a726d25b060016682e661ac4ac4c15dccd04a31
e776ce6a7f534cc68d2febc48747f8335356822da7944a5e804fad431aa350416f622a6c8260544b
cb8f224921ca4e6e5aed56828434c2a37e66e6f88fede0868d2cf0a02c644d2b1dfe0dfef4fc4dbb
5c132ef7c15f47f0c57b2ad3f197a1426937b919c07175281c09cfb0287b69ce8faa75da781f517e
d68c88ca7435402491c696c89534b33fb85f6245ff88a318ff3113e91d747ef4c42ec91d447e0396
b1a8e52a19cc0f36b32c0172c056d40ede416c7e2cf1c87856a1924784e51fcf7feb4f2a1bfa6a71
0ae0ffa1ab1b3541b756c79beb01589005ed88e6d4812c2975e0276a2d703057b383100a307a96e8
0f03a81b1c4e5d9442f3ad316adc51fa223871e7c724eeb4439055c0779d1d82d2886fa183801ddd
643b5d3f9513d945e397c1a0b4917fd46eb3295635a42352dcc934d35aa6a21b8483447274873036
7ae84b0e0ba0958f3d9cc0eff382f4027caf4ae020052f13e2c26fe3c432d26a65a49522b5b74579
335c192b340df30996841f4d48019ae50db679a07c11ca75a5eafe3e53c784846d2da1bdc7f080e2
7c0c083b1e1baba405bc4dfc976cdc2422351710c63b92a9999712caa54249f3ed5d53a829beca1b
de6030f17218e1773445af239e4a13eb9e7369ad76dd92d1f3ca50955d1509c06232d91990a474a3
01466d76ade65f9ef0e4c89707c8be6aef601c1df4d18c17511cc5ae3b7a9efcb808c13d448f4311
c8f962c3976aeb0f592cecc7b992a2cc8b38bb57d3b9a37e7ff4093564edd84800afd02d52814a53
03943ecb52c633f847cfe22fa79cef7bae4ad861164020fce192abe3d4a4a768dd8717a92f1c5a48
6c7cf182d133c96283455710c26ff02904dbf2ecef8968141642da06d36319374375502b63b6e95c
99a38d9daffc490e7e41accdd6404fe19de032ee25f6bb0d786e20dee15bbe514016a5ffa214ac69
e93a776b51e4ec9f6f4da3de365440f8d8c5485af515ed702aead6f6010b6dd88a7130f8b6683dfc
37b1d12059863d123e09f61c5918bdb51e89717123adbbc5ff0b1594576661104fc59990f8e305d7
0e1d4dcedf929a643c788f8ef65fa242dc17bdcf9b54aff2439bf881227fe031d581b8364d67105c
7c222a83d5f7aa8533ef56d350865d8317a88961b1582de14d7b0260bed51d7abc7b60dd89e59200
45854df87675778582a7baeef4636382f5d9549fccf91fc65bd056f1e06eb82f705b2fb14e769dc0
eb306ec71f44f83df0ee6efec6201517a26648b3196dc1c1a1cc17ae64bbfb9c503a0dfa936f9ec8
1bfebda05429b17a893391c2e179f93d77785ca358a4becaa88d099b8885e803ebee3d102264eb76
37645be64b664b41360bf01ec72c4a01723d4ab0e30567f10a904ceed860cbd400e204c775ee9e4e
b6e3ada0841237fb596becdbde182602a41bcfe8106f1e0855aa26c9faeeb1e74aa544c809defeb0
a34a8c37a4840723f6627c1722ac4cf0017bd70256d69a6545a2b0efdb2f7a8a9268fe804c9bfb7e
be02e04019c2d03323d1b9d6a77c453d2d1807489e9976f14ee6034bef2dc8bac6c7a801340aec42
04c5acfff0d52dcf095f441827253ac685988201bce48b52f6276b2d78681854a448a181b307a888
264be8cbf5b8b7ed53e2dcd1cfc55bdb427af33c8906a2d3965b01a9d106219774e1061312a51916
4b2a10ec9085b0bced6a4da7fbb1989558d0dc60346b9bfaefc46fedd952cc62af841e0c78269a63
c64790aeb0c78ecfe80a8e66088f29e3306e6e1c026722c44908c831270511e432432fe607221f36
534cc7332f8bd119f9bf85225fabba513804b24d7c5b8537d0bebee80c4d7f07cfb8f23df31109d6
a0ace5d19cf9a992fe2b13dbfb3da115577cc855d049c393956ce3a03f75e0ada55c7c58954d402e
12144ce54ca2b739a32ed81c420d9f0e72f9dc735453f039d631cfb79f7ab62ddda6a696efbacb3e
d7beedc823dc810c92c4d9a32831a5b23f261b9c911f3df1728ff7c3ce699de2d5bd0e748b8e70d4
58863767beaa2bc07a6050e023d336a9e901d596b3dad5fe8f0456ab7883999621e1c5b65361d9b7
51402eb09ef866f4d6ac30018f005bb442d03aa18ae5add6b686f7e23fdec7ec249f270650a26fe7
c58ec727d57fa402aaad86e374426c91dfb210b2880c8db7448a3cf4fb9cee505e53216a686d2dc1
60393dafb270c3549312f7f96b6d10cb3dfeded7d5bbf5b4839de9fac959286d10e864baeff22893
88ead30ea54935b3f347e7cd6b83c0829c4613c3ecb3e9c0ee71e2e48c41255939776b74bca638f3
fb907734e032c3ce8fc70b003115e33c0674a39c3b1dec55329b90ade4916e503ff7d871f39b6f74
4058946361e2b6eddfed380c9031a005c49fb57a2927c9312458c5f2b22fbb9b83620c1b0c23ac0f
f20aca27682cef55a63f68aab1c8d55bf84d7773236d3cdc1214f8fe08a8e1ee7bc6a81ebd9f7414
0236c46e7c52d317b871d6ca0e0416e99e60f6ec483ef6844305912f34be4b0e0a0d30739f9d58ab
7ead529fde5d8440ebf66b48ba9b0096f96a821ecd595b2f7c5a35ed29363e7f7b3ad702c8cd4735
4bbbbf8c02f3f5449667a22d06f55de3b979b4182092a89d7d0b2ec5ca7dfb8ec4680d32b6c8f746
c4be16f8cdbf4a4909d1f3fd188d146357a07a7018dd85a8754c60dda3657e1d5742362ef3a475f0
adf3ee20648c79f9f9c385e9b71d290550d4989b7e01276401b6b3c95a1ebc47fe3a79c04441229d
a0e4d755b4d681b9ec754d0be8514cd08b84c4cd6e67c8b735a1b55f42196b873a472fe07009ab00
0be5b9e6e1a701e1d4b20f1ec68ceaece72c85731d34fa2298931d776d4097eb6c3cb33ebf6cb371
c088d80526add450289ffae8ab68f9c80c937717bf487d4b0119dbb4ea2213d223369af8e616a4e1
c2ac8daf81dbcdd5f733928156e17aafe7ecb0b514d7c2fd43c0ca1cdb32fd603c4192ff362cebb4
0cbb5816ef1c53aa132586fa45e7ed74c16e6e5e7859add2fc3258fe737756f1990e0c920f0efe4b
57fe60fc43a1276673bca931257548c495c76b009f8089abcc61ac2a911005b10c0e59a8dcbf6512
5a60d67dfc772f271ecb9575e30ff70b280db65097c55ea849f4ba10984d2de3bf45e4b0d543f5d6
9c5873dfb47fd8e41b1584e0c938a22f72e46cb9a0c8c462372b6eabed4239e89da1980e0a335e7a
66013d46ab4fce1150e4404f0bcf5025d5eb7eea3f533188fb6cb19d94030f6946ce2adf60cb8e4e
dcd663eab7587de35c1bfa65f0fdec4434af79c414c3c7b949ad3eb7e3999ae3d16aafd52d6753fb
083cfefcb9be6a2eff32d95a47f9ce8524be651bb18deec88a7f2f3c009869c970b7daae67e733e0
ced70d6db33da8423ead30485759ed1f5ba51dc79132c3fc509544ced05334dd8f47ef8b9df7c3ea
574b22e1dd9556056f005c2062ecb308b99b568be6c4c0c9235d1938b3eb66054f15a87be382f06f
8b4503268902dcde04183701dc3955e0251be83323203353d0e8880c0b716f8aa9fd1dc5b7a499de
649c42caf96de321eab3e4f9e25bfbf45a5636dc29f27a95138f31441f29ec175be46d6d14b58826
0da4332df33fdca3f95c902f524af7ee55739ec4559573a1fe3b17c6792cfb52f5ecb23bca13d97d
8ed70274fd365b13b4d4050c9a0db4218bcb5496f0bc79412a84c2f14b82a9fec23188d58bea98c3
3e7776483d4500c826738a6540342d1f8e09f9e519fe51f8da74f3a64b75b1e0a6dabebc01c09808
be066e6d74684f7b51e30cb788da34ad97f07e7a877b169bdcf8d7b1154290e329dbb558c7138477
414b7102e676cb8164355a4b4339171de34ea870532a7567e91ae328757ed0107c7cbb42f3753770
25f1ec4a66019467cfe7f3ec6e79355cea47dae016088fdd98edd7a32bd10fea3897d851a5e85b5b
1f17df000bed69a87959a82430620e30427c6d79682655268065d69960bca1552fc4b6a5f2fa9a58
d83c0bf51201e7a9a509fe9d80d3c6fd89f674c1a8948dc3613c98cc24173eddc41fa2681993e297
82dd9db8ae391a3aba5c1f45bec9087ec43961fede78f37481d2c7d442fe239c107adb3da16d76c0
0f0b338ceaf41365c38118a1a78cdeef7a72988e3e93c232eec2faedbf7dd3bf8ab7da19c37f7497
79095260f2dc569925faa8c4be82bbeea8511d519087a16170d05df8abda25ec71dc51645d083235
1bb413971c55dfa43c69512c227345c8dc5dcfa15b32c62c06c474fadaa7f9e3ea2050935c1f7d1c
fb98225ff5a91bfc7b90c32e07eea4b1ac551f0798f35458d87b771ba19c1114e2559dd1812efb82
0e8ccb67921e97678351570e55fcc1e4e3cdcd838621cbffbd31063b93b187b9c20d4d54fbe065dd
d43dba18f6d6c7da98c68e953057957f66152a474109604d8759f6f5735389ad593ac383d6a4a10a
ff2d55ad06603cde593d39077428753ab259428b973f93bdd22bae421a0af951a2ad78ea23758809
e68134a5f8b3925762a82e517e53710cd60b4f811d72cd5a65755832bc2d78485f15a66996a6fd1c
e0cb9502476503aa31d8e5a4c0aa3774056cb11fe041cdfcf416c1d76110372b1bc3f5a9ccbaf66c
3d02fa46370c7bb83990b891f477c5c689d4ab09d998535f6e289eebc567d69a132e3ed1535e812e
47c541b875e17727251586547e7b59320987dc909637273a61efcf43846d4c67c91ac7ec76db4282
c1692979de796aaf9baf7d1fe4900dc8fae4dc61b5146080329d5858825213cd35e0427e7047e16d
2be8810d7fc8a6be2f8488c783c823c0cecc72dd7793b2434075c7d8a069c60c18143e8b4cd9cab9
9560dace9f3e96d0648dfec2441107379a7199f429fba262b2c8c178c0e837b5f7666f8a0d2d0d88
cd9c74fe18c9cda6bcb84c9d3a8b9cdcefc884d0612c391375edb5f7a7f94df09a4591b8603844a9
b51a8cbbe53a19363003df6d2686a34b1654e62e99e0c4cdc62abd86b0879ceec90123ccfe492a9a
a5b93c168366233f0a5e64be84a857057f9e00f4a06c01ec966ad8a126f9fba5a77f265a7f0f6a11
bb5d61061c86b0b399d17f0225e528342a288cefb045f22677d8f6dec53d5faacb05964711cd67d7
c955c90d37cd2e93a9cfa55ac1ddd4a631d465926875d7b248f66259702c078b65c8566c082529c0
4df153c4a18022d018eaff1ce7a07482cf448e1514b4f7f5cde09eb02d6746336f976ca81658c115
7b61f86b1e2a2266f07e0d19983f1397b3285cc3646d309d8099f7a0eea93300681c2198b387440a
1c48ac43f78f6b6c310b433dc84b169fa76b2e3e6b8c94885b3a88a5143f3990c680f410668efee9
ef931a0a0619aaa341884fa8b5d3371fc1551b0f9a3e9cc0b2c6cb0022a5ba95047f3624c61aa50d
111511a8b13d667d3ea42f73874bee3eb58a38d84e9d1da991dbdce9e4cdfd4b988e367a89df7f99
41408ba5221b407a2f95f22a0658889391c975e49503e4952b973bc0370fd092e07d3cea9d20f6a5
a449f8f0335500e4cd7981b116bc8a3c4863f4284eb3bdc45fae52418b2327b7c3c4932263e2b1d6
250ac8d623f408f847303d68d2d2e86f3ec21d9f434e3c95d71e7d13451454a674f13fdccc37fea4
56ea1e6192b370f56ad509771a699c14c6a3f6367b1e2f0ddecb3c15a86f99e93c70ada4effe7887
1f3b5e056805633c6a66506cae11a0d200d298947ff0c893c334bebb43c40ded614c0f20565f5937
60beb65706ac9e1fbdc08ae5231bfed2d5efb17c9875d0fc32f52c1e0bf5cf1c680b965fefd31565
803a47b1383ca4e17f4415b42a4994d313eeca0696979fca365e532e00751eac8757d19f07d66426
6317ae8c70a4c02cee1c9f435fb4114bb8e2d57ade2195743a390a67d6d156202cfbf0e3057a5c8d
33d2540d8afb1f4dba4c954b33d8079202ebfe01db35e7a4777b5c537aac17597a3fc0c6cf3ad3b9
28df0d4cf8da96daff1792c3b839df093fbc8d3d259eb75785e985cc212e112e286ca9db8ff8a763
4b734f5d96404c4f39c745aea0cc7e8fcba273478e3b73fab6545abbc0be68c0ccbe1ed6483be213
c53b3cfe71bc987c49053a987c3be2fa5ef65e9fee3b9f869a11bed8122b9d175d83e6dbf638196c
cec99fe51fb9239c27ca7c68d1d6b8253af47c0cacb951c4c7b90774edde5656211603c4deb17fdb
ff2ceb79cd5951b5fb454b01203f3d4ce253e51763731217dfd320409ae7fe23c059089401f69779
a34f05ce5f96cda1441a5f607c1077d15a5bf8d79ded506f55d7998e21b8a02790537aba26c08279
ef7ec093e13d4bd711308a805b14c305efc810361bfaaffc6c62926659987d406888fe352ad1a31d
d7d1d9000c77c8f4760c1709f830f3c0c85beedaa934a3545dae66e7779b2e57d022951095162e4f
bc833da34d8e21ef0087b1d5cd480c84f9e86085beae34c12f7df35bf0a001c8526a81699f7244a8
bc7a8c65bd1e38bed338573e9d64c03b08b6be35daf98c25efc79b6a46083dff5f2bca1ce7837fa5
e4ea380495bcd58b5fdf8ad2d884d1e6c68956ce09edf43de72e9cb17a5fe9a0d7f1b1f49376fcf1
0105215c4ee12469cc9066571e601680fcb300e5497324cf91e7bd72faf5443a8d0eb16b068c7661
23ca6156b74389ce1a672a9e7afdf42dfb163e2df237254cc5cefd190cc2152ce17c0e3f6667b884
dfa90e89815141ed7d91c8a9b22edb1632d3c1881ef8ca98d4999ab40ce75e32718abd3cd2db2108
21aa22b3b26fe0a73e0bae8524cdfbc1b3f1f44bbf225c1193e4b8d16d7b43f518c0802a1f00bec9
8e9edb9b8e42a8c825f1672375d3b50e86a851632d92cd83c28b9cedbda741d659aade3dd3244177
7fc35ff3540724cf9dcf18de3260784c328fbace9338babf67ca9deec9589fbd8a1a9ad21b067188
c00c63970d364269b4a94a3189da194275e65ddf7fb549678a5199f5f3a2e815a1e427508354177d
507945d2ab825de8374b61ee29abad34d29256bc5295985f52b492a3f625cdf2c0adc7a3240af8cb
2cdf637616211cb558a8b64d7179ada647b4816b93f13e0cf808f9f855b2744ac170f88ace9dfe74
6f7a19e8367169d8568b84c4eaa6ccdcf2a2aa2a727f9f0fb8c6dbd0940a5472568ea91f37af0fb1
04db8dd1558b6065205ae9fcf19a6752c4707b23dc378f3d9b75bca9e2f4a1d7f52d57f9acd91fed
f358c904d96ae4a73adcccbb2e2ac71725ce3351669f421b6655e7597f16c86e47131d79e11b39b8
dde96052e4e597aaccd73dd763f92a3cf960470b1596c5be5fccfb357e470ff0a9e380ba3505fb3d
6dbdc5d35c02d93237a4425e5dccc56b8e1e6ec6660f533e2752c9a0c005527ff5f380c6d2cce9cc
c4d0867c1b7dc229b452496c6ac4424d6d0a3f55a00b82f31f1d75292f621646ca6efba1dd707975
eb0bba7a6239b29d0bf1ac0509e656502d2343ab53dadd8fe9f8b8fef8e5ac75ac98fc3cba17cfe9
20c2e73732c67b1eab6a27dbb4a622fa7657ae755c3616b91e45991ad825e6f68a27d77beeac0fec
04e87a6ee70b358e54165e965d26df625d62d58ddafc24434832ef5573c0ab20b6f9f4636414717a
36998843aa071bc880550cc452451903083f2e9f8acad110981856ff7afd302e7bf2ce5752519332
d4a1e6c19fbe0b994da8486332200a4049ebf624a9b2fdf9fee98e223f263a812e830b0875842ce4
de5a11bd561d511821e8cd84ae3f0bc2bce8d85c963a4d7dcb48a4ee82283d3a51437ffd6978c6ab
1cf63831cad615e4511aeb1b663937f1fd499cd0bd2a88234cd4b204edd2addabd82757fc3222a97
d0a75ae277e079362345244123ce00a7678222228a051cf2431c41d0925582f24e5b1741be16d9df
b3cf8e33a680c825991774aaf3dc6afb01dc12526e2ddfc52fd3
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
 HBW_SetTarget_XZ <Virtual>  0
 PID_10 PID  0
 VGR_Movement TASK  0 -1
 SSC_Check_InOut <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 V801 MHR799 1 0x0 C797 MC397 1 0x0 MC250 C799 1 0x0 MHR420 V820 1"

// Rung VGR_Copy_State#2
// Offset 43
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 C810 MC502 1 0x0 C811 MC503 1 0x0 Y16 MC500 1 0x0 Y43 MC501 1 0x0 MHR800 D1600 1 0x0 MHR801 D1601 1 0x0 X24 MC504 1 0x0 X14 MC505 1"

// Rung MPO_Copy_State#2
// Offset 41
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 C1621 MC808 1 0x0 C1633 MI818 1 0x0 MC819 C1673 1 0x0 V3210 MHR1601 1 0x0 V3211 MHR1602 1 0x0 V3212 MHR1603 1 0x0 V3213 MHR1604 1"

// Rung SLD_Copy_State#2
// Offset 37
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 C1200 MI600 1 0x0 C1201 MI601 1 0x0 MC600 C1202 1 0x0 MHR1200 V2400 1 0x0 MHR1201 V2401 1 0x0 MC601 C1500 1 0x0 MHR1202 V2402 1 0x0 MHR1203 V2403 1 0x0 MHR1204 V2404 1 0x0 MHR1205 V2405 1"

// Rung SSC_Copy_State#2
// Offset 25
NOP

// Rung SSC_Copy_State#3
// Offset 26
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_SetTarget_XZ
$LGCMOD HBW_SetTarget_XZ

// Rung HBW_SetTarget_XZ#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5280 V140
POPBOOL
ANDE V105 3
MOVE 2990 V140

// Rung HBW_SetTarget_XZ#2
// Offset 23
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
ANDE V106 3
MOVE 3240 V142

// Rung HBW_SetTarget_XZ#3
// Offset 46
RET

// End of Code Block HBW_SetTarget_XZ
$LGCEND HBW_SetTarget_XZ

// Beginning of Code Block SSC_Check_InOut
$LGCMOD SSC_Check_InOut

// Rung SSC_Check_InOut#1
// Offset 0
STRN X42
OUT C1200

// Rung SSC_Check_InOut#2
// Offset 2
STRN X43
OUT C1201

// Rung SSC_Check_InOut#3
// Offset 4
RET

// End of Code Block SSC_Check_InOut
$LGCEND SSC_Check_InOut

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"Initialize variables<br>"
"Copy X & Z current positions to local variable to remember "
"initial positions<br>"
"Copy X & Z PWM value gained from modbus to local variable"
#END

STR ST1
MOVE $HBW_Encoder_X.Acc D140
MOVE $HBW_Encoder_Z.Acc D142
MOVE V118 D143

// Rung HBW_Move_XZ#5
// Offset 21
NOP

// Rung HBW_Move_XZ#6
// Offset 22
#BEGIN FMT_COMMENT 
"Loop Start"
#END

REPEAT

// Rung HBW_Move_XZ#7
// Offset 23
#BEGIN FMT_COMMENT 
"Enable/Disable PID control<br>"
"Set this to ST2 to disable PID for XZ<br> <br>"
"When PID is disabled V118 & V120 are used for PWM %25"
#END

STR ST2
OUT C90

// Rung HBW_Move_XZ#8
// Offset 25
#BEGIN FMT_COMMENT 
"Set XY direction<br>"
"Based on starting position compared to target<br>Needs to "
"be inside loop to keep outputs active"
#END

STR ST1
DUPBOOL
ANDLT D140 V140
OUT C51
POPBOOL
ANDLE D142 V142
OUT C52

// Rung HBW_Move_XZ#9
// Offset 38
#BEGIN FMT_COMMENT 
"PID Controller for X<br>& PID constants"
#END

STR C90
PID PID_10 0x60 $HBW_Encoder_X.Acc 0 8200 0.0 8200 """""" 20 100 WY0 DST511
PIDINIT PID_10 1000 0.01 0.01 0
MOVE V140 PID_10.SP
NOT
MOVE D143 PID_10.Output

// Rung HBW_Move_XZ#10
// Offset 63
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 88

// Rung HBW_Move_XZ#11
// Offset 78
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE $HBW_Encoder_X.Acc V140
OUT Y50

// Rung HBW_Move_XZ#12
// Offset 84
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE $HBW_Encoder_X.Acc V140
OUT Y51

// Rung HBW_Move_XZ#13
// Offset 90
#BEGIN FMT_COMMENT 
"Configure Z PWM<br>"
"If carrying a pallet, set Z down to a slow PWM speed.<br>"
"Z up will need to be faster then Z down due to gravity<br>"
"Z Down rung"
#END

STR C20
AND C52
MOVE 35 D144

// Rung HBW_Move_XZ#14
// Offset 94
#BEGIN FMT_COMMENT 
"Configure Z PWM<br>"
"If carrying a pallet, set Z down to a slow PWM speed.<br>"
"Z up will need to be faster then Z down due to gravity<br>"
"Z Up rung"
#END

STR C20
ANDN C52
MOVE 55 D144

// Rung HBW_Move_XZ#15
// Offset 98
#BEGIN FMT_COMMENT 
"Configure Z PWM<br>No pallet"
#END

STRN C20
MOVE 90 D144

// Rung HBW_Move_XZ#16
// Offset 101
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 D144

// Rung HBW_Move_XZ#17
// Offset 116
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Move_XZ#18
// Offset 122
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Move_XZ#19
// Offset 128
STR ST1
STR C51
ANDGE $HBW_Encoder_X.Acc V140
STRN C51
ANDLE $HBW_Encoder_X.Acc V140
ORSTR
ANDSTR
ANDN C150
STR C52
ANDGE $HBW_Encoder_Z.Acc V142
STRN C52
ANDLE $HBW_Encoder_Z.Acc V142
ORSTR
ANDSTR
OUT C150

// Rung HBW_Move_XZ#20
// Offset 155
#BEGIN FMT_COMMENT 
"Loop End"
#END

UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Test slot X & Y target value for out of range<br>"
"if X value greater than 4, fault code 105<br>"
"if Y value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#9
// Offset 38
#BEGIN FMT_COMMENT 
"Task Send<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if conveyor light barriers broken suggesting a pallot "
"is still there."
#END

STR C101
ANDN C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
AND X1
AND X2
JMP HBW_Program.S7
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
STRN X1
ORN X2
ANDSTR
JMP HBW_Program.S2
MOVE 107 V181

// Rung HBW_Program#10
// Offset 73
#BEGIN FMT_COMMENT 
"Task Recieve<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if outer conveyor light barrier no broken suggesting "
"no pallot is there."
#END

STR C102
ANDN C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
ANDN X2
JMP HBW_Program.S13
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
AND X2
JMP HBW_Program.S2
MOVE 108 V181

// Rung HBW_Program#11
// Offset 105
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#12
// Offset 107
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#13
// Offset 109
#BEGIN FMT_COMMENT 
"Task Send - Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 111
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#15
// Offset 114
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"

// Rung HBW_Program#16
// Offset 123
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1
OUT C12

// Rung HBW_Program#17
// Offset 129
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
AND C12
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 133
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 136
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 138
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 140
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 143
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 149
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 152
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 154
#BEGIN FMT_COMMENT 
"Task Send - Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 156
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 159
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2600 V142
OUT C20

// Rung HBW_Program#28
// Offset 165
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 170
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 173
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 176
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 178
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 180
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 183
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 189
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 192
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 194
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 196
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 199
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 215
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 3000 C80

// Rung HBW_Program#41
// Offset 219
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#42
// Offset 223
NOP

// Rung HBW_Program#43
// Offset 224
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 226
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 228
#BEGIN FMT_COMMENT 
"Reserved Stage<br>"
"Just incase I need an extra stage for Task Send"
#END

SG HBW_Program.S12

// Rung HBW_Program#46
// Offset 230
#BEGIN FMT_COMMENT 
"Fault<br>Should never hit this reserve stage"
#END

STR ST1
JMP HBW_Program.S2

// Rung HBW_Program#47
// Offset 232
#BEGIN FMT_COMMENT 
"Task Receive - Conveyor In<br>& Move XZ to Conveyor"
#END

SG HBW_Program.S13

// Rung HBW_Program#48
// Offset 234
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 10 V131

// Rung HBW_Program#49
// Offset 237
#BEGIN FMT_COMMENT 
"Conveyor Out In"
#END

STR X1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 45
OUT Y49

// Rung HBW_Program#50
// Offset 253
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x1 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
AND X1
ONDTMR T4 3000 C80

// Rung HBW_Program#51
// Offset 258
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#52
// Offset 262
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2750 V142

// Rung HBW_Program#53
// Offset 267
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#54
// Offset 272
#BEGIN FMT_COMMENT 
"Movements completed<br>"
"Conveyor inner beam broken and XZ move complete"
#END

STR HBW_Move_XZ.Done
ANDN X1
JMP HBW_Program.S14
HALT HBW_Move_XZ

// Rung HBW_Program#55
// Offset 276
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#56
// Offset 279
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 281
#BEGIN FMT_COMMENT 
"Task Receive - Pick"
#END

SG HBW_Program.S14

// Rung HBW_Program#58
// Offset 283
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#59
// Offset 286
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#60
// Offset 292
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S15

// Rung HBW_Program#61
// Offset 295
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#62
// Offset 297
#BEGIN FMT_COMMENT 
"Task Receive - Move to Storage"
#END

SG HBW_Program.S15

// Rung HBW_Program#63
// Offset 299
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#64
// Offset 302
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"
OUT C20
OUT C12

// Rung HBW_Program#65
// Offset 313
#BEGIN FMT_COMMENT 
"Math calculate Y target for placement"
#END

STRPD C12
MATH V142 "V142 - 100"

// Rung HBW_Program#66
// Offset 323
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#67
// Offset 328
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S16
HALT HBW_Move_XZ

// Rung HBW_Program#68
// Offset 331
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#69
// Offset 334
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#70
// Offset 336
#BEGIN FMT_COMMENT 
"Task Receive - Place<br>Place onto storage shelf"
#END

SG HBW_Program.S16

// Rung HBW_Program#71
// Offset 338
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#72
// Offset 341
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#73
// Offset 347
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S17

// Rung HBW_Program#74
// Offset 350
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#75
// Offset 352
#BEGIN FMT_COMMENT 
"Task Receive - Move to Idle"
#END

SG HBW_Program.S17

// Rung HBW_Program#76
// Offset 354
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#77
// Offset 357
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 4300 V140
MOVE 1400 V142

// Rung HBW_Program#78
// Offset 362
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#79
// Offset 367
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S1
HALT HBW_Move_XZ

// Rung HBW_Program#80
// Offset 370
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#81
// Offset 373
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#82
// Offset 375
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#83
// Offset 377
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#84
// Offset 379
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#85
// Offset 382
#BEGIN FMT_COMMENT 
"Force Ready<br>Jump to ready state without resetting<br>"
"Reset Fault code"
#END

STR ST1
MOVE MC105 C105
AND C105
JMP HBW_Program.S1
MOVE 0 V181

// Rung HBW_Program#86
// Offset 389
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#87
// Offset 391
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#88
// Offset 393
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#89
// Offset 396
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#90
// Offset 411
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
ANDLE $HBW_Encoder_X.Acc 8050
OUT Y50

// Rung HBW_Program#91
// Offset 417
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#92
// Offset 420
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#93
// Offset 435
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#94
// Offset 438
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#95
// Offset 441
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#96
// Offset 456
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#97
// Offset 459
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
ANDLE $HBW_Encoder_Z.Acc 3500
OUT Y4

// Rung HBW_Program#98
// Offset 465
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#99
// Offset 480
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#100
// Offset 482
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#101
// Offset 484
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#102
// Offset 486
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#103
// Offset 488
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#104
// Offset 490
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#105
// Offset 493
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#106
// Offset 496
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 40 MHR120 1"

// Rung HBW_Program#107
// Offset 512
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick
HALT HBW_Place

// Rung HBW_Program#108
// Offset 516
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#109
// Offset 533
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 100
OUT Y7

// Rung HBW_Program#110
// Offset 549
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#111
// Offset 566
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#112
// Offset 582
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#113
// Offset 586
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#114
// Offset 588
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#115
// Offset 591
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#116
// Offset 595
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#117
// Offset 598
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"Reset Stage"
#END

SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Reset VGR Fault Code"
#END

STR ST1
MOVE 0 V801

// Rung VGR_Program#7
// Offset 25
#BEGIN FMT_COMMENT 
"Stop VGR Movement Task"
#END

STR ST1
HALT VGR_Movement

// Rung VGR_Program#8
// Offset 27
STR ST1
COPY 0x0 "4 0x0 0 N810 1 0x0 0 N811 1 0x0 0 N812 1"

// Rung VGR_Program#9
// Offset 39
STR ST1
OUT Y28

// Rung VGR_Program#10
// Offset 41
STR ST1
RST Y29

// Rung VGR_Program#11
// Offset 43
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
AND X26
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100
OUT Y26

// Rung VGR_Program#12
// Offset 61
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
AND X25
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100
OUT Y24

// Rung VGR_Program#13
// Offset 79
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100
OUT Y22

// Rung VGR_Program#14
// Offset 96
STR X25
AND X26
AND X27
ONDTMR T54 100 C798

// Rung VGR_Program#15
// Offset 102
STR C798
OUT $VGR_Encoder_Rot.ResetEdge
OUT $VGR_Encoder_X.ResetEdge
OUT $VGR_Encoder_Y.ResetEdge

// Rung VGR_Program#16
// Offset 106
STR C798
JMP VGR_Program.S2

// Rung VGR_Program#17
// Offset 108
#BEGIN FMT_COMMENT 
"Ready State"
#END

SG VGR_Program.S2

// Rung VGR_Program#18
// Offset 110
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 118
STR ST1
OUT C797

// Rung VGR_Program#20
// Offset 120
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 122
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#22
// Offset 124
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S8

// Rung VGR_Program#23
// Offset 126
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S13

// Rung VGR_Program#24
// Offset 128
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S22

// Rung VGR_Program#25
// Offset 130
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S20

// Rung VGR_Program#26
// Offset 132
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

SG VGR_Program.S3

// Rung VGR_Program#27
// Offset 134
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#28
// Offset 142
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 5360 N810

// Rung VGR_Program#29
// Offset 145
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 800 N811

// Rung VGR_Program#30
// Offset 148
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 620 N812

// Rung VGR_Program#31
// Offset 151
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C414

// Rung VGR_Program#32
// Offset 157
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
AND C414
JMP VGR_Program.S4
HALT VGR_Movement

// Rung VGR_Program#33
// Offset 161
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#34
// Offset 165
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#35
// Offset 167
#BEGIN FMT_COMMENT 
"Pick up disk from HBW"
#END

SG VGR_Program.S4

// Rung VGR_Program#36
// Offset 169
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#37
// Offset 177
STR ST1
SET Y28

// Rung VGR_Program#38
// Offset 179
STR Y28
SET Y29

// Rung VGR_Program#39
// Offset 181
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#40
// Offset 196
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 199
STR X25
JMP VGR_Program.S5

// Rung VGR_Program#42
// Offset 201
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#43
// Offset 203
#BEGIN FMT_COMMENT 
"Move crane from HBW to MPO"
#END

SG VGR_Program.S5

// Rung VGR_Program#44
// Offset 205
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#45
// Offset 213
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 3550 N810

// Rung VGR_Program#46
// Offset 216
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 800 N811

// Rung VGR_Program#47
// Offset 219
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#48
// Offset 222
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C415

// Rung VGR_Program#49
// Offset 228
STR VGR_Movement.DoneThisScan
AND C415
JMP VGR_Program.S10
HALT VGR_Movement

// Rung VGR_Program#50
// Offset 232
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#51
// Offset 236
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#52
// Offset 238
#BEGIN FMT_COMMENT 
"Assign new values for next VGR location"
#END

SG VGR_Program.S10

// Rung VGR_Program#53
// Offset 240
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#54
// Offset 248
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 3528 N810

// Rung VGR_Program#55
// Offset 251
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 3400 N811

// Rung VGR_Program#56
// Offset 254
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 2000 N812

// Rung VGR_Program#57
// Offset 257
STR ST1
TMR T51 100

// Rung VGR_Program#58
// Offset 260
STR T51.Done
JMP VGR_Program.S6

// Rung VGR_Program#59
// Offset 262
#BEGIN FMT_COMMENT 
"Position Crane to drop disk onto MPO"
#END

SG VGR_Program.S6

// Rung VGR_Program#60
// Offset 264
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#61
// Offset 272
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C416

// Rung VGR_Program#62
// Offset 278
STR VGR_Movement.DoneThisScan
AND C416
JMP VGR_Program.S7
HALT VGR_Movement

// Rung VGR_Program#63
// Offset 282
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#64
// Offset 286
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#65
// Offset 288
#BEGIN FMT_COMMENT 
"Release vacuum and turn off compressor"
#END

SG VGR_Program.S7

// Rung VGR_Program#66
// Offset 290
STR ST1
RST Y29

// Rung VGR_Program#67
// Offset 292
STR ST1
ONDTMR T53 100 C416

// Rung VGR_Program#68
// Offset 296
STR C416
RST Y28

// Rung VGR_Program#69
// Offset 298
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C416
JMP VGR_Program.S1

// Rung VGR_Program#70
// Offset 300
#BEGIN FMT_COMMENT 
"VGR.T2 - Move Disk from SLD to Loading Bay"
#END

SG VGR_Program.S8

// Rung VGR_Program#71
// Offset 302
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#72
// Offset 310
#BEGIN FMT_COMMENT 
"Get assign location values based on color input as number"
#END

STR ST1
RANGECHECK V820 0x0 3 1 C555

// Rung VGR_Program#73
// Offset 315
#BEGIN FMT_COMMENT 
"If N820 == 0, no color passed, enter fault"
#END

STR C555
JMP VGR_Program.S30
MOVE 4 V801

// Rung VGR_Program#74
// Offset 319
#BEGIN FMT_COMMENT 
"If N820 == 1, White disk needs to be picked up<br>"
#END

STRE V820 1
COPY 0x1 "4 0x0 1790 N810 1 0x0 1485 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#75
// Offset 333
#BEGIN FMT_COMMENT 
"If N820 == 2, Red disk needs to be picked up"
#END

STRE V820 2
COPY 0x1 "4 0x0 1470 N810 1 0x0 1715 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#76
// Offset 347
#BEGIN FMT_COMMENT 
"If N820 == 3, Blue disk needs to be picked up"
#END

STRE V820 3
COPY 0x1 "4 0x0 1205 N810 1 0x0 2315 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#77
// Offset 361
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#78
// Offset 366
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
JMP VGR_Program.S9
HALT VGR_Movement

// Rung VGR_Program#79
// Offset 369
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#80
// Offset 373
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#81
// Offset 375
#BEGIN FMT_COMMENT 
"Vacuum on to pick up disk at SLD"
#END

SG VGR_Program.S9

// Rung VGR_Program#82
// Offset 377
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#83
// Offset 385
STR ST1
SET Y28

// Rung VGR_Program#84
// Offset 387
STR Y28
SET Y29

// Rung VGR_Program#85
// Offset 389
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#86
// Offset 404
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#87
// Offset 407
STR X25
JMP VGR_Program.S11

// Rung VGR_Program#88
// Offset 409
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#89
// Offset 411
#BEGIN FMT_COMMENT 
"Move VGR from SLD to Loading Bay"
#END

SG VGR_Program.S11

// Rung VGR_Program#90
// Offset 413
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#91
// Offset 421
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 990 N810

// Rung VGR_Program#92
// Offset 424
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 2275 N811

// Rung VGR_Program#93
// Offset 427
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#94
// Offset 430
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C423

// Rung VGR_Program#95
// Offset 436
STR VGR_Movement.DoneThisScan
AND C423
JMP VGR_Program.S17
HALT VGR_Movement

// Rung VGR_Program#96
// Offset 440
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#97
// Offset 444
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#98
// Offset 446
#BEGIN FMT_COMMENT 
"Assign new Values for next VGR location"
#END

SG VGR_Program.S17

// Rung VGR_Program#99
// Offset 448
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#100
// Offset 456
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 990 N810

// Rung VGR_Program#101
// Offset 459
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 2275 N811

// Rung VGR_Program#102
// Offset 462
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 1650 N812

// Rung VGR_Program#103
// Offset 465
#BEGIN FMT_COMMENT 
"Delay to reset Done for VGR_Movement"
#END

STR ST1
TMR T52 100

// Rung VGR_Program#104
// Offset 468
STR T52.Done
JMP VGR_Program.S18

// Rung VGR_Program#105
// Offset 470
#BEGIN FMT_COMMENT 
"Position Crane to drop disk into Loading Bay"
#END

SG VGR_Program.S18

// Rung VGR_Program#106
// Offset 472
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#107
// Offset 480
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#108
// Offset 488
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C424

// Rung VGR_Program#109
// Offset 494
STR VGR_Movement.DoneThisScan
AND C424
JMP VGR_Program.S12
HALT VGR_Movement

// Rung VGR_Program#110
// Offset 498
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#111
// Offset 502
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#112
// Offset 504
#BEGIN FMT_COMMENT 
"Release vacuum and drop disk"
#END

SG VGR_Program.S12

// Rung VGR_Program#113
// Offset 506
STR ST1
RST Y29

// Rung VGR_Program#114
// Offset 508
STR ST1
ONDTMR T54 100 C418

// Rung VGR_Program#115
// Offset 512
STR C418
RST Y28

// Rung VGR_Program#116
// Offset 514
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C418
JMP VGR_Program.S1

// Rung VGR_Program#117
// Offset 516
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

SG VGR_Program.S13

// Rung VGR_Program#118
// Offset 518
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#119
// Offset 526
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 40 N810

// Rung VGR_Program#120
// Offset 529
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 140 N811

// Rung VGR_Program#121
// Offset 532
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 3085 N812

// Rung VGR_Program#122
// Offset 535
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C419

// Rung VGR_Program#123
// Offset 541
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
AND C419
JMP VGR_Program.S14
HALT VGR_Movement

// Rung VGR_Program#124
// Offset 545
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#125
// Offset 549
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#126
// Offset 551
#BEGIN FMT_COMMENT 
"Vacuum on to pick up disk at Loading Bay"
#END

SG VGR_Program.S14

// Rung VGR_Program#127
// Offset 553
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#128
// Offset 561
STR ST1
SET Y28

// Rung VGR_Program#129
// Offset 563
STR Y28
SET Y29

// Rung VGR_Program#130
// Offset 565
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#131
// Offset 580
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#132
// Offset 583
STR X25
JMP VGR_Program.S15

// Rung VGR_Program#133
// Offset 585
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#134
// Offset 587
#BEGIN FMT_COMMENT 
"Move Crane from Loading Bay to HBW"
#END

SG VGR_Program.S15

// Rung VGR_Program#135
// Offset 589
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#136
// Offset 597
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 5395 N810

// Rung VGR_Program#137
// Offset 600
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 763 N811

// Rung VGR_Program#138
// Offset 603
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#139
// Offset 606
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C421

// Rung VGR_Program#140
// Offset 612
STR VGR_Movement.DoneThisScan
AND C421
JMP VGR_Program.S19
HALT VGR_Movement

// Rung VGR_Program#141
// Offset 616
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#142
// Offset 620
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#143
// Offset 622
SG VGR_Program.S19

// Rung VGR_Program#144
// Offset 624
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#145
// Offset 632
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 5405 N810

// Rung VGR_Program#146
// Offset 635
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 763 N811

// Rung VGR_Program#147
// Offset 638
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 685 N812

// Rung VGR_Program#148
// Offset 641
#BEGIN FMT_COMMENT 
"Delay to reset Done for VGR_Movement"
#END

STR ST1
TMR T56 100

// Rung VGR_Program#149
// Offset 644
STR T56.Done
JMP VGR_Program.S21

// Rung VGR_Program#150
// Offset 646
SG VGR_Program.S21

// Rung VGR_Program#151
// Offset 648
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#152
// Offset 656
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#153
// Offset 664
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C426

// Rung VGR_Program#154
// Offset 670
STR VGR_Movement.DoneThisScan
AND C426
JMP VGR_Program.S16
HALT VGR_Movement

// Rung VGR_Program#155
// Offset 674
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#156
// Offset 678
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#157
// Offset 680
#BEGIN FMT_COMMENT 
"Release Vacuum, Drop Disk"
#END

SG VGR_Program.S16

// Rung VGR_Program#158
// Offset 682
STR ST1
RST Y29

// Rung VGR_Program#159
// Offset 684
STR ST1
ONDTMR T55 100 C422

// Rung VGR_Program#160
// Offset 688
STR C422
RST Y28

// Rung VGR_Program#161
// Offset 690
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C422
JMP VGR_Program.S1

// Rung VGR_Program#162
// Offset 692
#BEGIN FMT_COMMENT 
"VGR.T4 - Move Disk from Loading Bay to Shipping Truck"
#END

SG VGR_Program.S22

// Rung VGR_Program#163
// Offset 694
STR ST1
JMP VGR_Program.S2

// Rung VGR_Program#164
// Offset 696
#BEGIN FMT_COMMENT 
"Manual Control"
#END

SG VGR_Program.S20

// Rung VGR_Program#165
// Offset 698
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#166
// Offset 706
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100

// Rung VGR_Program#167
// Offset 721
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#168
// Offset 724
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#169
// Offset 726
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100

// Rung VGR_Program#170
// Offset 741
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#171
// Offset 743
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#172
// Offset 746
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#173
// Offset 761
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#174
// Offset 763
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#175
// Offset 766
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#176
// Offset 768
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#177
// Offset 770
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#178
// Offset 772
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#179
// Offset 774
STRN C500
JMP VGR_Program.S1

// Rung VGR_Program#180
// Offset 776
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG VGR_Program.S30

// Rung VGR_Program#181
// Offset 778
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#182
// Offset 786
STR ST1
HALT VGR_Movement

// Rung VGR_Program#183
// Offset 788
STR C799
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
#BEGIN FMT_COMMENT 
"If we are not outside the oven, turn on the compressor"
#END

STRN X18
OUT Y17

// Rung MPO_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"If the compressor is on, open the door"
#END

STR Y17
OUT Y20

// Rung MPO_Program#5
// Offset 14
STR Y20
OUT Y52

// Rung MPO_Program#6
// Offset 16
#BEGIN FMT_COMMENT 
"If the crane is not at turntable position, move towards it"
#END

STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#7
// Offset 32
#BEGIN FMT_COMMENT 
"Turn off the conveyor belt when reseting"
#END

STR ST1
RST Y47

// Rung MPO_Program#8
// Offset 34
#BEGIN FMT_COMMENT 
"Reset our bit that said its detected something"
#END

STR ST1
RST C1000

// Rung MPO_Program#9
// Offset 36
STR ST1
RST Y18

// Rung MPO_Program#10
// Offset 38
#BEGIN FMT_COMMENT 
"Reset end of coveryor belt detection bit"
#END

STR ST1
RST C1001

// Rung MPO_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Reset the turntable plunger"
#END

STR ST1
RST Y21

// Rung MPO_Program#12
// Offset 42
#BEGIN FMT_COMMENT 
"Reset turntable to crane position"
#END

STRN X12
OUT Y46

// Rung MPO_Program#13
// Offset 44
#BEGIN FMT_COMMENT 
"Jump to manual control mode"
#END

STR C801
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 46
#BEGIN FMT_COMMENT 
"Make sure the crane is at the turntable, the turntable is "
"facing the crane, we are not wanting to control manually, "
"and the loading tray is outside the oven before beginning "
"stage 1"
#END

STR X16
AND X12
ANDN C801
AND X18
ANDN C802
JMP MPO_Program.S1

// Rung MPO_Program#15
// Offset 52
#BEGIN FMT_COMMENT 
"Ready Stage"
#END

SG MPO_Program.S1

// Rung MPO_Program#16
// Offset 54
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#17
// Offset 62
#BEGIN FMT_COMMENT 
"If our oven timer is less than 100, fault out"
#END

STRLE D1600 100
JMP MPO_Program.S8

// Rung MPO_Program#18
// Offset 67
#BEGIN FMT_COMMENT 
"If our saw timer is less than 100, fault out"
#END

STRLE D1601 100
JMP MPO_Program.S8

// Rung MPO_Program#19
// Offset 72
#BEGIN FMT_COMMENT 
"C810 is the ready status bit"
#END

STR ST1
ANDN Y17
ANDN Y16
OUT C810

// Rung MPO_Program#20
// Offset 76
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#21
// Offset 79
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#22
// Offset 83
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#23
// Offset 86
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
OUT Y44

// Rung MPO_Program#24
// Offset 89
STR Y20
AND X17
RST Y20

// Rung MPO_Program#25
// Offset 92
#BEGIN FMT_COMMENT 
"Once inside, turn off the compressor, which will shut the door"
#END

STRND Y20
AND X17
RST Y17

// Rung MPO_Program#26
// Offset 96
#BEGIN FMT_COMMENT 
"Once inside and door is closed turn on oven"
#END

STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#27
// Offset 102
#BEGIN FMT_COMMENT 
"When done timing move to next stage"
#END

STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#28
// Offset 106
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#29
// Offset 108
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#30
// Offset 110
SG MPO_Program.S2

// Rung MPO_Program#31
// Offset 112
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#32
// Offset 120
#BEGIN FMT_COMMENT 
"If we are inside the oven, turn on the compressor"
#END

STR X17
SET Y17

// Rung MPO_Program#33
// Offset 122
#BEGIN FMT_COMMENT 
"If we are inside the oven and the door is not open, then "
"open the door"
#END

STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#34
// Offset 125
#BEGIN FMT_COMMENT 
"If the door is open and we are not outside of the oven, "
"then move the tray out."
#END

STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#35
// Offset 128
STR X18
RST Y17

// Rung MPO_Program#36
// Offset 130
STR X18
RST Y20

// Rung MPO_Program#37
// Offset 132
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#38
// Offset 134
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#39
// Offset 136
SG MPO_Program.S3

// Rung MPO_Program#40
// Offset 138
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#41
// Offset 146
STRN X19
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#42
// Offset 163
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#43
// Offset 166
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#44
// Offset 171
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#45
// Offset 177
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#46
// Offset 181
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#47
// Offset 183
SG MPO_Program.S4

// Rung MPO_Program#48
// Offset 185
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#49
// Offset 193
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#50
// Offset 210
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#51
// Offset 215
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#52
// Offset 221
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#53
// Offset 225
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 227
#BEGIN FMT_COMMENT 
"Table Saw"
#END

SG MPO_Program.S5

// Rung MPO_Program#55
// Offset 229
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 237
#BEGIN FMT_COMMENT 
"Turn turntable until at position to saw"
#END

STRN X15
OUT Y45

// Rung MPO_Program#57
// Offset 239
#BEGIN FMT_COMMENT 
"Once you reach saw position, activate the saw"
#END

STRPD X15
OFFDTMR T103 D1601 Y43

// Rung MPO_Program#58
// Offset 244
#BEGIN FMT_COMMENT 
"Once done sawing, move to the next stage"
#END

STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#59
// Offset 249
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#60
// Offset 251
#BEGIN FMT_COMMENT 
"Table End"
#END

SG MPO_Program.S6

// Rung MPO_Program#61
// Offset 253
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#62
// Offset 261
#BEGIN FMT_COMMENT 
"Keep rotating until we are at plunger position"
#END

STRN X13
OUT Y45

// Rung MPO_Program#63
// Offset 263
STRPD X13
SET Y18

// Rung MPO_Program#64
// Offset 266
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#65
// Offset 271
STRPD X13
OFFDTMR T104 3000 Y47

// Rung MPO_Program#66
// Offset 276
#BEGIN FMT_COMMENT 
"If the light barrier gets broken, set c1001 true"
#END

STRN X14
SET C1001

// Rung MPO_Program#67
// Offset 278
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#68
// Offset 280
STRND T104.Timing
AND C1001
JMP MPO_Program.S0

// Rung MPO_Program#69
// Offset 284
STRND T104.Timing
ANDN C1001
JMP MPO_Program.S8

// Rung MPO_Program#70
// Offset 288
SG MPO_Program.S7

// Rung MPO_Program#71
// Offset 290
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#72
// Offset 298
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#73
// Offset 303
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#74
// Offset 308
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#75
// Offset 313
#BEGIN FMT_COMMENT 
"Manually move crane towards oven"
#END

STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#76
// Offset 330
#BEGIN FMT_COMMENT 
"Manually move crane to turn table"
#END

STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#77
// Offset 347
STRN C801
JMP MPO_Program.S0

// Rung MPO_Program#78
// Offset 349
SG MPO_Program.S8

// Rung MPO_Program#79
// Offset 351
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#80
// Offset 359
#BEGIN FMT_COMMENT 
"Turn on flashing red light"
#END

STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#81
// Offset 364
STR ST1
OUT C811

// Rung MPO_Program#82
// Offset 366
#BEGIN FMT_COMMENT 
"If Reset Button (C802) is pressed and both the oven timer "
"and saw timer are over 100ms go back to stage 0"
#END

STR C802
ANDGE D1600 100
ANDGE D1601 100
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
#BEGIN FMT_COMMENT 
"Ready State"
#END

SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STR ST1
OUT C1621

// Rung SLD_Program#8
// Offset 28
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STR C1610
JMP SLD_Program.S11

// Rung SLD_Program#9
// Offset 30
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 32
SG SLD_Program.S11

// Rung SLD_Program#11
// Offset 34
#BEGIN FMT_COMMENT 
"Stage 11: Verifies that disk has made it into SLD and sets "
"a uniform place to begin timers from to make sure color is "
"sensed correctly."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 42
#BEGIN FMT_COMMENT 
"if disk doesn't clear light barrier to jump into S2 under "
"2 seconds, jump to fault state."
#END

STR ST1
ONDTMR T200 2000 C1632

// Rung SLD_Program#13
// Offset 46
#BEGIN FMT_COMMENT 
"Jump to Fault State 12"
#END

STR C1632
JMP SLD_Program.S12

// Rung SLD_Program#14
// Offset 48
#BEGIN FMT_COMMENT 
"Turn on bit to run conveyor when disk breaks the light barrier."
#END

STR ST1
ANDND X35
COPY 0x1 "4 0x0 1 C1670 1"

// Rung SLD_Program#15
// Offset 56
STR C1670
OUT Y30

// Rung SLD_Program#16
// Offset 58
#BEGIN FMT_COMMENT 
"Have to do S11 invert to make sure that the first scan on "
"stage entry doesn't trigger the JMP before work can be done."
#END

STRPD SLD_Program.S11
NOT
ANDPD X35
COPY 0x1 "4 0x0 0 C1670 1"
JMP SLD_Program.S2

// Rung SLD_Program#17
// Offset 69
SG SLD_Program.S10

// Rung SLD_Program#18
// Offset 71
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#19
// Offset 79
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#20
// Offset 81
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#21
// Offset 83
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#22
// Offset 85
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#23
// Offset 87
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#24
// Offset 89
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#25
// Offset 94
STR C1611
JMP SLD_Program.S11

// Rung SLD_Program#26
// Offset 96
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#27
// Offset 98
SG SLD_Program.S2

// Rung SLD_Program#28
// Offset 100
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#29
// Offset 108
#BEGIN FMT_COMMENT 
"Start timer for start fault. If light barrier isn't broken "
"by timer end, FAULT."
#END

STR ST1
ANDN ST2
ONDTMR T213 1800 C1671

// Rung SLD_Program#30
// Offset 113
#BEGIN FMT_COMMENT 
"When delay is on, output bit (C1671) is false. While C1671 "
"is false, turn on conveyor.<br>"
"When C1671 is true, jump to next stage, S3."
#END

STRN C1671
OUT Y30

// Rung SLD_Program#31
// Offset 115
STR ST1
COPY 0x1 "4 0x0 26000 V3205 1"

// Rung SLD_Program#32
// Offset 122
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STR C1671
JMP SLD_Program.S3

// Rung SLD_Program#33
// Offset 124
#BEGIN FMT_COMMENT 
"Color Detect"
#END

SG SLD_Program.S3

// Rung SLD_Program#34
// Offset 126
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#35
// Offset 134
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#36
// Offset 139
#BEGIN FMT_COMMENT 
"Checks for lowest color value in color sensor."
#END

STRLE V3200 V3205
COPY 0x1 "4 0x0 V3200 V3205 1"

// Rung SLD_Program#37
// Offset 149
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3205 0x1 10000 6000 C1602

// Rung SLD_Program#38
// Offset 154
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#39
// Offset 156
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3205 0x1 20000 18000 C1619

// Rung SLD_Program#40
// Offset 161
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#41
// Offset 163
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3205 0x1 24500 21000 C1620

// Rung SLD_Program#42
// Offset 168
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#43
// Offset 170
STR ST1
COPY 0x1 "4 0x0 V3202 V3210 1 0x0 V3203 V3211 1 0x0 V3204 V3212 1"

// Rung SLD_Program#44
// Offset 181
STRGT V3210 3
COPY 0x1 "4 0x0 3 V3210 1"

// Rung SLD_Program#45
// Offset 191
STRGT V3211 3
COPY 0x1 "4 0x0 3 V3211 1"

// Rung SLD_Program#46
// Offset 201
STRGT V3212 3
COPY 0x1 "4 0x0 3 V3212 1"

// Rung SLD_Program#47
// Offset 211
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 4, jump to S4."
#END

STR C1602
ANDLT V3202 4
JMP SLD_Program.S4

// Rung SLD_Program#48
// Offset 217
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 4, jump to S5."
#END

STR C1619
ANDLT V3203 4
JMP SLD_Program.S5

// Rung SLD_Program#49
// Offset 223
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 4, jump to S6."
#END

STR C1620
ANDLT V3204 4
JMP SLD_Program.S6

// Rung SLD_Program#50
// Offset 229
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#51
// Offset 236
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#52
// Offset 243
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#53
// Offset 250
STR C1673
JMP SLD_Program.S1

// Rung SLD_Program#54
// Offset 252
#BEGIN FMT_COMMENT 
"White"
#END

SG SLD_Program.S4

// Rung SLD_Program#55
// Offset 254
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#56
// Offset 262
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#57
// Offset 266
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#58
// Offset 268
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 3000 C1604

// Rung SLD_Program#59
// Offset 273
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#60
// Offset 275
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#61
// Offset 280
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#62
// Offset 282
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#63
// Offset 285
#BEGIN FMT_COMMENT 
"Red"
#END

SG SLD_Program.S5

// Rung SLD_Program#64
// Offset 287
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#65
// Offset 295
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#66
// Offset 299
STRN C1606
OUT Y30

// Rung SLD_Program#67
// Offset 301
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 3000 C1607

// Rung SLD_Program#68
// Offset 306
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#69
// Offset 308
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#70
// Offset 313
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#71
// Offset 315
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#72
// Offset 318
#BEGIN FMT_COMMENT 
"Blue"
#END

SG SLD_Program.S6

// Rung SLD_Program#73
// Offset 320
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#74
// Offset 328
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#75
// Offset 332
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#76
// Offset 334
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 4000 C1612

// Rung SLD_Program#77
// Offset 339
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#78
// Offset 341
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#79
// Offset 346
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#80
// Offset 348
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#81
// Offset 351
#BEGIN FMT_COMMENT 
"Extra Garbage"
#END

SG SLD_Program.S7

// Rung SLD_Program#82
// Offset 353
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#83
// Offset 361
STR ST1
INC V3213

// Rung SLD_Program#84
// Offset 363
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 8000 C1630

// Rung SLD_Program#85
// Offset 367
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#86
// Offset 369
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// Rung SLD_Program#87
// Offset 372
#BEGIN FMT_COMMENT 
"Fault state"
#END

SG SLD_Program.S12

// Rung SLD_Program#88
// Offset 374
#BEGIN FMT_COMMENT 
"S12: Fault State"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#89
// Offset 382
STR ST4
OUT Y41

// Rung SLD_Program#90
// Offset 384
STR C1673
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y37

// Rung SSC_Program#5
// Offset 14
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"c1202 is reset button, c1500 is execute command"
#END

STR X40
AND X41
ANDN C1202
AND C1500
JMP SSC_Program.S1

// Rung SSC_Program#7
// Offset 27
SG SSC_Program.S1

// Rung SSC_Program#8
// Offset 29
#BEGIN FMT_COMMENT 
"Look at HBW"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#9
// Offset 37
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#10
// Offset 45
STR ST1
ANDPDPF
OUT C1203

// Rung SSC_Program#11
// Offset 48
STRN CT150.Done
OUT Y38

// Rung SSC_Program#12
// Offset 50
STRN CT150.Done
AND X46
STR C1203
CNT CT150 V2400

// Rung SSC_Program#13
// Offset 55
STRN CT151.Done
OUT Y35

// Rung SSC_Program#14
// Offset 57
STRN CT151.Done
AND X44
STR C1203
CNT CT151 V2401

// Rung SSC_Program#15
// Offset 62
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#16
// Offset 64
STR CT150.Done
AND CT151.Done
JMP SSC_Program.S2

// Rung SSC_Program#17
// Offset 67
SG SSC_Program.S2

// Rung SSC_Program#18
// Offset 69
#BEGIN FMT_COMMENT 
"Look at VGR"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#19
// Offset 77
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#20
// Offset 85
STR ST1
ANDPDPF
OUT C1204

// Rung SSC_Program#21
// Offset 88
STRN CT152.Done
OUT Y37

// Rung SSC_Program#22
// Offset 90
STRN CT152.Done
AND X47
STR C1204
CNT CT152 V2402

// Rung SSC_Program#23
// Offset 95
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#24
// Offset 97
STR CT152.Done
JMP SSC_Program.S3

// Rung SSC_Program#25
// Offset 99
SG SSC_Program.S3

// Rung SSC_Program#26
// Offset 101
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#27
// Offset 109
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#28
// Offset 117
STR ST1
ANDPDPF
OUT C1205

// Rung SSC_Program#29
// Offset 120
STRN CT153.Done
OUT Y36

// Rung SSC_Program#30
// Offset 122
STRN CT153.Done
AND X45
STR C1205
CNT CT153 V2403

// Rung SSC_Program#31
// Offset 127
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#32
// Offset 129
STR CT153.Done
JMP SSC_Program.S4

// Rung SSC_Program#33
// Offset 131
SG SSC_Program.S4

// Rung SSC_Program#34
// Offset 133
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#35
// Offset 141
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#36
// Offset 149
STR ST1
ANDPDPF
OUT C1206

// Rung SSC_Program#37
// Offset 152
STRN CT155.Done
OUT Y37

// Rung SSC_Program#38
// Offset 154
STRN CT155.Done
AND X47
STR C1206
CNT CT155 V2405

// Rung SSC_Program#39
// Offset 159
STRN CT154.Done
OUT Y35

// Rung SSC_Program#40
// Offset 161
STRN CT154.Done
AND X44
STR C1206
CNT CT154 V2404

// Rung SSC_Program#41
// Offset 166
STR C1202
JMP SSC_Program.S0

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRPD X37
ANDGT V3202 0
DEC V3202

// Rung SLD_Storage#2
// Offset 7
NOP

// Rung SLD_Storage#3
// Offset 8
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRPD X38
ANDGT V3203 0
DEC V3203

// Rung SLD_Storage#4
// Offset 15
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRPD X39
ANDGT V3204 0
DEC V3204

// Rung SLD_Storage#5
// Offset 22
STRE V3202 3
OUT C1628

// Rung SLD_Storage#6
// Offset 27
STRE V3203 3
OUT C1629

// Rung SLD_Storage#7
// Offset 32
STRE V3204 3
OUT C1631

// Rung SLD_Storage#8
// Offset 37
#BEGIN FMT_COMMENT 
"Upper bound W fault state."
#END

STRGT V3202 3
OUT C1625

// Rung SLD_Storage#9
// Offset 42
#BEGIN FMT_COMMENT 
"Upper bound R fault state."
#END

STRGT V3203 3
OUT C1626

// Rung SLD_Storage#10
// Offset 47
#BEGIN FMT_COMMENT 
"Upper bound B fault state"
#END

STRGT V3204 3
OUT C1627

// Rung SLD_Storage#11
// Offset 52
STR ST1
COPY 0x1 "4 0x0 V3202 MC809 1 0x0 V3203 MC810 1 0x0 V3204 MC811 1 0x0 C1625 MC812 1 0x0 C1626 MC813 1 0x0 C1627 MC814 1 0x0 C1628 MI815 1 0x0 C1629 MI816 1 0x0 C1631 MI817 1 0x0 V3202 V3210 1 0x0 V3203 V3211 1 0x0 V3204 V3212 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

// Beginning of Code Block VGR_Movement
$TSK VGR_Movement

// Rung VGR_Movement#1
// Offset 0
NOP

// Rung VGR_Movement#2
// Offset 1
STR ST1
RANGECHECK N810 0x0 8000 0 C780
RANGECHECK N811 0x0 3500 0 C781
RANGECHECK N812 0x0 3300 0 C782

// Rung VGR_Movement#3
// Offset 14
#BEGIN FMT_COMMENT 
"Set fault state if rotation out of range"
#END

STR C780
MOVE 1 V801

// Rung VGR_Movement#4
// Offset 17
#BEGIN FMT_COMMENT 
"Set fault state if X out of range"
#END

STR C781
MOVE 2 V801

// Rung VGR_Movement#5
// Offset 20
#BEGIN FMT_COMMENT 
"Set fault state if Y out of range"
#END

STR C782
MOVE 3 V801

// Rung VGR_Movement#6
// Offset 23
#BEGIN FMT_COMMENT 
"Initiate starting values"
#END

STR ST1
MOVE 0 N813
MOVE 0 N814
MOVE 0 N815

// Rung VGR_Movement#7
// Offset 30
NOP

// Rung VGR_Movement#8
// Offset 31
#BEGIN FMT_COMMENT 
"Set Crane Rotation Direction (Encoder Values decrement on "
"CCW Rotation)"
#END

STRLE $VGR_Encoder_Rot.Acc N810
OUT C411

// Rung VGR_Movement#9
// Offset 36
#BEGIN FMT_COMMENT 
"Set Crane X Direction"
#END

STRLE $VGR_Encoder_X.Acc N811
OUT C412

// Rung VGR_Movement#10
// Offset 41
#BEGIN FMT_COMMENT 
"Set Crane Y Direction"
#END

STRLE $VGR_Encoder_Y.Acc N812
OUT C413

// Rung VGR_Movement#11
// Offset 46
REPEAT

// Rung VGR_Movement#12
// Offset 47
#BEGIN FMT_COMMENT 
"Calculate Rotation position difference"
#END

STR ST1
MATH N813 "$VGR_Encoder_Rot.Acc - N810"

// Rung VGR_Movement#13
// Offset 56
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100

// Rung VGR_Movement#14
// Offset 71
#BEGIN FMT_COMMENT 
"If crane needs to rotate CCW to get to target"
#END

STR C411
ANDLE N813 0
OUT Y27

// Rung VGR_Movement#15
// Offset 77
#BEGIN FMT_COMMENT 
"If crane needs to rotate CW to get to target"
#END

STRN C411
ANDGE N813 0
OUT Y26

// Rung VGR_Movement#16
// Offset 83
#BEGIN FMT_COMMENT 
"Calculate X position difference"
#END

STR ST1
MATH N814 "$VGR_Encoder_X.Acc - N811"

// Rung VGR_Movement#17
// Offset 92
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100

// Rung VGR_Movement#18
// Offset 107
#BEGIN FMT_COMMENT 
"If crane needs to extend X+ to get to target"
#END

STR C412
ANDLE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y25

// Rung VGR_Movement#19
// Offset 121
#BEGIN FMT_COMMENT 
"If crane needs to retract X- to get to target"
#END

STRN C412
ANDGE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y24

// Rung VGR_Movement#20
// Offset 135
#BEGIN FMT_COMMENT 
"Calculate Y position difference"
#END

STR ST1
MATH N815 "$VGR_Encoder_Y.Acc - N812"

// Rung VGR_Movement#21
// Offset 144
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Movement#22
// Offset 159
#BEGIN FMT_COMMENT 
"If crane needs to extend Y- to get to target"
#END

STR C413
ANDLE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y23

// Rung VGR_Movement#23
// Offset 173
#BEGIN FMT_COMMENT 
"If crane needs to retract Y+ to get to target"
#END

STRN C413
ANDGE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y22

// Rung VGR_Movement#24
// Offset 187
#BEGIN FMT_COMMENT 
"Exit Conditions for all movements"
#END

STRLE N813 40
ANDGE N813 -40
ANDLE N814 40
ANDGE N814 -40
ANDLE N815 40
ANDGE N815 -40
ONDTMR T50 500 C499

// Rung VGR_Movement#25
// Offset 214
UNTIL C499

// End of Code Block VGR_Movement
$TSKEND VGR_Movement

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C11","C11_Interlock","","Used to delay logic by one scan"
"C12","C12_Interlock_2","","Used to delay logic by one scan"
"C20","HBW_Has_Pallet","","True when carrying a pallet"
"C51","X_Direction","","True: Left False: Right"
"C52","Z_Direction","","True: Down False: Up"
"C80","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C90","HBW_XY_PID_EN","","Enables PID control in HBW_Move_XZ"
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C150","HBW_MoveComplete","","HBW_Move_XZ completion interlock."
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","Fault_X_Target","","Active when X target out of range"
"C183","Fault_Z_target","","Active when Z target out of range"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"C810","MPO_Ready","",""
"C1621","SLD_Ready","",""
"C1673","TaskReset","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"D0","MC","",""
"D140","X_Start_Position","","Distance to target"
"D142","Y_Start_Position","","Distance to target"
"D143","HBW_PWM_Cur_X","","PWM value for X for XZ movement task"
"D144","HBW_PWM_Cur_Z","","PWM value for Z for XZ movement task"
"D1601","MPO_Saw_Time","",""
"T3","T_HBW_S6","",""
"T4","T_Conveyor_Timer","","Used to detect conveyor faults"
#END

