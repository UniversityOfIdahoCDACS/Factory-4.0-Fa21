// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Nick\Documents\GitHub\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
b834166e57a5bf6925cbcba3ad7d614461061784f1637b3579178a165eaf9620bd15bdf2ac9a218d
3f3832d3e4320a9c37ff394bf39780976fe9ee3ef18f7049b578b3f07ba6cefba815ed4b4b6dd625
4190833bc01ed6b4d0e70ef4cb04cc1c65912ee6f6fbf4f591eff229e525274e1c9176d82d46abd8
f30922824e75ce3b9163e2377e025c5799f09bd1acb40282d7e46ba1b67f80fa4092d67d28d3d9d7
bddd069979f6da7d72d41174c78e7e8ec1c43cba75a5dcf5ac21e659a43ef0da5dbf5a4ece775ac6
8837954bdb5f21ccb925dad17b6a571b50f5f53f49977942401317b46b84ed4ef619cf02222e4db5
79eb6b474212f4953a16ee9e3acd8a233861a103a0fae71ece69be7013bb2266f3ed2d5e1fa004f9
65a5b13e02786ee4a5c5e76ab5ba6ed3725f6acf6d4a12dc406dc85811ce3775fefa9837a5e29e0c
0458fe5345d1316e53d6788c1177e38466478ca2a76eb0502cbb60b39dd7c2cc293fcc6901613981
a4343e638d6aa73897a53884e172a8425579ddba39ee4eb209bd89c199b180d761023e081bee5ccd
1f89ef2090c89dda3a397e465d5513b16dd6d08458be8387afa7a84222a4318ff4da145ae7fe8b91
829aa00db2d4f2e5c7827913924db670365a07f99af6c4f237c48b521c7f2f08a52651929213d63c
6c3ecca1b849929eeb57f54baab257a38855cb6acb446088149def74bd7b7bae87991bc72d3f658b
745b8b3374894a25f7c4bf1ee95e2f74afa645c9634fb77df299837caabbff9483cb282f453a2a11
82d65076b4a665d4292b34677048f6e4bb1ef86b8db8f9716f03c912f86d98797138162cb5bed8b6
4e293b7aa42a3aa15a905a85706264dea297fa989d9181899a1d684c3df4dd12f876654d7104f44e
18dfffdbaa245eeab496dd78665b42097cfd2376b43847917dd791230285f070809134a112d27461
6a318ce7c1b36c925d6d36e4890c24a772c8016e2164666057a37f73e4caf860b92b57a22a5b1e9b
56ebe4f21442cf80f6f45b9b6c8d1c190e1af49263abee8848ba17a46f9c5a292bac5c9e8c04379b
3f16db0129761922a20fb29e19711419821efa8e7f9e1faeeacdabdf738b31a52fb0e7ffdd1f89a1
8ec5889ef143c5a36afb36ba5a07e55152c798254f9a06cee85a851f0f8f4db4a2422cc284db7214
268cf9b7624cabaec828a135f7218f0317b9c0d35f2d22f00fdebe49f22aeb3c8c1d9f76a2565865
ec2f23279511ad4b39fbe9770e6c5297ee117d91ead274626a9b474fe1648227c5e855351d3309e4
e7db0088bcd26323f929ae8b7b792e41ed20dcaefee96dd2bf9cfd98bae80c36e07ff4635895f171
92cc3204050e8a2c13fa1d6e4f2bdaedd38896ad35f894754c424f500beadb8435f5d4fec9d952f7
71f3c340f498c8af57c5081ed6699ab7103f631f00b4b345be5cfcab1a60ad591342ecf70db5d89e
b702e36739d5c2caf7aefe7926420f12331b0632d0372ebe1f82306b90bf9c04f50e3f56377d5e2c
f1f07ef12d88ee1960913c4fd283c40f752e9b1d9dc9d7b94f7f6a6aa14aa66f976879adaf06b485
a3740b885d72e781e6f3c6d92699ef41dc183389f891a543729c70b49ec1a2931f057a22d654bce4
ce8c4517c59972e78a9f0093ea41859c7201b69d9efd46a77cd1b88314ab9450c6cd2e6920662809
6c1056c306c121c6568bff4f6cf2cae0a1d6e1ff0eab4c2b23c084bfbf9f4fae1375965fccfb3ac5
cf4ca81c5646c7bb22153db402127bd1d89e7f59f8eafe0bcca03f2d0d2cb52c8352a5c0e97728b2
87969c29085612f0339fbe2bd43805656da0ff8ca51b12eec5c58f16f45d204fe53ca027d444f2e2
bb8b914567fe678809d70cc5643359516e44861150481e81eb4881009fd1fb0d987c4d0964910a96
e19f009e8376c79db72a6029d16653cd7460b2c791269b3386321a7f0500f9c445e7e596dc1be230
478d4504dcaf2eb65cba15e6960e6fbe09939e9805c6cdf3fa95f5b33ef83f73302c2014147061b5
e5e3c1eef27c4060871d6385d11ba513b007a3204dfc7c489d783b0ea33e5953f1c9408caa6b14aa
8359caa41edd0298e40278d343439e99c3d4ccda5ad505c3cffe370a58bbaa2945d685a026721267
c9db6f53e00561370006b9bffcdd1cf60cf242d4105c6bacb6af66a9b1ef58de1402bc25da2439bd
e4d5d37a58071934c43e7cfef08c4987fea77eadccba1f16c87eab700b273b817866c083422b8dbc
91e11b5a18403df8325b02ad751442676eb008dd068e0a704d81c64d02bc8177bb89150c4ff79640
dc43f144f5cb701c4d8dab2f6c6f96db4c0eddfd668d3c2ab144b67ae1d3ea78f40b91181ccce957
673fa4fe4e1566e98e68a07d8c37dfa8f60ecbb97ee8dabb7832c3acaa61e8b61e92120df6f27bee
d04ed3f5022a818a29ee8ccbeeecb1ccc1acc82c08398315e321132ad254b1931391fdf89e89aeda
182068a6b221a085c6794850824adb5536d3715bb555f19ddd615c3801288dafa6b50157cedb2f99
d8682119748bd29c573aeeda5642807ad3314163b1546b0bec8b99faccb6f61fb5be30a1b07eec9e
cd085df614e8dd53298eb1c08ffa1059d38f4437aef8e1749b59b1f6e3897f099342823f0f6e5468
d98f96d13e65689f6731bc2269aec580afeb34d44dd4f3b8ec0f8cbec1811eb9e8c62b148dab0679
75f80038d28804179a7dec38a28606ccc974917b842ef1817e80950319c907ba35ee5bb2a601b369
e27403e3cd6ca2e00bdad35f3962366dc8a3852a34075cb5baea1632ce59b2a173b965f4376b7f79
f462e9597615c941e82b56ad6c402c2f8ef28b6ff928c9fdffa61acd8cc07ba0596d4e66beea39d6
86292ed1e248976112cbedb39fa20968d4b79989575a650a992fd31e81d00fda99380626ec35eec4
9d64cbc50ff9f08d67246769c72abcd30ceabe268bc594852147f435325fadb0a118ef076ee31cef
2ccf171a4bfd9e0a8d6c04cfcb4e9857d6ebebeef8542646eee4c680cbacdd74274b94bc58885ae2
010b791268ddf9b149961d79baff5e4aba66cc2442c39397d0c02b1c185b6ff978b97f9e3b479751
0ea56a025176871fe601cf2c6931eee477b55b71b74a83f6a3dac8f589966e056d6e9f5848c306bb
dda7a14b8c36b234eb3edf7f1ad8467556fb9c5eda8f57ef2b0c1431e8543dd3216cfca7eb0f0518
edb7c33b03d1f6c0b8214395816f46843fdd9af9188861edb88f453ac0b884eb2678fe473ff4d134
f87127904601cb9a3aa5d379642494e35ccd51e5f77e7346f1854eb9077dc6feffcef8eba34bd3f9
4c297d231c4096581e17f9d012292e09823ddf9973d8c04e390e49ab71b8d5988505b28673c82879
4e2456a5e47c7ca1a66cfc0e3f4a8b9d84c87d3ff656f34c77de811b6486e26045769ec12bfff305
824590cf0ff921cf8d7c01221940d3ac99ec2d3bda17547a4038e7269fc0f9891ed5d8319f07aabd
79d308801aaaebf93d69f6dfe03717ead08835d5c521177914ec03d31ac5dbe0d3f9f541b704dd98
bd06a571110a6aab27724098278fbb8de38e769b4be09939c44ceac7ae730560f26faaddd5face1e
e29714789d05f410aef8995eb5d270d2a6f8f062cf099695fc7a526e86d1b496f0b30c7e2c526919
56bf949ffd5a3189de03c845b667a03f3ca52227a97f9d4a5d27fc8aeffd627b356e266105899d1f
739656212efc0ca8693649fbe555afeba3e40af6c59ac8b26d2c958ab1c1567d728129b11c0bef45
a86c6b161a88fac1b4f160bb9b6a5008b56d7d33d31a21ff116cfe5c28760694752a8f1775f3163f
d780e5eb8d80c428d8f0fd0c38db1229f71845e0d5a7f2c0dee4039252b4f16c4ccaa53402078667
7f29573ccde93a868b02ec91808b4c2b012becfec693c085f870a644938fb5e1bac0ff31f4e41e28
462ba3ccda784d3f6a52cc521c3e47685d9f549efad2484344e65a940d7c141c3307b8943f5669a7
3c8c7308fb5bde32a207324095b19b888fe4d8cb85603ad924a203a589c0432fca52a206d26e63ea
007de745316f400247b15b6e40c3bcd6622f66a4b2c06c2b19c174dcca2ae3d806e8d519c6d8e3c8
e20507fc9b7842d15332809a3fe99e3314335ff4e85bf1af86cff9c6f2e9bec5ccb9fb69da31e2eb
908e9421660b2e3bb7add551989b66b656af2307c86f06803017f512fe67b96ee98c85950695f72d
3992a9f95a2f59568b09b5e1111dce48ade8dd607a07420a1b18ac84d9e8bcbcec17f88845e69ada
df289e66b236253eabd4b4c106100945c041fac40becf9bb378157e435313fe3547ba3da118092f8
bc1b090950455b5efe7279c77b4a5c729351c089b453b4267421d91fbeac60b39a8772cca746736d
68c834384ba9d13ed0ce46902acd07b69e13e2f60eb2bd54b764c6502ab61ded017f5327712675c2
a1d495c41480c9c690efd4a16ef52ecc3b6169a7452a088d9f194a6776e5536306c223b356040f3c
94d7e6fa8b4d418b3ab79f3d48275ae259f8b79232ac50d453a182e8540d018b6169be9cead6b213
4b2bbb88ec3f043a858681d9c611071f69eac528b7d8ae3bba2e9c2fe0d2cca0b6652b2af0345795
d30b871d6a4eec8178e178e7b20e0b85facdb601b94ff15d5d23c9e38ac1296031630b1c73fa1cf5
1865691c97f192ad67670aaec2e3196f8362535ccacc2522405877e1aa5f115cb2bc05e0f073c024
c8fd205a10296fecb6837a82b25716c99d2c8bb512d9988ee96381c68834fb030f9be16d5f072d7e
755d4484b3a4c349ab570cac7b750d257d109e60004912b124dbfdaf697022ea7f87e28cbe81fadf
f69e4d1701c4006cf7d5c2cc16b846869f73d0fdfd6888577fa9c93b2293542871b8a5f5150e9284
d941256bc99df60aacbabf00aad343a9a17d918a1600b6c128156b4150e647db94e1746464838b37
7bf83a867751b7b7e06ceab6460e828d671f441166f76d583a0a92a83adeba994f439f045ce6e415
5384cd7f92743e1104758a6d469ec9d5cc18a02e0c2c3bfbd3a8d2a420e41afa33009903747698e0
dd73d61f38693376b337a783e07ad6ea781238289e1be8d6be10fd42e84a1d7c623d66cd15f19517
fe5dba4abd451e089839421497288a4cbc44858369efbd2a0b6fe7a288a4e97aa3734ebbb3b68bbc
9068e724b727f38eaf28b75d6d4b884acd0a6c4007e24320ef6cbdbd43c21ea119ceb19d1ada55aa
307a370d8856451fa25f7a820580a00fa394ab82e9b9cba48902252b5ab5ff3d4695a33e5fe277ec
11ca97a6ba9f18f48764e5d47011541002496552d3198cbabd67756031be45f105a60584f09d90ee
8bb3bfd460688b1e1a1d310966b7b503032987ce2096f3c1d1da5fd9ee79a9ce1366c22e3ebb66f7
aed0e131bd3e3aeb7554645e85c62733e1e0efbbe79ee643610a44c7188e4b6cb1b24df13fea1caf
83f09ed99465f01dce72e68c6d9f25f2a2a94a83d8f8aa637f7dccf0098d23b891787ed4644509e9
aae1430bf6ca02a47dbc55adaa344a78ab1288a6e41dae09df7a33f5a8dd0c18cddb5f74dd8e0b1d
cf5c76890d972001bf2dd161a4749785c7f1db35ee335796dced72b2232cbe4aea1b2934abb22d73
48ffb6c8999220234b52e087ffd483523c0df1414672dd882a91a2a978568d91512ba1fdc72aee86
988a89ca1e75f96b3e00fe8bbfc39bb28bfe92a090ece7853908667649ade3282ff0ed07c3eabd86
3a7a34a5c23e364e8dcbb80133e9ec8fb8c7f62b8220c72ffeec116d2f3ba5106c006a5ab2540fd2
46f1e0f8ab06d9b59bbe9fdf0cf6418f81aa1d7bb351059f0b63c021299bd7354f5da5ab72646b8a
e06563dadbf92942fba16e135a2a3ba3a279999795b644a66553aa8997cc96b138187ce728f8f611
1e4f9dfd8527cabbef6a99217bf962e1cc1e9a6fe3aa2fa814d4335af4f92189b106dcf055c986b5
31cb719426eca3f0ae3d1e54d033c7d7e0308fcd3c20be23e121ccc531b6c55e7c33c2053c59b07e
c58b0f2a561f53c9e1e68deba2a3127f23462eeeb3ba0e95810312bd1916d61a27ab204395e392a9
01a8e4c17e90dcd107b3b05f0f41d3ed59f77b9faecde74625b535e0f230b7aacc5ecc77a67c598e
727e68de9102c83f881043574f5bed19eb0901a8886131786911e88d99702dbd38ab8ac4bd1be5b3
1dde7ea2c583f7d3312a45695450efad325557a3dcacca9477ee7b6a56ee5ac2845ade4a2c1fb79c
04033e0d05cea840aaf471b8b6d7546c93a63c3cac8fc06d3ca0191c22cbf3ed455462e98403eb9b
88cc7410e09b2bd10c201b74fd587f9f7379751cba9c016a6a7353a58cf15f355d458ff72a0a6e79
730d0fd946fe6db33b41c196e62ccbd9c684a903d9a0b3bd5f15ff0981beae6330d2e449d996cf52
b1cbd8f8fca1e9fe718c306cdef0b1ba88c59d3eceb0a9c4667337fb7f3123472accbd55b875cd88
865220a2097172623a6dff65282775cb566837925835cf6d552c4ff50e72d7dfc71b16ddb038e0f4
c63f4733d9e34d5d11052ef97b8f7c9c73afb8d6694b10e2cb0fe89f8a9d34dca91a9749b38500f2
e973c0b08890817ef93fec0645ac7d5f3411e7faf1e43910c5d1b85ce6ecdc6cc3c82ca917927e3d
dcaaa5d65a8000b4a4fc8b1b04a668058d44b803b6cccb9ed45516d6f724584c79dff7783d8764b3
14f601a301bb93fdefca959891419c14457a21038a6cf61de8fe9e34f2f5f772386b353304684f69
37af97fe5725d85f4b1e898399fffae8e67d07e8275785e1063748b56685cf19286fb694afe606f4
5e05a30b644f2abd8fa11c503d9f1d27a33a00f33d899996c9bb050b06347f7d30709c3d6462f0d1
13a037f07194ae3c3a471ced2e363f3d531d5c6bf5487c0fdeea0f2baa24eeeff6a60115ca10a40c
f2e94156516a66bb649f43e42f1ec1f936ecc4ea0d9ed8b37a1e70145a2697bf7ed30641b80c5cc6
650ea1dcde4dec1122179af3988500dfdb2f73d85fc2841947234c5f182800d437c31b2c3bf70002
81d5d2d2c1ecaa1bc5a99047cbba4384c4e9e82aaf6a677a5e0e9063490340eef224489cf997c6ba
e54cdba9f263e87c4e07e2cc6e56dfe0fa402af3b79b65d6238c1c6b537d283ef5724a64f55bb2d1
5fad08869fc4eff6e1e57052a3b7e0b3410c3e8a16f62764e65689238590468e6295e26f6cc09ffb
d57f6ddf8d5feb90db511b8e36edd5cc2044697ef73757fa1f82070f3bb5035897887c85e731f4c5
0ecc4caf9d3071a58c6fa243706ff319967dfeb1b7267a27af6183532a2b7199227a54d871916608
8b1f573bfaf19c52f9bc4253e7583e93d1ae328b1abaca40f8fa9548218ba3c87e1510feddad1d20
adde62014367b50ad74522f0afb01337bd3d0628c66bf133070baed56dcbfdd2980d595e412254a5
1efc31485999940e3f2e8032c7d4ecb6fbc78491907870b23514d452ee62c60f7376c6a58c73dbce
a1434aa2c9defcb6c9f23a91a59fab81a987cdec5182275e7c6aa0a2f40b0b9e19af18c3dcb48392
edb045f849c6a7c8697a9a99ca9964057240b68f247a7bfe395c4cbb2a5b000b873b15aac7fcb644
7acd6d876444686aca2ffc136e31823f79158aa6a6163011e59ab47b11b73b3f1eb981f06861ed8f
0b84b388e0976ee6ab2125a5b41c276e9164202593a8194af2d00182a1e294772a4e9c1a5c656294
74d735686c1c86975f2f7cc29bc490cd7dc14d0569c0309a7efbbc1bddd652515dcf37cdfa3a7b6a
b2e34d1547a5d14530e275f7183e8aa4f7ecc64386ea1e09b95530587ff8083bad374d62e5104db1
aab5fcb5bcbba9ff14cf8f03f1db0372337a08c654f6e4327fcba4dc3c525a29e86ea5c6a84b5f37
ac5803d4b70203cd210f763dfaf3394275cefc351576ca8b82b621b574f21adcd2f4b73fcae93b21
bd0fad2294ef44961bc851ba9a8aa8f2d4cabc8eabd400d99c4aa07a93359761a4a74276259ca00a
f0e08f491db37c95f782337a8beb08234a2b1b72efce46a38532c14d00ba2e041b2d7e15758dce9b
2e559ebefe1f5696082a2e859d646ddfb7e233201f6e8344b1813d857403afc65423dcc5f5096301
e95317b50fcba90586f27619d8ae06446d22c8e827d28bb251d7e1d59603bfabd1acf155d929b7a8
17cfb33c2dd1915b2882413c07fbfac3777e799a9adad7fe0579f1cac37334c2f07cd5e3e7b94e9e
82a5f28149cd2680e732cb468ceaa42654336afdf2cb3398ba3ea8a41b9b9aea50741087b25dd5bf
72e87725083cfff39285f02879e765786816921250a914ab0365ec410c4211e75584bf2d9155bba0
70c4f8e3e4268b1be2760d2465d9ca0399e10858f733ce38ce521a374617ccdd916637d0ffa5bc41
1b3a5525c38701456247d728f50136a3e80634e06d9613a6f8ef29827393ce020d2edfa24d1478c9
40d5bbef16a42f57401706868141ffd5ebd43cce1b4b1c6b1d36bf449c30485311fa3a54093266bb
2ec63163255118dc1cde3860489ddd5b1e6a35c3f66ce9bd138fc94e69f79c79bcfb2910d2cb7ed6
fc21d5906dfb3ade62bddbe1d31ca368ce622bfe0fbf24652d912f2cf328801efacb1a4556dc8d12
351168ca359e3dc2ff09ce6ecd8794469e1ec1f15f7010e39e8d32464a56bfc8b69cb1accd3ecd73
00ed3ff062158e1be6a83c2e5e8ec5ccbf18c66d3e4b939c020477b84d3804e733359513a0ede940
b756c5f43bd345a1d18b424db2aa5fa2b6b449c1cb98bb3303710513c04b91ac305297ea0b072973
e15379fdee026cd82a28fc1f657d52b87dc9fa507eabf70fc7e70d7a24990fd7178e923e3943dce1
2cf128fa993a6fd091b22990084641e7b8234c4599d876e48dc8d85a95e2a881a9346322c83ab893
6449589b73afd1554b8d99e9d6bf75c9ffd1e600ca4ea182a5f568f3186ca7c6dcf0a2383620e006
ea15827195a12f2c45216b33ad10450282f2aa25b61e60df68293a03559722db0a2e6d1ba2b7efed
2f6ae78f00d0f05fe48c9af1c7a36ee8f6b1189e301ed25167614d5e2d2f0915556914f2dbfb2c56
7e31624d04ac9cb777e2324934c40ad66956b550a90edb9c6745493ad9a8983b435deb1444918ba3
edce648ea3834898c1b9c43f02bfc6bfaec45783f5497e3a503fce0c09a7cb27470739765d6b9599
347911458c7979fcf279648d23937813721073ddcba1b1e5941763e613a580791db826dc291aeeea
2e5acb6c7756ed815240b11eb469794182a4a779e334d6d18ec4e5174768374db91b2a5682236bd1
f1a83d0320ae8a59c001b5ab89b904311813ebfa3991af42e9e3d6e93c274d6ca795cbc635d673d3
d7dbb24f8dc38ab69df82f598353873af7549ba1583759a006e58e3c0831b2c20b455bc06d43cbfd
4c1ca1d302eee391b2f4452a090e42262f7fe2cc648c46675665a7bbc18111db65662a7f2d9c43c3
6ad75cafc9e72feeed7ca52d7b530bab6b7d9cc73064602ae1e487e149245e1499285dbcb37bcdbb
0a67b4b488c8e372db13811c4dd18a3807a6e644f18c003cbdb05aa211fa1d56d13ef1a5a942ebf6
0993fd3f99f1195c6cd6c63c27856eab4b51251180bdb16f0914be659fdc267eea13949cbccb1c0d
5269b88167107b2889aee95055700d3723a5fa40951ae8df60e95878a9b5721d3ecb2ab101f5b263
d78ada33101cdbcfe58e63ec6c56a6855b5bff265e7afb94fd8db0badc932111affe3d1b61e24836
4f2f806515b5c4c0994f1f69f459fa230a23e3b783226c489681dc2fef1d2af4ffd650b2e590211c
851fa56c24aa8a44416875597f0690ebc4212f9cc4a9867057a7691cabedd3ed63a39295aa9fc40c
8daf2c54f663cc92889b77b22e0374732697f52ff18a5ad2b22605e79868e21c1bbb3d90e406b72e
123b3ee567df7fa64bcb7c4fec77a4c36ea8ab56e13e667360d1b2f3b0fd460d445631ec90d28a7f
f5be4d906654ba16aa764a75e70fd9b496de67ee752f4e1e3a88a94123863a87b416eca6d680c6ea
f589939bdf7d09a937c8aff477b3febf6bc034f3bc086164af5c34d6f84842b454a7a3a433328cca
2a35fb9f5514e81e6ac848532746274c2ac39893b2281d10249e6997c71332a2ae4ceab8e4616915
b5c254788a46ba0d2eff5b356d9579af0436b47209a85ace7544508aec6cc81c492f965d32c5a873
8e40f63bd4a996d06092175dd3e4ae3bce470a22349a0e8329b56eab100f5f452f4926bfe3bdd120
644123594ecdb3ee8b427b9a00ebe7e45f1d55f0fc869791be7293940a52a380b88173810cad33fd
2153923eeec7ac887bf623277d1c0f0920494d8cc00ae414fcfb635114df87afb78fbbf4eb9ea7e3
8926f7d0256270c555a56f8b1c72a3d749b11f0b2e1f121b13d31cccadfee2c44f99d55e939efa41
181ce9ee910a6a8b1c4666edb44038aef542a4c7b3d23429dfab3166ee89afc885bd28776f133592
848a6ef1697af100966afd3fae7f3ac91991ae6a8a8d84923fea48a3a27a26843715b6cbd33e3ea5
86dece04020fde85743262a68fe50f1805f595069624ba5cae97d96fa6857327036806512bc6c115
5a7ab7838c25a0100e7b46172858ce1a7e2395831e42490502e76c144f5ebae63a7bd16ed2d03769
79fb4c65727fdaf203ff4bc46a277c7765595f5d017f14fb34d01d7adb7318a5deb3859c7c689ee7
fa8037d8554767f0a664a0a5cd602f61af9bb6310a740b2ddfebefc9083dd56a9273787b3c921ba7
076fd091e7ce114500eb94efc208f3ff90f99359bff4381dfe518614a6e1b017c61607fcec0638f4
1db078b325084d65e82b3d56296e3ddcad9edc2b9be26d3c5a7ef554f569d26dab999f4c2d90ba8a
93fdc6eb45401eac719c9e58e997780c9604b9df1c25051221e987b3b77b3dd077d5407fc336983f
1637a01535ad46090d9260c11a2a3f70c07e8873fe15c5029d863f1d9d616b0a89d4220f9914cbf1
c092dfc3db56e21da5817d3db0824cb994df6adf3e2465e743183ebb9336e615264884268ed83918
7fca59e73e8768c42ba790b5e9ade2fd52a6a0547d94f3ae2bfed3fc4ea5090927e2331d2bfc975c
9fc84b6ab7f77941e567f7456a0ee44bd8235f2c76c799e2b760bb4b99916ee88cd599ad3619a077
725262eca380c61f1c378d0fd177a9717fb153641439ef05f7cbeed3efd0a4e464f992c4b7571151
79ebb8350e7a0a4f5c1dbbd091155b72e172ea2ce79c26acbb508e8df498b15da0b0e36a5169a0e7
2aecf8b958a65338fdd72148333384c95dc521dc61b4785a468e653787efb099a934fd811c4c8416
40433514972be26895840d3e652a2845b3a04bee5903eb17b8ef57f3db30b8cc4c6be2f5d2ad6c79
5418efb45ca14c06aa8d92b0f86bfd5277f99714b64f5247f2a6f04ce790dc41ac796ed34ec2b2c2
125a9da7ac87b372a6410cda3e89b0f71064b4c2f017821d3a97467ef3febf6df5a8ab51319594e3
5361ca440201b7b657c67a2cf505145efd67472cd5c6166a40a7d2999fc254635e153574d01d4c2b
0462f7e61da88c82b6962091241116091a52b52142dcd80c3c1cd7af67e1c2041ba410fb44fa1bc3
2f728d6abe1a530591aaa10159399c9753e2d203376ed21427fd1b2057f4638d734f14f9e25d4aac
d58b5451903a8385a8ca7d155c2b61d9afa4081577a086ad05d67dbe8b11b59ff1e905d379c9e85f
06f3f8d16402ced4e244c31184a76f245e2db4773c3dc4bde0c9be94c70c665176f1f4c4cd7a5682
e209bc9c47c49ec14aa59b0094a9a18426de797512de5ae057441bf96c1b0115f95fd2045280b5ac
141870c4a6a0e62bd85d568fb19c388be023d047837d6adf753ef1bde75d933fc06d3e0332817856
60b48e3cf7a33dd1b359e26ea2543150c49169c4c413bdaf1b96ce574ebaecbe11f2c2f35d555ad7
1b4191cb286f25cdf8ab1a73d61a3293a2e76b42d76736f603c1ba369f62dfe6af3f24f366f8f568
49a533c0959ec7544c9a75032020c4a5b739bcf75525e0c6f737391f9ccde394d79cb604aaabe84b
129f6781a0f162a785f60e57f0ab3090e85bb628d8695ada93617ba5c0
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 1345 V810 1 0x0 180 V811 1 0x0 175 V812 1 0x0 860 V813 1 0x0 200 V814 1 0x0 400 V820 1 0x0 420 V821 1 0x0 440 V822 1"

// Rung VGR_Copy_State#2
// Offset 51
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1"

// Rung MPO_Copy_State#2
// Offset 31
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 MC808 C1621 1"

// Rung SLD_Copy_State#2
// Offset 25
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
#BEGIN FMT_COMMENT 
"Deadband for X position difference"
#END

STR ST1
DEADBAND D140 5 D1

// Rung HBW_Move_XZ#10
// Offset 48
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#11
// Offset 63
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D1 0
OUT Y50

// Rung HBW_Move_XZ#12
// Offset 69
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D1 0
OUT Y51

// Rung HBW_Move_XZ#13
// Offset 75
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"Deadband for Z position difference"
#END

STR ST1
DEADBAND D142 5 D2

// Rung HBW_Move_XZ#15
// Offset 89
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V120

// Rung HBW_Move_XZ#16
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D2 0
OUT Y4

// Rung HBW_Move_XZ#17
// Offset 110
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D2 0
OUT Y5

// Rung HBW_Move_XZ#18
// Offset 116
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D1 -40
ANDLE D1 40
ANDGE D2 -40
ANDLE D2 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#19
// Offset 135
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5310 V140
POPBOOL
DUPBOOL
ANDE V105 3
MOVE 2990 V140
POPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181

// Rung HBW_Program#9
// Offset 53
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
DUPBOOL
ANDE V106 3
MOVE 3240 V142
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#10
// Offset 85
#BEGIN FMT_COMMENT 
"Task Send<br>Validate X and Y input are not 0 (unselected)"
#END

STR C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S7
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#11
// Offset 109
#BEGIN FMT_COMMENT 
"Task Recieve<br>Validate X and Y input are not 0 (unselected)"
#END

STR C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S1
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#12
// Offset 133
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#13
// Offset 135
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#14
// Offset 137
#BEGIN FMT_COMMENT 
"Task Send - Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#15
// Offset 139
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#16
// Offset 142
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#17
// Offset 147
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 150
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 153
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 155
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 157
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 160
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 166
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 169
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 171
#BEGIN FMT_COMMENT 
"Task Send - Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 173
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 176
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 100 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 181
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 186
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 189
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 192
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 194
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 196
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 199
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 205
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 208
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 210
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 212
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 215
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 231
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 3000 C99

// Rung HBW_Program#41
// Offset 235
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C99
JMP HBW_Program.S2
MOVE 99 V181

// Rung HBW_Program#42
// Offset 239
NOP

// Rung HBW_Program#43
// Offset 240
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 242
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 244
#BEGIN FMT_COMMENT 
"Reserved Stage<br>"
"Just incase I need an extra stage for Task Send"
#END

SG HBW_Program.S12

// Rung HBW_Program#46
// Offset 246
#BEGIN FMT_COMMENT 
"Fault<br>Should never hit this reserve stage"
#END

STR ST1
JMP HBW_Program.S2

// Rung HBW_Program#47
// Offset 248
#BEGIN FMT_COMMENT 
"Task Receive - Conveyor In<br>& Move to Conveyor"
#END

SG HBW_Program.S13

// Rung HBW_Program#48
// Offset 250
STR ST1
JMP HBW_Program.S14

// Rung HBW_Program#49
// Offset 252
#BEGIN FMT_COMMENT 
"Task Receive - Pick"
#END

SG HBW_Program.S14

// Rung HBW_Program#50
// Offset 254
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#51
// Offset 257
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#52
// Offset 263
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S15

// Rung HBW_Program#53
// Offset 266
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#54
// Offset 268
#BEGIN FMT_COMMENT 
"Task Receive - Move to Storage"
#END

SG HBW_Program.S15

// Rung HBW_Program#55
// Offset 270
STR ST1
JMP HBW_Program.S16

// Rung HBW_Program#56
// Offset 272
#BEGIN FMT_COMMENT 
"Task Receive - Place<br>Place onto storage shelf"
#END

SG HBW_Program.S16

// Rung HBW_Program#57
// Offset 274
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#58
// Offset 277
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#59
// Offset 283
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S17

// Rung HBW_Program#60
// Offset 286
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#61
// Offset 288
NOP

// Rung HBW_Program#62
// Offset 289
#BEGIN FMT_COMMENT 
"Task Receive - Move to Idle"
#END

SG HBW_Program.S17

// Rung HBW_Program#63
// Offset 291
STR ST1
JMP HBW_Program.S1

// Rung HBW_Program#64
// Offset 293
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#65
// Offset 295
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#66
// Offset 297
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#67
// Offset 300
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#68
// Offset 302
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#69
// Offset 304
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#70
// Offset 307
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#71
// Offset 322
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#72
// Offset 324
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#73
// Offset 327
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#74
// Offset 342
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#75
// Offset 345
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#76
// Offset 348
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#77
// Offset 363
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#78
// Offset 366
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#79
// Offset 368
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#80
// Offset 383
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#81
// Offset 385
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#82
// Offset 387
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#83
// Offset 389
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#84
// Offset 391
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#85
// Offset 393
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#86
// Offset 396
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#87
// Offset 399
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 100 MHR120 1"

// Rung HBW_Program#88
// Offset 415
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#89
// Offset 418
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#90
// Offset 435
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#91
// Offset 451
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#92
// Offset 468
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#93
// Offset 484
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#94
// Offset 488
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#95
// Offset 490
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#96
// Offset 492
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#97
// Offset 495
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#98
// Offset 499
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#99
// Offset 502
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#8
// Offset 56
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#9
// Offset 73
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#10
// Offset 77
SG VGR_Program.S2

// Rung VGR_Program#11
// Offset 79
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 87
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S2

// Rung VGR_Program#13
// Offset 89
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#14
// Offset 91
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#15
// Offset 93
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#16
// Offset 95
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#17
// Offset 97
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S7

// Rung VGR_Program#18
// Offset 99
SG VGR_Program.S3

// Rung VGR_Program#19
// Offset 101
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 109
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 111
SG VGR_Program.S4

// Rung VGR_Program#22
// Offset 113
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 121
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#24
// Offset 123
SG VGR_Program.S5

// Rung VGR_Program#25
// Offset 125
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#26
// Offset 133
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#27
// Offset 135
SG VGR_Program.S6

// Rung VGR_Program#28
// Offset 137
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#29
// Offset 145
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#30
// Offset 147
SG VGR_Program.S7

// Rung VGR_Program#31
// Offset 149
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#32
// Offset 157
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#33
// Offset 172
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#34
// Offset 175
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#35
// Offset 177
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#36
// Offset 192
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#37
// Offset 194
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#38
// Offset 197
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#39
// Offset 212
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#40
// Offset 214
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 217
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#42
// Offset 219
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#43
// Offset 221
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#44
// Offset 223
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#45
// Offset 225
STRN C500
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#19
// Offset 56
STR Y20
AND X17
RST Y20

// Rung MPO_Program#20
// Offset 59
STRND Y20
AND X17
RST Y17

// Rung MPO_Program#21
// Offset 63
STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#22
// Offset 69
STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#23
// Offset 73
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 75
SG MPO_Program.S2

// Rung MPO_Program#25
// Offset 77
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#26
// Offset 85
STR X17
SET Y17

// Rung MPO_Program#27
// Offset 87
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#28
// Offset 90
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#29
// Offset 93
STR X18
RST Y17

// Rung MPO_Program#30
// Offset 95
STR X18
RST Y20

// Rung MPO_Program#31
// Offset 97
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 99
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#33
// Offset 101
SG MPO_Program.S3

// Rung MPO_Program#34
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#35
// Offset 111
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#36
// Offset 129
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#37
// Offset 132
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#38
// Offset 137
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#39
// Offset 143
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#40
// Offset 147
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#41
// Offset 149
SG MPO_Program.S4

// Rung MPO_Program#42
// Offset 151
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#43
// Offset 159
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#44
// Offset 176
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#45
// Offset 181
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#46
// Offset 187
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#47
// Offset 191
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 193
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 195
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 203
STRN X15
AND C800
OUT Y45

// Rung MPO_Program#51
// Offset 206
STRPD X15
OFFDTMR T103 3000 Y43

// Rung MPO_Program#52
// Offset 211
STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#53
// Offset 216
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 218
SG MPO_Program.S6

// Rung MPO_Program#55
// Offset 220
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 228
STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#57
// Offset 231
STRPD X13
SET Y18

// Rung MPO_Program#58
// Offset 234
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#59
// Offset 239
STRPD X13
SET Y47

// Rung MPO_Program#60
// Offset 242
STRPD X14
RST Y47

// Rung MPO_Program#61
// Offset 245
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#62
// Offset 247
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 249
NOP

// Rung MPO_Program#64
// Offset 250
SG MPO_Program.S7

// Rung MPO_Program#65
// Offset 252
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#66
// Offset 260
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#67
// Offset 265
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#68
// Offset 270
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#69
// Offset 275
STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#70
// Offset 292
STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#71
// Offset 309
STRN C801
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STRPD C1610
COPY 0x1 "4 0x0 1 C1621 1"

// Rung SLD_Program#8
// Offset 33
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STRPD C1610
JMP SLD_Program.S2

// Rung SLD_Program#9
// Offset 36
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 38
SG SLD_Program.S10

// Rung SLD_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 48
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#13
// Offset 50
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#14
// Offset 52
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#15
// Offset 54
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#16
// Offset 56
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#17
// Offset 58
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#18
// Offset 63
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#19
// Offset 65
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#20
// Offset 67
SG SLD_Program.S2

// Rung SLD_Program#21
// Offset 69
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#22
// Offset 77
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#23
// Offset 83
#BEGIN FMT_COMMENT 
"This timer gives a delay for the color detection to get "
"correct color."
#END

STRND T200.Timing
OFFDTMR T201 2000 C1601

// Rung SLD_Program#24
// Offset 88
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T201.Timing
JMP SLD_Program.S3

// Rung SLD_Program#25
// Offset 91
SG SLD_Program.S3

// Rung SLD_Program#26
// Offset 93
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#27
// Offset 101
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#28
// Offset 106
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3200 0x1 10000 8000 C1602

// Rung SLD_Program#29
// Offset 111
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#30
// Offset 113
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3200 0x1 20000 18000 C1619

// Rung SLD_Program#31
// Offset 118
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#32
// Offset 120
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3200 0x1 24500 21000 C1620

// Rung SLD_Program#33
// Offset 125
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#34
// Offset 127
#BEGIN FMT_COMMENT 
"Increment W counter when W is in color detection range."
#END

STRPD C1602
INC V3202

// Rung SLD_Program#35
// Offset 130
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 3, jump to S4."
#END

STR C1602
ANDLT V3202 3
JMP SLD_Program.S4

// Rung SLD_Program#36
// Offset 136
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 3, jump to S5."
#END

STR C1619
ANDLT V3203 3
JMP SLD_Program.S5

// Rung SLD_Program#37
// Offset 142
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 3, jump to S6."
#END

STR C1620
ANDLT V3204 3
JMP SLD_Program.S6

// Rung SLD_Program#38
// Offset 148
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#39
// Offset 155
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#40
// Offset 162
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#41
// Offset 169
SG SLD_Program.S4

// Rung SLD_Program#42
// Offset 171
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#43
// Offset 179
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#44
// Offset 183
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#45
// Offset 185
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#46
// Offset 190
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#47
// Offset 192
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#48
// Offset 197
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#49
// Offset 199
STRND C1604
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#50
// Offset 206
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#51
// Offset 209
SG SLD_Program.S5

// Rung SLD_Program#52
// Offset 211
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#53
// Offset 219
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#54
// Offset 223
STRN C1606
OUT Y30

// Rung SLD_Program#55
// Offset 225
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#56
// Offset 230
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#57
// Offset 232
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#58
// Offset 237
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#59
// Offset 239
STRND C1607
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#60
// Offset 246
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#61
// Offset 249
SG SLD_Program.S6

// Rung SLD_Program#62
// Offset 251
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#63
// Offset 259
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#64
// Offset 263
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#65
// Offset 265
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#66
// Offset 270
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#67
// Offset 272
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#68
// Offset 277
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#69
// Offset 279
STRND C1612
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#70
// Offset 286
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#71
// Offset 289
SG SLD_Program.S7

// Rung SLD_Program#72
// Offset 291
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#73
// Offset 299
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 10000 C1630

// Rung SLD_Program#74
// Offset 303
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#75
// Offset 305
STRND Y30
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#76
// Offset 312
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRND X37
DEC V3202

// Rung SLD_Storage#2
// Offset 3
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRND X38
DEC V3203

// Rung SLD_Storage#3
// Offset 6
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRND X39
DEC V3204

// Rung SLD_Storage#4
// Offset 9
STR ST1
COPY 0x1 "4 0x0 V3202 MC808 1 0x0 V3203 MC809 1 0x0 V3204 MC810 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"T3","T_HBW_S6","",""
#END

