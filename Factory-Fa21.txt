// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\hunte\Documents\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
bcef8a890c9f36467f8d9ca776e1861f5b8f38deb7347feee5f0d12cd780cc66ea11666e4bc11b04
106274245070cf605c6bcc8b9bd4ecbd1521e139d0765f2c43dd7a247e38d69149a3805f9783e703
1c9c7564fc54124196fd164ffe85bdfb6a49f34814de286e4cc1eaed3cedbc0a1fe9b27d3bf66e01
3b92668136b16b2d21a63bffe5465f2f5d558d61696d8f7b54299de28771a647777adaa747b3d44b
dd31e570b61acb7af6cc90a06fe41c89220b3e2dd33b1bda1c604bfb2a74663c22b13d1dc3ee61f9
90680ad56a5f4f243f5616ce9c74733de710ae4375bcf45c7c728f70f3c8d235ea1139ef06c63d5e
f67d67a91845502c2c0642f623a2d753d868cb7bd7d4adcee18773479d232716e6789a291e999976
871904dc4fbcd257b5cac7d9cf5d082615968e333ed2ce3329b5f748d3f931128e449644c1d31d70
b794e50bc2192e8cf78475ad7061afea29a567d6acfd175e70f3b78a9edbba5db74be7412e957524
aa6cc917b767cb1050d7332f251a00e3b1eac19cfc4079fdfef004394253480056df3ac800079a1c
698f14dae16d2cd57bac726c7fa2dbaa2f303e936e5f9100d2ab7dae36551875f5f56dda008cd403
dd5a71b358886b85dc99b698a354e4a448bb700c27fb9e099528ecc478a2c1bdc3460995ab1659eb
e39964709597487ace73fdd15a7e1e3f4bf7c63c73734909a98a9daa407b292618712cb93a1c9b91
f9bb229a3bcae0cca8cf71937e0a31f4033a536981f3bafb91b9f12e8583def2e0ab324c9f5b366a
1a00a4c08cd0d6e7426e3b59a3261d1da9890b85be99ee9d577f16ce2c09be56f29bfc65df4cb407
e061005d90ac65ca5818f2c7557da04e606ed3ba36bb6d04d28f214753cc77de36932972b2c1a856
24d08e115376638a3d415edcd163722ef61e8a88f11cfd9d2bd2570981c5eb42139e2d7d42aa0049
e21d9beff97dfa8f2a8fa04463d39fcaebcbdb494cec17e13ac44d33d4f98cd4a3c6a0013dc81bab
8412c5258d9b105466b27d78e37e705fae64bd2eeaee8c929eb1fda4cac84622a40cd8525ff38f61
04dd566e1e6d58d85d29592d7c59c40b5d8cffa5250921ddce7ff2cfd18ed09e1753b144a921b844
83922dbd62706013df4db694a6b2339850f090658383b99ba7dca4063edbf168fb025cc6f57a5853
c058a9b6177ca69c504b09754bd06c2d1fff8c3c527cfb5ed7427ca2a1c7b60a7f3a01d85b602ad0
3070ce6091895680894a72bdeaee2ee58aa83dbeec6386e982282c5a09f59fc796a94d8d4f921676
f11d9fb0e5180b29cc99155f8176b5da42d3108d89650e93879a1d999a86476e16bfd5a940f62a2a
f2510dbc940376077c8a1e5bdd5669f25ada75b644a1ce571cfe9a7859f6ca0a283b0e85f4a95683
d388c38eafee48434e59754c87864416cec3b781133272a897115104f91303216bd5593e58004d8a
97d40e5121a287ed478f7c779a2af049896134834a02becdb2adc4ab39bf32e4d67ced338411866c
631ce8cc18aee43c3f9ba373a2ca011dbc29cc8dd6dff64ad18de69976031c2d0d88cd29570ecd98
17c5cf7987f02a152825df54bf9dcbc0cca4cada0a944383b84053e20fbb4833c497145bad8cd165
352cedea24422aba58db954a209655b7425ffe5956341328ae8cbca91e76c0e70bc79d1e04fdb7ea
eeed4da56ea8623692753f9039267eeef7304b4eb4979a9c0b7f589caf3a11776d5054ca3dfbd91e
f48a4a42edb1c9af770802c7be15f561fcbf57747473c380ace27d8af7d3700f79b37b52584cb95e
0e84ebba456d175edc9293b47fcd51bf14c299604f455daf1a089d62969184b6300052460c7e349f
7f8b2a468a2e51276d057e08dd57a07081b2a3b2f6b346ac5bd6f486c8cd96fe852be1863bc96a64
0db28a54d7f98de7ca150031755529061650afa00139ff680b7e55af9bdf8d1f89967db6d9094c0b
ed752a68746866c05ba9928009bcbc21051bd21d5d892a42cc892ece26b0531487271137869d6c68
9a207159487f51c259a40e573734bdeb768e31b8d7a0c62da7536921825724db3318037fedc5860f
972a23ada4b4e23dfb4ea13b8dae6dba5c6c89445b2d722b51a3c419b65e7e7e04d781af3a802bf2
87939e38ab7c8bd92307471bace71471c14b7111b2f86b1b405d5867399b406426ac5ae5f56a8a1c
ce0b377773546f6ebb60ea208a09a1148222313563859dab745437cce47dadc64f08d0b1e7424896
22f72ca462c850fd48ce2e3de1987ee6d00d2d7e85adf88b7a2edc60b4d28bd04fea412aaa682a55
548556db7bdc3db0cb2dd516a6054fdd8bcda72b0b9e6803f4df7fd5fdf3f8bf0e643a9cfd99b834
adae6dfdcfae6de7ac73f1b30561774d33e741208a8cb6bd9a6e1d786ad48ec8a9699a3bbc08bb32
23afb69b607d7d285e72c10d66928194a0367bb283bd3ea09b5a3832756c2f193f7804d7d920bc83
aafbbe334d684558af623c033bd35d5d11fe709af1ea905b49e553d322dc194c65b8acdc2b092998
583f3fbaa24e13d9a7fc2a60d223d2239097b034cbe26ef0b18fe998b4c06f18dc6ca35bbe01618a
edf794a214ffcdb978caf7a4276cd86a2cc415c15697604260bfaf914fb9e86910d4d7a234ed0820
734e4c8938c2db8f48ca50c645338684d61d6c0ae84e8bec98694de55ac5dfc39c7939d58a43be7c
e3c99ca7673102937003ebcd860c5ffc2f60340fe36aa0c5675b238d8d47aad657083d8bec1cb92b
e1637ed63696738820746bec71acb787f1056a5015375b9a783110fa0839c592856debdfee81e9d9
009734422033f8fdbf026d5b15eb0010b07377f27842c5e1cb9b5c00196844b2bd9beb9e66a65852
9b79df80bdd140661d0f2dc0d17bee436166706e83bcfd60c7ebf0a16f48ae7e6e17f312f31ade48
bb7f37cf83ca0a4c797385d0495cad9f403ec45688c7a247af789438255b2e44cad692e105d48065
4b84a83c53b7c30a2d5ac705e95ab7b52a90215f2a69b8b391c9bb93264c9b3f81aede005a927197
33cb81925e76305ba3ed3f57335e52b61576fc0f033577433334147905ecb8c93c7d0d77eb1d2ecc
2e0904977348b46b694e72b067b07c461b3627fd972c225d26de7c43d63d21000c540165d7d3e99e
7289a11b4a0d46f9a4ac9a00e2b3199b0d2138e19eeca7ab89385e66529b2fff27f7a139ec04cd46
9f0c11a15b19902c0cb57057496cb509604e63855c7997763304c28bb5ffe54c5008345bec15590f
38f28d77071a733b67873841113f9ff36ae1c6af1c9710df532f503a9309f87457f0cd4da12ccadf
14db2cbc66624ab325792af34f2608b1d4a0fed9855a94edb4abd530e12aa05013071ca3b0c7d1cb
2d5db20da1bda162b55323c0a73795f1b1b44533d0ad8eb50c94512c241b315b0a3c6d8a834b0351
48f4131cc36ff3e63c2c88be9085b9540795375313f600ace45414c484150afb5ac64b85791ad524
0c7dcdc221e8d38d64d9c5ce09eed391a6b48cd9f6f214ae0dd9f9e55f38e7319a20e942f3e8841b
546124edc92b5dbc40d07fee2e7c993d8427f3d3c77d96d0fc4d18e34e8b3f472b3aec578fd805ce
efdda95db7824ccd28b2f317cbc7a1301a655b0c2588f34de0bdfcfea3446d990bf23e6053421b5b
dc9753e7aae3dd8a33cd157d3c93cfb10fa23f79cf5a47ba84c049e59df1e03cf78893d3d525d524
d53f0aa43c775e8674b36f6bfa204de085c5c31b29c5415019c9891a05fa5bc7ca0f9b9857a68e7f
cf18ca767b12fa9d2785f1afa0e2fbe9d1844b4f01e1dd53eaf2fcedc7b886311974693dfc8fcef8
d2351ce8ca33c7743ca7a43dbe1bf6ca44fde16fa2d4b1a31c05b64bcd6c0e4194bde22a0ecfba7f
5ac6c69f9f1db85d61ef968db7e33cea41f4ed26968de1864a7931f8dc3e42a32050655d08db9e4b
6af3bcc7de333e9c20ee7f0e565e7145daf67bb4456d700183e664dc07fd46b243507d96a434261e
4b2421ff46e531514eaeab09b57bd3ca29b20fb1568c8f62405b1b1dc5f7a366f9fa9316be5468e6
9f8cb6c448f9219e5798e15ff26f2f199599e33cfd45ca541a384172478b06d032e5fe4482f49183
342da636aba2a596792483067e7149cd41cfc7d6d885223ac205fc5699b748be2cdf78b908041573
66593d6de624bb64e53bcf79b873100ae6620476f9a6afb5e1e44ac349055d26480103490dcaa020
0143d365830cbf37c820608c4e68b0509407e86354244baafc1f5ffef729ae4b0e3ba6bf9f43cd6c
8863c0e88c4e816717f453f7fc3f57f003cf0d3c884ee52fe6bb4385244609dc303b8578cecd8566
73bd3a472370176cf3d807d1eb447f378a05c5738b3738b15da06e7fbfb909fa9b09755673c0e3c5
bc230837ef4f42eb516d1d48706e6733168ecc4b8338048e37365053b71a46f05cc0a89bb5d8305f
29e645217f5fcd488888d595064d83f71d03cb1373584a84e6cdcef98d6a5fdd9fa6f00123ae8468
075e08ad70d3bceedd7b8c8dfc726f371109eecb3f7ea7ace7593ef62ab8c5957c75afab80f543a5
4138d8600d64713e6bd0a4d9a2be23db42c26f7c8f86599baf6899aa3c9afcdf1921762c68a2489f
3680a6e3d81de1a8bda19e588b9a1d6a49d6ca85a11b6137c6b22b995336b8e09f7a9e784f92bc47
21353b1266e63bc4586b097c4e05d890e610e1476059828563b372637c2094b6e29a02ff31d273fa
1ecc001d37bda1e14c8b198b09d124e23c960b354299c1a7e518f0d93f5e0f9c387d4cbdede62575
61ece1c2b40a4db058717b4c6da2a274b4cf1bc39ae09d507061e99340389e75ada2e0da249b06f1
05a0a21625dc655194980934cd0644e6458f788156cdf8bb673d3d1e7a4af8876f6b8f5be223ec31
2c2e2ea7ffb74612bb8077c44f84795932b23bd01fc2df71ce70e6dfd568e8ce1168cbffa6c79a1a
1349e443f747bd3edc46d4371d7cf284cc01f9f5611fa391e7c24452d98a792b05a4cf1fddf8670c
d3c955d1e13f0482785aff19e7882b8da4609d39759e053879796cdda4184dc0221eb015dcfbeaf2
dc6ea0576a9411da367bc827f20810b92aa3aafae29a21a825e64493ad24575174a09b804c35c795
3f60b789e77feae4a687c08d2d643a1d40f5776b1178c07376506dfb63ab0055da1fa50a7ef0a321
9c37b648e55349bbe1234956e7451cb34106b88e780efa668975d9663d65cffa73f0b52b5ae51e79
27e1bcff474853dd0e02a89fd28aea09ae7d623d60947511eb2865e0b9bca270216e8e1214f31d2a
85d04669cc11e2885b8f63a5c0a977c27e702afa3d58b3476420e80e1d2f7386f4e7cbbce29088fa
74807e2f4230eb3fc8772cea6bcce82259a2524ac13f9265b1907dcc2fa955ba6261d75d8e14a32c
33f521a492c095e663abd44c04c48c7f4d1ef802f179c382ba77adf5e3fc66d3b5993667d39fa969
07751a9ade4b2333f3dd35066d4b79ca34dab04a0c7898118903533768cbae7500c7a21a4bd1f7aa
6d1428baf9cd9c458642e8089de3801b13fce2d0ca6fcd748bca3c9b21af26c33d2e0372c7028d3b
98886760dbbe8540a8917873e85eb078452cee275e921c17b335b7bdde82dd54255fc1aa73485845
24a8b530302da0c58c5a5e8d72525cf9e4ff972095ea21fc6b4156c04ca55943514a00e83929c576
7846781700305ecc7f71287ded4adba16540470f9efea0ca34a479a0207f1675f84a7170b9b177ea
a4adf76e865fde9c670bd1bfa331f9438823be6f7a1c3552a94ea81b96feb4adba2b6392f3fd2138
2c64db5c8336db051be507e2f9cde79b40232f5e83d43e767eedec9846c5a0d52aa0f273894eec88
acaaf894110ce564687446db81e354708bec4161a3f3dfba760fb58a67de118144c0ef38237c247e
23bc011035f93676d09aeee1a13263ad0effc1539ecc2b9d7ad87a4aaa6532498ba8d744af9b443d
86f7266c3b5380e70aded4ace5ef0013f3d6eeb116949188e58e4c58860eb1d2f8045987f9dfe8b4
d7980f59b9281646f2f316e2db5311a3741eea8a28a6dbab687d03e440b34cef258a1a99507fc51b
97f6f33ef7abbcc88bb27a1568884859057884c033ef026a4d3a23817a7608761be26a83948a417b
60e5b7f44db25c8f0877b8b19697dc65761e6c17133cdfeaaef0715561c93dea0e5f6780a3277f46
e405ab85b05535ff0f468a0fe6b20fb4c8d4513928744c8d547454b49378f9ea2bc8e95aa37ec504
b1b06f380d75f9cfa9746e6038c2e511abf78da2d6f7623f4bae269e287d9e0b12496e77f8b7f2f0
ded4b232bb1b355758776425de8d7afb1a68e029d56c5a69bddda243daded3343e32144a3479f64b
9841d5b443bd2184d718583306e0c1b82f8fa76ab2f35547533121739ce3b8b04cba21f2e92b57c5
17acf2fd953db1817c04b06f2d36d7b665918a0f15c8076b8a0dc86167330092eab92d2bfcfb1dbf
e0d575bb906b27a84009d737a4c8ea421773138221100c988f12e35f058c03a1803295fbfbad4904
36ce8e2dfce83f16ab6c478b5ac505e8a8d768ee394bca7b604b1861de2dad428eb546a23296664f
8364130617bcf41892eade1876ce0d1668b8f7349cc434e40d2d1f3f952601c64762098e28480de0
9b23d2a9693241cef61b528c7dc696bbed09ccbe092e9fd6396b391dd85f52dcf63a797900749e24
12b8c5f380e7753019b23d4db3939a1004cf35b49e70cd8eb593403226130d25aa7779e3588695e9
c0699bf8386799fba07699232fc750f2f6eebf0f063eb8736df1f79a190ff5d124aacb398cdc016b
7546e99cd9fc9e1022223b5b544c180d8198f3aea3bc93727ac557fcb17e67aad03157470fc2a800
ab373de85d3769f96804d4a8ab208e4f3b390d07e52ce7cbc6250a47125c2824127d74da1766d400
02f7700812a3efe6871db0102e2395c8876ad6190c479faba1d253c97e650ee1d6f8966365082637
8d784148e2f13105cbd2efee2b148de21e60f8b86bc246ff71f792f62d2d08c0f583ad0ef20c6c8a
a51a3799f5e4e8ab66ab956678978f2c9af8e0eefe889c5534806912eacfd9c3e93423ccfbbd47a8
3884ceab067a79b17de0cd95a9b82554efb7f3c684c6d660f702456752051c3cdaf0894d64d506c2
49524f040388b00d15bba2cd1a603394339942ec70e3d535605886efcda373cd28fb7b6ca7491b6a
2b473a485683ce99f0d5fe528cda398be64f1d1dfd23e86960628324c498ad5723d2a40acddd6550
d0b6088bb7131f5d36550fcd07abd7123110f0f1f7fbf7e8afa549ef3efbd38d60c29fe8a539b918
afa610f129e9c7987a4cc97555ea790e0eb6cd0e1dd988bde40433155143e1e18cb236860e2cf86d
39ee5c4427ce743e1f11ae587a0d274a3f6303a792e2b31dbe2db699dd3265a59bca38a43948c400
02b9def638ebd31a4b53b24bba65bd1d94c683132d4d84a7c5bca0f9f7b450e0c5aae5174d06a7d8
ee1f98a1e8d41d4a1bb95abc6b5ae3cbfecdfbaaf82913b4ed96ae9afe09f3bc2cbb86af1a6d4980
4eb60597dbd13450a2cd22657aba1855d3fc073f94bf0d07878376fcd037328da582664b82481adf
255bc6f1a3bce3ba0c85bc4bbc37be638ee3b9d538ad45f99447ff8c8de3779b2b4bfb5ad1551921
0d897c5465ad72cbcba7adb1969246f333ad70103ad0351b0f5924245e316fdd9f48cd954ff6eaae
d6f830ccdad071d93ce57e93c7e2e9d9b01423b2698085ea06e294916db63ad38515f055c8766d0b
884bc524e602cc695994b42a83cc0f7c6d617ab3bccbb9cb6df5e7dd3bd0b56cc25b7261c4780333
b4badd997dfb1e0ef6f6deab8756644521dda0c95d51ad85c690831e06ddc64ac1b2c8fd136b45ef
17daa58da64886e118084af67bcbabf57bbd303bbcc61243e88a2c11583fe5e406655dfc9a3ad407
8d3cd5a6c0baf9132f796c6a05259c4c84b08f2189069b0bcf21202bed0de00bcabc72456f7b3e61
8e123097ef7d67a05f740c8e3e9a02ee8081fd64605899cf38b8050aa26ddc2e2912bc9127c7e74b
e76a24a46016f2ceae143dd420e2abcb75b6f8dc520d30dd62189c1a9944fa8a8f3fb825ef68ee24
b6765ced9d2f9dbb4d35868c5397efb7e5e0719f6a37fbfdd9f61496e64351d5e714803406cd578c
5fe4f062446352f222b5bc1faf34a5b93c2da84d993a97e537ba52123dba83c5bcdaad7dc6cdd4c8
28a2669afa9cf9068679dd9957221185cb7789f7cb34736a9db70a1753ced7b0b1e38840bdc63d68
a38d8738d19d15b927e4cf7a00269e37b8a0f844007cb854cba8914da335a1ab04aef37df425ce2d
e20f9b1f13147d0beaf57a444ea8315b8c2cb6a2c2da9a39b0bcc81cd35a21462372c4032c3ecf68
f98a0991b82cc12ce8ff200b70700dbf2a34c80196022b040d2c00bc54a38312ed4fe60ef30d3ab8
c9beedface91e96632d65a43b641fd335803a191cc20f5355e8fa4a70d9637c8975a753364d23dfc
e64893f77e7ad1cf9fceea7edab15dd0a4439264f8e12a8135c77db9ae2bad16fba7bce9bed380db
7d52826b97a2e60f2b5110856ac7a1e3dbd3612e4e8464639214167392bc97a8780d2035765fb742
7c68345cb82635499b9e42aa5fe2c64e1bccb82224ee3cf990b9713fc3749eee5214431dac88164b
30013f0a679e56c6af7183b21b8d58d30cc59a62e95cd58e870119dcba31208e5776daf8d86d6337
0b7ae36639a7979373f2b1b57a0463851718799f20f7cdc98ae76f5f10c581ea70217565eb476968
dfa2130c1b12c8320b1a90442526f588feaca0b8bf7e6aa487a0de28d46259f16d3cc3d927508284
2acd172bfeff8a4ad30fa6219b80d979498370ddd3c5b48b4292227fb2543f610ae1d22a30abce03
dc572f8a5bf5ef7afaa4889ab0f308dbe0c0913d5d72868b4f2792e1aa1ae64ccad9a43cfb990815
a67c5aa28b44c547e66450d871cfbd7d5a770a3f4ac3e31dab2bee4cce3aabd202b850195922d14b
2a7b3eb0e0e20fda24fd6bcfb4ed1a23a3bdf1ce98bed3c5f1d14aa09d1c89767d0ca2a97dfd0428
2bf4c9111b982647c7966a93c851a1f3e59eff0d517602a285375e7c34e674854ccf5dc6f5c09505
227bd3a0ffe15f6277804a3fc7a91f5c1765b3f622a8ed6ada195ef771fcb64ce34a68f6fc6bf33a
7d6ba907ff071b82be6bff8c579d257186d310082adbb50d4059f7852b5e3cd3fff01f2ce4a5ffbf
94d80140978fcc2c73f5c99d1c5ed6570bb4a75bac41b0988f77fdc23b26ff68f90cec9d8118371f
776710dc1000eb9102af8b9105075a59278661f69259d2a1417774014fd873e61d100a367c14ac58
41d86988fddf417c7028e7c7b5186a20442ffbffe97ad6b5630d2cf0d0ff2775b5891bd31a19183a
d3e2564b38d1d2f4f9df7d7a72981ab3a805d4d706cc9a93e15c26370fb0ec0c69dbe4a4a96a1adf
9c5616d555dbd5910bdcb56a55c452b148297dcbaf801daccdf577dde3715fe52661cfba07d01243
3f92e4e160d4c4b65190b3d9ea3b1355de0b91f3b0e407825d26cc247837774b62316d58dbb1717a
bf416fe4133cd7f0b7f9703789a1bef89086595f801ba77b51b5c4b2507391a9e6a050cdb7a859ce
64669a038a83afec9810ecc9dcab09741b215f5625df3115f5af59026f12666b32c737dfd682e7b2
ac8876076e7b296b82be93fb5ef7b7c273ae8d83982752111f5f1b0212e73eb53eeaf061351d4564
fd40f4c45a86b9128e334ec94eff0f3355dbe9f115536bb2033c131c37f2662bc660307f408e8957
3918c72302733860cca977ce1dcc57bb4e144fd878e552c16b6950cfdba10b392921ad84ba6c48a0
c716d812918c07bfc4c0b9cee69266716e9ed6b98aac8df5b5cc488b41426bd90f9fdeaa50d35f0c
3c9ac66308b1f1bf024ad9d57b7dda25cb1334cade943562666b85db1409f194840f91ac96ffc5d2
d1f5733128e1116bf9d0e135779ef045ce67ca8db810bdce14e9ad0fcc9002afa303e38377ecf70e
bb2b19fbc340d96dd5297ed5b8f10429728e69b48950679a63000d691a77bed9a5a85637855a8526
eb08f38bf5810e7f4aae81bb8f2659655efbd812f0ea8c4a4980040fdbef7090c7eefb766d93273a
29f81b0b946b48b8e08d48946ae515d21af7328f4888c9fb35f8fd74cb4c930b3ce9f6483bddd3f7
4df8f25c0c17dd872687c5c83db69dbb2af1b27906d4a451fdd99069aba1564ffdc4c015d15af7b0
179abf87b644622631ce4d386acbc7fc12aae4128feee4f8fb98d262b4f2aea4273ed835769c609e
1a077c35d8d3f2e5a6d338ccc58e9f19123235ef7a8104d8372d6462d636a01782744af626f97a4c
7c114a4050d745004da4d522d3d322f2197e36b9b439fa47f0892468c3f5fef2a34d512748a4b274
4bcca93e04f3f09938b13ae0c92c0b7b6c84ee342a0de1ea0e2068f99e245d4a77f47bcbd3684121
b3df96f221adf79b5511e991b3f70ee882ddd6b1fbcb52334110de2eb1c96275efa79c0691f97c22
278e3ceaf09cd0462107b044d56a2c3eda064d1b569ec533309f01449954c3df8ea3500100f0de84
d2300e9becae4bb09c9e9e7fda4f3230411ae802262d338a0c6130091ea54e92d863510bca5bad38
83dbeada4ad3848fe318b84f216d657b7d663a2e858086e8653785569725488f15397e5740805760
df36f34cb8b7505a8a1068315c9f884c7614f05470a463edf930e6a4db7946c0b717a03e0d1d4e94
eaed351287c421703d02e0258a031349c2f147bb85c1129c88f213e76fbc738552028a65a8cced2a
6c5ce8f42c6393b9733d2137fd57b0e66a1c7bde49d822cd832a71afcb377a0b2cf1b44c3528c711
62b4b50e41a40d76a71060d7baf310a5d5a5c7c113e48f52f25503a0e236f562c79c5574bd98487e
1698c127d01883776c1ae64f3e7260e68bfafabeea2161e35c0721c4ef4a9a699af549eb4315f4d5
b287144a72cc23cf20ac9bbee2a6ebf45b5b5da98069025fda0f220dbf54f8f8d613c2e0d6016aa1
6275f6d70a4ac4fc58da4af8d2b65cf3609be794ce7f214a1fc813f7252dd2442079350e95ba19ce
7b5b67e9a68543999ab10b499137dd058b4399aecee359b3417d5865596612523aa7cc9a05e4a4e8
c0520184bfcbbbfeedac0a6120a4eac350c35b9d7e05bf3621f12f2c55b98d619c8cdf566d559cdb
16d0c405e41bee8500eb127bb0b344c95dfd19e4598c40627eb65d0fbfa7f8d5e974bfc35e0e32a0
e8eb9dbc3fc30a807d6cdfecb7f8fe9365769db8f3a941bd1245fd59719a1266e6c14a5d7a05c4d1
fcb087dc34c9246ee2e5fad89003953a1f91ff7cdea73a2f9ace983299eea239d40116abb6fa8afa
2a62a59f359d6d1470c6ba2c1ae4f34782d2a311cf665156e0bdc0e14dd27c920556dff74c89b4e5
a433263b65ac5259becbff4dafc093cb222a3193d2b1c074a60f48a503a67a5da995eb8f879cfc6a
f65225c72cf8a9f413c93764e9cf66f07794a19668028bf653a9dd6f4cd53912b86cb5fdcf09f7dc
70231442a366ffbe6daeede7362eda54a144b6c7d3b8bca273433bb1b70c5ea79f5b0b359dc9d59b
cd7b1adfe5cd59ff62da3cea57e28086c00dfe7bdd0bf2fea40a85994b23faf872e48a6f7dff9281
081984ad9db75f15547af13d7c7a236cc8ff74cf97df063188a1f07c5b7996f0ab4dc44b72434ca8
5ff0570fc70db7a50a64757fef0c4077ad46a8446e86830422636913ce482f3cc4504cda39f5e4df
3e527fabdd84daf42861f322d7d8841af5e9d8b65fb781b17d56760ada4f0d50b8d31097811f39d3
004fd917cf8fd9219379c24e82482d4cd88d75e8e83f918337bae37a6397c1933cdfefde707877fa
366cbce6054208e0d586375aff331bba8bce82aa3faffe8e783a41cd6469d5eca5352ea134a5a835
14f46e9dc8732ab9a177d8ae95b5513022ec69228cfc391f2efef0d655042a5d1e351fad030241e2
bb36ce280950c30624572f76d18a11b1c97a97f33cf6d80841b3a9b0c0
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 1345 V810 1 0x0 180 V811 1 0x0 175 V812 1 0x0 860 V813 1 0x0 200 V814 1 0x0 400 V820 1 0x0 420 V821 1 0x0 440 V822 1"

// Rung VGR_Copy_State#2
// Offset 51
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1"

// Rung MPO_Copy_State#2
// Offset 31
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 V3201 MHR1601 1"

// Rung SLD_Copy_State#2
// Offset 23
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every "
"scan</FONT><br></center>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 3000 0 C182
RANGECHECK V142 0x0 3300 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
#BEGIN FMT_COMMENT 
"Deadband for X position difference"
#END

STR ST1
DEADBAND D140 5 D1

// Rung HBW_Move_XZ#10
// Offset 48
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#11
// Offset 63
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D1 0
OUT Y50

// Rung HBW_Move_XZ#12
// Offset 69
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D1 0
OUT Y51

// Rung HBW_Move_XZ#13
// Offset 75
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"Deadband for Z position difference"
#END

STR ST1
DEADBAND D142 5 D2

// Rung HBW_Move_XZ#15
// Offset 89
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Move_XZ#16
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D2 0
OUT Y4

// Rung HBW_Move_XZ#17
// Offset 110
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D2 0
OUT Y5

// Rung HBW_Move_XZ#18
// Offset 116
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D1 -40
ANDLE D1 40
ANDGE D2 -40
ANDLE D2 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#19
// Offset 135
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V118

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Task Send"
#END

STR C101
JMP HBW_Program.S7

// Rung HBW_Program#8
// Offset 14
#BEGIN FMT_COMMENT 
"Task Recieve"
#END

STR C102
JMP HBW_Program.S9

// Rung HBW_Program#9
// Offset 16
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#10
// Offset 18
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#11
// Offset 20
SG HBW_Program.S12

// Rung HBW_Program#12
// Offset 22
STR ST1
JMP HBW_Program.S1

// Rung HBW_Program#13
// Offset 24
#BEGIN FMT_COMMENT 
"Task Send"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 26
#BEGIN FMT_COMMENT 
"Set Position Targets"
#END

STR ST1
MOVE 900 V140
MOVE 500 V142

// Rung HBW_Program#15
// Offset 31
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#16
// Offset 36
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#17
// Offset 39
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#18
// Offset 42
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#19
// Offset 44
#BEGIN FMT_COMMENT 
"Task Send - Move 2"
#END

SG HBW_Program.S8

// Rung HBW_Program#20
// Offset 46
#BEGIN FMT_COMMENT 
"Set Position Targets"
#END

STR ST1
MOVE 2950 V140
MOVE 1700 V142

// Rung HBW_Program#21
// Offset 51
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1
OUT C10

// Rung HBW_Program#22
// Offset 57
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.Done
AND C10
JMP HBW_Program.S9
HALT HBW_Move_XZ

// Rung HBW_Program#23
// Offset 61
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C82
OR C83
JMP HBW_Program.S2

// Rung HBW_Program#24
// Offset 64
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 66
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 68
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#27
// Offset 74
STR ST1
ONDTMR T0 3000 C12

// Rung HBW_Program#28
// Offset 78
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
AND C12
JMP HBW_Program.S1

// Rung HBW_Program#29
// Offset 82
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#30
// Offset 84
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#31
// Offset 86
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#32
// Offset 88
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#33
// Offset 91
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#34
// Offset 93
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#35
// Offset 95
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#36
// Offset 98
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#37
// Offset 113
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#38
// Offset 115
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#39
// Offset 118
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V118

// Rung HBW_Program#40
// Offset 133
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#41
// Offset 136
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#42
// Offset 139
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V118

// Rung HBW_Program#43
// Offset 154
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#44
// Offset 157
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#45
// Offset 159
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#46
// Offset 174
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#47
// Offset 176
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#48
// Offset 178
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#49
// Offset 180
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#50
// Offset 182
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#51
// Offset 185
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#52
// Offset 188
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#53
// Offset 191
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#54
// Offset 208
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#55
// Offset 224
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#56
// Offset 241
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#57
// Offset 257
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#58
// Offset 261
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#59
// Offset 263
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#60
// Offset 265
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#61
// Offset 268
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#62
// Offset 272
#BEGIN FMT_COMMENT 
"Reset X Encoder"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#63
// Offset 275
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#8
// Offset 56
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#9
// Offset 73
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#10
// Offset 77
SG VGR_Program.S2

// Rung VGR_Program#11
// Offset 79
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 87
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S2

// Rung VGR_Program#13
// Offset 89
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#14
// Offset 91
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#15
// Offset 93
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#16
// Offset 95
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#17
// Offset 97
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S7

// Rung VGR_Program#18
// Offset 99
SG VGR_Program.S3

// Rung VGR_Program#19
// Offset 101
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 109
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 111
SG VGR_Program.S4

// Rung VGR_Program#22
// Offset 113
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 121
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#24
// Offset 123
SG VGR_Program.S5

// Rung VGR_Program#25
// Offset 125
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#26
// Offset 133
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#27
// Offset 135
SG VGR_Program.S6

// Rung VGR_Program#28
// Offset 137
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#29
// Offset 145
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#30
// Offset 147
SG VGR_Program.S7

// Rung VGR_Program#31
// Offset 149
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#32
// Offset 157
#BEGIN FMT_COMMENT 
"Rotate Crane CW"
#END

STR C501
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#33
// Offset 174
#BEGIN FMT_COMMENT 
"Rotate Crane CCW"
#END

STR C502
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y27

// Rung VGR_Program#34
// Offset 190
#BEGIN FMT_COMMENT 
"Extend Crane X+"
#END

STR C503
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y25

// Rung VGR_Program#35
// Offset 206
#BEGIN FMT_COMMENT 
"Retract Crane X-"
#END

STR C504
ANDN X25
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#36
// Offset 223
#BEGIN FMT_COMMENT 
"Extend Crane Y-"
#END

STR C506
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y23

// Rung VGR_Program#37
// Offset 239
#BEGIN FMT_COMMENT 
"Retract Crane Y+"
#END

STR C505
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#38
// Offset 255
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#39
// Offset 257
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#40
// Offset 259
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#41
// Offset 261
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#42
// Offset 263
STRN C500
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#19
// Offset 56
STR Y20
AND X17
RST Y20

// Rung MPO_Program#20
// Offset 59
STRND Y20
AND X17
RST Y17

// Rung MPO_Program#21
// Offset 63
STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#22
// Offset 69
STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#23
// Offset 73
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 75
SG MPO_Program.S2

// Rung MPO_Program#25
// Offset 77
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#26
// Offset 85
STR X17
SET Y17

// Rung MPO_Program#27
// Offset 87
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#28
// Offset 90
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#29
// Offset 93
STR X18
RST Y17

// Rung MPO_Program#30
// Offset 95
STR X18
RST Y20

// Rung MPO_Program#31
// Offset 97
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 99
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#33
// Offset 101
SG MPO_Program.S3

// Rung MPO_Program#34
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#35
// Offset 111
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#36
// Offset 129
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#37
// Offset 132
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#38
// Offset 137
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#39
// Offset 143
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#40
// Offset 147
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#41
// Offset 149
SG MPO_Program.S4

// Rung MPO_Program#42
// Offset 151
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#43
// Offset 159
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#44
// Offset 176
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#45
// Offset 181
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#46
// Offset 187
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#47
// Offset 191
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 193
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 195
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 203
STRN X15
AND C800
OUT Y45

// Rung MPO_Program#51
// Offset 206
STRPD X15
OFFDTMR T103 3000 Y43

// Rung MPO_Program#52
// Offset 211
STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#53
// Offset 216
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 218
SG MPO_Program.S6

// Rung MPO_Program#55
// Offset 220
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 228
STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#57
// Offset 231
STRPD X13
SET Y18

// Rung MPO_Program#58
// Offset 234
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#59
// Offset 239
STRPD X13
SET Y47

// Rung MPO_Program#60
// Offset 242
STRPD X14
RST Y47

// Rung MPO_Program#61
// Offset 245
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#62
// Offset 247
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 249
NOP

// Rung MPO_Program#64
// Offset 250
SG MPO_Program.S7

// Rung MPO_Program#65
// Offset 252
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#66
// Offset 260
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#67
// Offset 265
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#68
// Offset 270
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#69
// Offset 275
STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#70
// Offset 292
STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#71
// Offset 309
STRN C801
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: Listen for Doug's instruction to start module."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
NOP

// Rung SLD_Program#3
// Offset 3
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#4
// Offset 11
#BEGIN FMT_COMMENT 
"Wait for Doug Start Command"
#END

STR C1610
JMP SLD_Program.S1

// Rung SLD_Program#5
// Offset 13
#BEGIN FMT_COMMENT 
"Enter manual mode S10"
#END

STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#6
// Offset 15
#BEGIN FMT_COMMENT 
"Stage 10 has manual controls for SLD"
#END

SG SLD_Program.S10

// Rung SLD_Program#7
// Offset 17
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#8
// Offset 25
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#9
// Offset 27
#BEGIN FMT_COMMENT 
"Manual Compressor Control"
#END

STR C1652
OUT Y31

// Rung SLD_Program#10
// Offset 29
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#11
// Offset 31
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#12
// Offset 33
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#13
// Offset 35
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#14
// Offset 40
#BEGIN FMT_COMMENT 
"Manual Auto Run"
#END

STR C1611
JMP SLD_Program.S1

// Rung SLD_Program#15
// Offset 42
STRN C1650
JMP SLD_Program.S0

// Rung SLD_Program#16
// Offset 44
SG SLD_Program.S1

// Rung SLD_Program#17
// Offset 46
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 3000 C1600

// Rung SLD_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"C1600 is set to true when timer is running so the conveyor moves"
#END

STR C1600
OUT Y30

// Rung SLD_Program#19
// Offset 54
#BEGIN FMT_COMMENT 
"When the timer is done, move to stage 2."
#END

STR T200.Done
JMP SLD_Program.S2

// Rung SLD_Program#20
// Offset 56
NOP

// Rung SLD_Program#21
// Offset 57
SG SLD_Program.S2

// Rung SLD_Program#22
// Offset 59
#BEGIN FMT_COMMENT 
"State 2 is where color is determined by checking if the "
"analog value is within a range, and conveyor timer distance "
"is set based on color.<br> <br>"
"Need to integrate a counter here still."
#END

NOP

// Rung SLD_Program#23
// Offset 60
#BEGIN FMT_COMMENT 
"Subscrib is to get value from color sensor and convert it "
"to something the HMI understands.<br> <br>Need help with HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#24
// Offset 65
#BEGIN FMT_COMMENT 
"The disk should now be in the center of the color sensor. "
"This function checks if the color of the disk is in the "
"blue range. If so, sets boolean value C1601 to true."
#END

STR ST1
RANGECHECK V3200 0x1 23000 22000 C1601

// Rung SLD_Program#25
// Offset 70
STR ST1
RANGECHECK V3200 0x1 20500 19500 C1602

// Rung SLD_Program#26
// Offset 75
STR ST1
RANGECHECK V3200 0x1 16000 15000 C1603

// Rung SLD_Program#27
// Offset 80
#BEGIN FMT_COMMENT 
"If C1601 is true, Off Delay timer starts output is set to "
"C1604 which when true runs Y30 for timer length."
#END

STR C1601
OFFDTMR T201 3000 C1604

// Rung SLD_Program#28
// Offset 84
#BEGIN FMT_COMMENT 
"When C1604 is true, turn on conveyor."
#END

STR C1604
OUT Y30

// Rung SLD_Program#29
// Offset 86
STR C1602
OFFDTMR T202 2000 C1605

// Rung SLD_Program#30
// Offset 90
STR C1605
OUT Y30

// Rung SLD_Program#31
// Offset 92
STR C1603
OFFDTMR T203 1000 C1606

// Rung SLD_Program#32
// Offset 96
STR C1606
OUT Y30

// Rung SLD_Program#33
// Offset 98
STR T201.Done
JMP SLD_Program.S3

// Rung SLD_Program#34
// Offset 100
NOP

// Rung SLD_Program#35
// Offset 101
SG SLD_Program.S3

// Rung SLD_Program#36
// Offset 103
NOP

// Rung SLD_Program#37
// Offset 104
STRND X36
OFFDTMR T204 5000 C1611

// Rung SLD_Program#38
// Offset 109
STR C1611
OUT Y34

// Rung SLD_Program#39
// Offset 111
STR T204.Done
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"T3","T_HBW_S6","",""
#END

