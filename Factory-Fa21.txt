// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\hunte\Documents\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
b395ecfe28648a81049735a80c87ed67ec7f93ade133b06f83952ce0e91207d064a2abda43313195
ba0fa02948750318b6328a2185e64fb3bfd54e7e92b4fbf082804ce0ca59633373dcc5c240a5d60e
71809ddd64fc48c861f1c90569b704685e26d54a5509472334ff6fd0eb9135697d90bd0451e09e4c
570d4b8170748866057a1a5ef93db1147c8bbae2fb5966a9547ec72a8d1c8d6e22f0eee8f913ea68
76bee2107fa2ccc6d1ff4832c0da7fb61ef0f4a2c6bd0416683c8d9ef8b075c5752685c3cff7dd63
d4b35d6e4a25f1f6fd945d641efb3aa2c4f082e780ffa3cd076666e17e07e89b66d894cb0b0cc2ea
11c9fcf1086ce3eeba564977a7ea8e59974166e8d7ea0cb330db7c52fa0cb8efe9d8a828dade2666
ffd9bce5848eac2d1600a26605b1d6294a937cdb92427fde011f594095e17549b7e15626193c79bd
8ee9bdc0b77ecc6a9c57fbabbc2c3cda819be10caa028ac1e2bdb0c059502c35facc9254ee9a3e61
ac1278a79c15cf700952d5e275a3c9237a4d4c1a7f46f0e3770451691af7f1967cdffc32ab8cd544
7f4393815bcfd904dad8586465cb7cfdaab8ce1b111259305f696307be0f64566c09d5da00e3c7bf
46cf61e7dda7e34cc02557a3e5c06ae7576606348ffdf5ba13c222065f26e038001c4ffd4d9d56c3
cb215a76c570d15218cab69eb57c4e83c12f9a1260635c7ddada34ed223ab414d6149d9c86ba7bec
041be67a35d92eeb94749321e3752041a9cbb05c59805d9b322063fababf83fc3e5aa86af2c41826
bafea1a7780dad09cea1b9434adfe730ed90cde9922d312cc08458ecdd42656fef9b255613aa4cfb
5dca857577d287e0bd0f555c268995a405efd6d18ee7718606293fa56ed61106f0f2c8e5fd9d498d
9dddf5f601dc12d9478db9ec24fbd933e337874b233564713c8307558c7a7a0640b766c03b0689b4
c6d56ff7779d541c3e2cc4797f7782701c9751b8c4ab0ab0188a1cc9d961dd7ba3a9ab21f6e4c8ae
352bdec71ac4913cdf7d14ad6f09566a78f154365148859aa65fdacdfe0fda70915c2f1be16c761f
a890873142d83e1956c4836907c20444582c05884b9d9afae434e50cc2dcd0d513bc4dd47d05eee9
274b0b119322c61daaeb6727b970c7e59cb5eef8b185b82a6b88678e32fd018d1eea19e65625b6ca
1cdb3057f2ad48581725394af22a39da75bc8fe46cb6723fca570090afd332c1f219358f3dc14bbe
bea0440e7d47225774db4f1131d81805170585f5dcd97c76a730a3ece91797a3d032e94a0b4fb6f6
6f058dc5d3ecd53928e4135701a7a119eeb952c75dcb86f725e6ec857ddef515734f7b98fffed925
dd76e6ecbe38401cc59adf60e8779914648d983eef9b6ebaef06fb424400c9960743f3b305026bee
a407ebef36b1f0fcd18529d749e3535a273d4c201208678be490b391f87ec216359185153e293550
9abbc4ceced04a197763ff360d5905e84c24dd25ce31994ddd4da22f653af5cd058822a4d698d167
d46c5b6ff04cb6e3217b4bcba54ddb58ffabd6cb917571e1d4c3a24e2bbfcd7ef574dfb256081d60
aab0fda03c5d837130ef012c64a863654d3e756690b0434e1bd8c7517abcba96a9f19657979c1009
73ad655072e6aaeda66ab571541355005f3fe9d0d74800398691f4f64472e1df5131b6026155bbdd
44a8230f14219a41a5f72bc413ce372ab0b4f1bc1db00acfd3a483ab93a03ef24f90f1656086bfae
719b09b6273a1de69148fd12ec804f2e0a567ab9fee85b45c20396e9e7448e2300a951db8e2ac1b5
3a6d9a41ddd8326e3ced7498579f1c531a7b9b6cfc880750a77ae6e3095507d6cb6933aa6a356e86
6b7759f1112f89e5290d08f5d81fc6502b0cff3166fb48210a6e21f57d6e75675176c75cc0f7e22a
db8082899fbee6efee2bac2105acf4ae1aa180e3e4ab7ad4ad40f6b5caac912a11645df2a76b1c39
f738307acf3d0a07c4080ae313a61e72c7cdc00e40d69c2d5156fdc622efd789e04a302523736b95
fa388799031be16f3dfb1ee7f074de125405396bf1f46893d68fd7bfe6c3d26638a1ad8febc470a6
29da299654e0eddc36fde9d152beabe3a8207e7570301d61854f55f9f166740221ae7b9ea8301ed8
e636dc64255c2ebe728f18436a14e032b29bac36ded4d6d0b4f98a401d104e1e3c1a19fb07d551b8
63ad0d33335c6e790a405e087695c3444899630c7b5575d818acbafbb0d9b6d0476a96c7b1428379
490cb60724a0129c74a573d42f9aca01be9630328595ab8538b7fb38e4daf0dc6a0c4233bd9b5318
9192a356efe730760891026b0b6721b2b96be5fb6bfb1da1f16843e5998dc11d0b32eb616851d9d0
8e50877809f4d49dece61a177059c4d895c8baf173671bb53e732aef646d023e869b79e36a6ebe99
2fd43286484b3043cc618308271954c9ed4e81d3ad723c01748fb1e4edded54944ec774a42b1a5fc
37907cd6f72b3af7681a025f076e87a6b86afc38ce86812a2749f9b5b09ce69cf98de234d1ee6e82
df7814540837a93319f22f3cd5b65edc7a46bea86244308f57fe958a87748ecbc942373b9891a288
d3e497f45a5ed06be50fa5b9b7a68afe613992993f3db8a896b8bd335f9f437d575c810a85c5f5ed
e560164ee343dd895956dbed7fbea1a5e9c67d590a5adeb877406c0f34f63311284a11c5511ed320
eb88a300fc1da94d0c6f959a4e240e44ea003c64dafbd45ffb240b9dfc9b0f6a34445c50b6a15511
364f4cd69a26eb5a251b30761a4eaeac73cd0bb4a6398afb0a8ec45471182869f2d63e586f61fc38
d8dd0505b16975592c299f8a90553a6f6e095175176e572f0ab8b4eea3e0311df2141a1884db8cef
f10bd7f71a1bde8d927cc6fdb1e3f91dee597b14d89be4d7b9536defdc8e21aac20a5dd0e52b3792
bad97e410062c2f5520d70cbc4e5b5fb87f9ab7947ac024042186f724ca867d40b928dbf618a61bf
8044a1b93c3cbaab21a6eb8fd3f335b627e227466fcde4236d8143f7d11893ac60ddb88c92694e16
5084fb4064c8055c5b7000f802468699d70023b6931456fde6065db86f85c7be5de2407381ed4572
9d42ced6e60ddacaa8373d90ffc6b517fbcfe857ba2d4ef18ee7b7b1a0c7935f46c491f523add950
f36276b8cf7c84d5c2867f1ef2040d494bc19b2c89eb65d5fe656d24a0c254790e89896946fc3527
d186896dad4ef1c487ea16fae3b1451cc17cb62782d1b907336b3891c8cd9ac0d355223cfe638098
94e7ccf58872a27f205f5506978229937c73389b2db01582b7d05840008eccf31723ca3393fdc4b2
ef64000f0745d8999bfdbd8ac426831af6fc5a4e7010f0d715b0cae3d872676868e1a346acbfb84c
8ea87b5b2893b1e49f2fc021e832bd60ab189be19d6726fc1c427f783edeb7f1d9f8eefbcca2c467
52e2149e38a393d3a801e2690eff33d31ac04facc73f68f5460fee2cac124722b028591f440c4bff
732b33651bd0a341f2a4c5c230e328d9cae7ccfe9255cac950d1149d4ba97e61dba07fa902f8313a
8b90fce3af9ada1337d5b3529eae8b7dceb7f20f8452b0e7faf47539affa7193f435ea349661ff94
eaf0b0b6becc0b9797ce4ec2bd2230b31c2a9c679a422aab010739fa3dc5bfe11d88c88ceed0d490
ec4f1b4dda89ce9a052c13cc2c5dce25219c5c478443bb9e103ed9f00446bf4bd9e6dcfbf26cdbd4
7f6396e0be6aea76ed1e74a6b2979588d0569346ccb12cd7a4a3d12b8b3739abee8e86a99d6d91c4
472bced626a2df5de53ec8733562bf7495a733f56a6970f21789c82cf0e355ee10c8a0a10c0aa7cd
b9f8a0fe96d73022f64e317b9675406ee8172ac295f0c6a0de01d77cd61fa818036f501d85ccbd99
2a39d9290c9393caca48ad8e6631d4cdc397489e3580999222395532fecd81486c8ef21388784d75
20f3b6e3c35a156e779a95378b45d4a5d1d9f6c25d710cc3321a17e703bee8898e7aa9389aeeb090
020db94ffc450035158cc3f8e3aec38b5b7bef9eb7bf6ba36dea11e25eafbc9190d23b2911445712
af16b561f1e94488fe9b0991e06bdbc0acf3beaba0145add9b12e7744b71161e60da11dbbf5f8535
f0f78a46d705fd02c6cdf8a32d7394165c3b6287148747f67d35b795fd7b8908f9a37c098df841ba
9bd6cc411d104d4567502244929e794ba419d867ac201b4519e3cddfd6bfaf6448d63ea22fa3534e
8721847b431a0b7b2d4595d0d5795a6e5fa6b0e68a282b59f9e99daee0f5498338a8fa07b47d9b31
a0e8555315553c16adf66a5d0886e0a46309899cde4a841b9fe2ae3c7e049bb00fde4a81fd1624bf
594f4d10c35c5e97935de2de542d360cca44d50dd21b54402a5697d0e622af9aeabf809eb5a2da8f
5c19b439d18eebc9af7c876f93cd4a336a878b11ee4b520f36ff1571d10be38dfb9684233ac5f6a2
6192dddfb7b04a952c171ebc0adc6f1653fe769ec1a4a0163313405f5b6f545d42c7633943dd4e86
b35c95cfce72922616631f414d628c0ad63594d2fb50f4b1450b6ab25e62f4ea0a79dbd30785c305
18751a17ac6ea2beddb886c3bef20834ef0838bd33f826c148468be034720219a4acdbe954d264b1
e18e6ead3993c0f9e55edc2171d4ac7ae574d923f552f51d05dd6e1042e18a11bf59cc296e6f073e
d72795b84587629a62d88ff1dc2215b690656a638ecf4542325997ed83914bfa2b848b210cfb36e4
b30c1e0560b19f16b53af53f89ad2aef10f9a9d33c48d59e071419d52d29bdc74b7da2ea83218b28
c38295f2799bdc12ae69919501a382303717b9f840eadeaa68ddd76fcafa8e01f398af4616820ff2
2fd4709b0dcc123d5fd54d15fc8ef7f8a89b9334584616716e065d20236cba8ac7017ee6edf89652
a2adaf9533f3893a7bbea05db8bfd96f388fccc700a72f202218e6596c42e437db95480fed09a65c
9ca463c44f85b3db182d22e501e38298ca2f83b1e15853a69c52700cbca10ed82783fb60970f3f43
0991867027c204d350b7d9ad99047bad083f55e086a68cd604562210f82104df469d01d9fcdbb0a1
4a61dbe683babb08f7217413c7414b28d8ee9489c930ac2ef5abae354d34ad5819d67ae13085886e
ce55cc8e1dd04dc6b4b272c63a39e041998d6d0a1c9c8352280ba351790cee8ead696fa983f5c016
7d801493e1291c611b1b4a7538446109e2b0340bd6ca1f670fb1f452682cdf18e2adc474bdf94579
d091113d488ade5e093bfaa20d1ce380f19294cf55f146d7b9fafb8c59ae797938c850fa9e4f5700
56cc1dd82e00604645dbad1d598f4f5ad5df2596b1fad28e347d7c450b33870a79fdcab47a816e58
8e18fd909abb3585811b54594c1a7ab3d12012d60fa2e1779afc56d546ecd3bf24eab8bceb3bcd20
75f171ad04319a69c523a2559d724252110990703d968ea2b31b690497460b6e1abe5955af6bae73
0d8dd298112d0dba991b62bd7e71435ca142aba3b4643b937bfd5a8e83d2d41008eac06be496c15c
7cf8c088e1870c43290e53a27a3658dbb1113034f95198697b3424e207043ee4c8eed09535df3aa2
2d089180216d0084bc458106ed6392796374ef4162d75bc00fc3e4c2d7bd9e3f1db453bf0e4c5185
f9ec4e45fb3f1e3a8606c5bd690100c1f493304ef42b39afc733b1bed4aed10593c6a1eca3718e0e
251b002f4ad4b646342aba3b3d1ca5ab23f23ab63508a1acb8b5406b2b8f4d5f6b0c83041f810050
1e118bbf13bdebe280b498e9196a3fb9025c49c6e0a0c3f5f5146924b83860f44bedac0a0bfd164c
86a4ef9e2f8985f8673bde08886ea795252a4321f249644dd687a7de3cde51ebd4a9c55b99b2e9e0
5ec3bf2fb7410baa05481645c32279fabfe8c3807de150cf5ace0d4fa9d898be3211a521e64c4d19
9559c430529f84b4e8d9ab88f253994181575a11a6fd82ceeb6266e80da69ce799256057f95ed848
435ef61347c0e5b730469cac7d181c73b607c3d675e9e8297a3dd83988895b5126ba0bdfb8ce20e4
f088bdca18255de03de1cf6dac0e21ac3211abd532174aee38c937bd0dbbe5163daa9ffd355bae4a
4a653ab830cb796439d8ded2fd2e8a041eaecd5e7b1b3b7633b7098da6b1da8256a53684dce049c6
d4e048df950699d5f46a37f38c50f991022d862e02b4f12552e89625232eeb611c0326fd6a61686a
09a401bb7febb9d880f9b5305512ad961580f60e495cbdfffe29853c40a86b96c4c2369cc96404be
dd9d32b6854f89f1dac565c939cf723f2418b0173138bb2bddf27ddadb99062cc47f911cae4eee15
e34c8f6c4d212b5e56ae3f66facce2b7c68d947651139e744ee0a22863016f6d378958a784d86184
655c6a40557f48a9ae08554e4f95dd08540ad75d651c06e419b325e80b1c7bbe4ffa52804c4d0f90
7d8083dff064a9db7c43f455c223f47bc5f67485d4e634a652a13f33f52ec5f1e1e3031579444cb5
ff22f22bbdbf14712d94d26a4cfa1039b4a44faff13e39ea434597fc4854e0c41f48eae47fb642ee
8ca51004294ca44cdab853e53016bb514c0cb403414a4e0620d3465ffb8b05677de380018aa4745a
7adc59db6426e720720eab962ce0adc79f8bb45562179c113f23a9c042c5c8b60648fd116fb3538c
32db2a8132f51793db92196fd4c1cfc5f4804fa6cf8949450c088f127a4c30a6f3f76524f04354cf
9808771cdd6018e814448f75f4de6fe1a28dab785239986aafd411c479a8881df64ce6726260f613
4831c958ffd18d619666fbd17aa7b44d0dfd6dc4c9af1f5396552e4e7e075217e188e4b7b1a8f55e
a96c8937e6c687605ae97d6daf39dc0faa45f5395caa4aad194dfc319c69e7a60c0ab8a88ddf07f7
4c342d7b37689839ba0776ba5f5cb2a51d2cc8edb9502d1362f4bbbf2d40be0c11c94f5a08828f23
1ec94b8736de7ca331de7a882bd0cc544415cde74fe8f43f480f1ba16bd373417ec945be29dfe2e9
47aafb30a507d6fe29b95327cf6ee7dfc265048eda91cac8f6620b167d39efd07cb20147fa33bdaf
26d51c4ed44a6f35f43c1fc7a6be4b4921b483a7da2458e4772fee238f3390a5daa3460920d12a76
b04464f19e155182ece6e1dfcb9b35daaa0e51f603d8eb4e8f0022f4fbc918a8cfafed0ace375fae
03859509dbdfb9a26855c0978d64a859ca115b44cf171362426b96ead0e838fc208f603bfa580282
72e49ed8591794bbee94ca6d2cbab61b622f89fc012df78e2e752fc21d2b1d79d335e99a6f544fdd
dcdda5dc51545c06c9036e7419e78517b3dd0c69fc0b0cae888d22135bf6d8e57d830c409c29e6c0
bf5d6b16abbb0497e4e45c18dbce32e3d6b151096df1650bda623d40a2857bb34d2b781fda8966bb
5e888e864eb604a02ab533abc991208ef78a321d8cedb4420d369cb5c11a4411a11a2397d1737264
7ba8bd63244d03c21bbde162cce066597c08f80833545e78e57155152e6a88b59799d20725518308
aec6c586808798acc226bb24bdf3ddea2e379726c2af5d4c639c2fcac1cfe05309713da780afd5f2
a6fa4de39e678a129eef5b430df5bda05fb220bf180dd2b172af79190176fb1110cc361bcbab947c
e272e39807d4c2e01b785b99746c5924240013eb7c5b95174093b4d16b39f594da313b647b643db8
ed63124d3ec5e283ee3396e15f4de26df2ddfdd4690a9fd8833d3027c84cd6556e502252926b5cf0
1b2db066562454f7eb655f435eb6b13a57ac5df5b694ec213c4242f09eb74d9450d6345b94422d7e
531cde2ebaed05de5c659b2f5e48563b1dfcae1198e046ee3c441efd08d2dd9fbd7bb907697dcd5a
783fa87315e5e51193d42e15c09c5f63068f07313199e3b3b398b795fa78d61fd6a0ce8a1066dac3
c204011d7a0a907adcf68c909e5ce9dcd95b837da9fee0c4f1cffa19777ffbb8ce5a234cc175578d
cc9ddcfe7281aeaaddd82c25a94f626c50da1382fd768c4e5648edbe5e6e10c168d561563770ee22
1f9e37f997243d4d6524fb5e15187ee3a5503a6eaaebcec6edbfcadd897b5b5452887aa926450f74
b5f6c5bfe1ecf7b118d233686e2413873efd9c24aa7f4a88db90a3ed1946198529667355590c4d89
4405657ddaaea1028e247c42336ca81c3ff05cbf5c2bf19ff28325cc02631b02b7555cbbc9185973
bf09ba485d806acf644759dca913ddf6abc0c8c733a18ec153ba20c5b01413974e0869ec0d4fd6c4
d55e14c7976de4e731544a3ef2f77b1f6175c161fa63d06a9c35bb00fdbddf88a1ee17789f92a414
7eb08f7a55f3ff841bd71688be2f82bf9913493d04c9f888358b01365bed06eebd2a24fb86d87e3d
91c8b2dd9ddeb48726d973ce15c303c4c3d92c2762831bacd4aa3845533a7ce94539dfffb9a643c0
290edbb91c19b05e45fbe5c5b3fd0101bc00c762049db20e22e8c7f45e8945051ce5c3c5a6875641
7eb055ed9c537fa26ed8f52769aa5299781bd5cf3b0218118fb4a6917c8401e674d7d4bad6a54aee
af3c3bf98fbd15e5b15cb8a4d96ebf656ab0564cbbab6ae4a684b3caf3004567008372b981e8eb8f
b6dd07cc0c4529840f97577f90c8039694202bb9fe28133266be426fc0cdbae232e4287cef69ac68
0b9c49f4aac0718fd450fb11b6dfcfa452fef822d63849100b95695128afa85ec78bebf9853f47d9
a3f6118d5328a87b32898b99ef86dfa43958fceffdff6d211ee77d8c0cd998fc630dd96add76ee3e
df30c2e9c6d6cf0231053601c2e11f8e0dc8bce2456da886c296ce130085b234310a117fb28ad875
e7e3917b0dafb0a40ca6a269c7556ea37e11242e766bcbe54b6ec6b206ec46bb709f8b1982787862
84960e7cd9f824b72f09f04709bb13b149b872490d6cbc0334ea8525448731d86402080c9305768f
564bb47dae97f02dec6559023f714a048fca15b21c3beadab74d075b591e92d28088bef38e1d87d4
3fea5576c3345e635c725ddbd63b9b1c2e4486709342db283f87aa0a6a7bf3370835787aab32f375
1a76052a738c7d967371bb939496d52a1d854b3aad4eee1977622e4adabb32a7b439608eee818aaa
ab85fe0c1c4f35282c8ec3d002ad923b61e99c3eea0ad0715151252f938a150e3bba2802236d90de
9a4909549fba0fbadab78be297bbfaf93c92f0d0d7b1872e09ee517bf5d0af6a3395595823b2d706
88c4d7b7d297fa503014795c0a2048aee68c779f9c8c5ec6df08f4859697f5473782390328d6e35f
2bd2447f1a5379de4d3e525febac92a3884847d35bbc48ea292ab04c22b185941b5e930bd5a52dea
00662bf9c98685803fa63e7be77e0d083e4e7cfcb806078809790274d5d5b32edca42960dcdc3a27
94a9cd5b19f0fe960830bf83c528053ebe29474685a86b5030d229d9a04af18a8d2656508be13012
f688df682b4c29b672993cfc4daba4d888ba1de2db23e44fa77a38ea0f7c7fecd0be1d8267d46cfe
aadaaf4d78d84f72dacc81a1c26a36c9f5770b2e6d8e8eedc087f77ce6cd9ac22853fa670ebde72f
4feb66682cb6913be15a8e18fb04653187e3ccd1117149c96367f25ffaa36f7af111de269164c9b3
35902fa58e400b9c12d36eb24d71571ddd68c535286458c6dff81f4916504c2af1cf13100a49947e
8dbc73eeb71672be1bf0ce44327519b69255773c59005b295fbd987c440fb04ce8a9ed9cf8af8905
24070bdceefc69a3fef86dfc55966d856d1aa56e4aaaff09523f4254d928e42a8141dbd5805eb945
3742dc8ecc351fcaae0ecc06ca874634b29c6d324e4308db0eae13662d2f17f0619f44dae281a157
38b5c8c572f4d9b4420ea3fd9cff4d0bbc7b429c9c815397ece8fad7211c1122be72562085b12b8b
057f640e5f317f8ac618c77e3704b7c0956af2bc42dba88bed1d60ac0e775849e4b3511cabf82a6b
57393ce99b6c9fe1214bff03781d76d5d6a94cc786da5de3cf3906a0fc5932bbfb55efa79c03a9ad
d4ff8211886f16b6892307c8cfc6d0188a1b8af403fe8026789f48c8d687d4b6b153ced32e216091
fff173184d8d3fe2a3d3d6ead4be1f9bd1c42053d0d79d84eddecee5588db42c6d5259febe9b62da
31d67ff94c23d5aa6f58698b42c1f7cfe3b89c4a6664be7daa336c06b1079b2a612fa17e29211dab
536f59f40377f5af12545ccbb9d09690af362a7e12403a96a0141ac85f5aadaee9a02950ce55ab28
0bf7eb3285e1db09480ec37f11c455ba103ed933187ccc21b8cb9e7c1a21b3895975aaa4101a5584
ad9b15f0cdf88f2d3d73dabef80bc9034c835422c4ae221114066ac8918297255f3f39e17313e781
67a2d3ec90c56b99940c606bcdb170360a46a2cf38b507f29349924c8b18f11bb9c2d4a81398ed72
7654617746ec3bd1e1b950f203c443aecb70aa9bcf7bf556bb748aaf95d66f61dab236e5ad3e4543
68cc67fafbe1d9a11a1f6b9ef6f88b6f35ff6cc4c5a4d634b7e86ed92af2ffab35615a8748810ca9
c1841f6bac49f9875292a48926d7224024442b6dd27227c1e11d5f4b1bccfaab5f96920b48187225
2dedf580c9c6f541566b6ef4b13ccae54584a184f915b7936e8db662175d790157d918a46a252264
54700a29f7205db91bb05ebf0c0f489c03da7915c2c372a1720628c3ac64c689c92c627620350f17
0b4b4b138b81b3144f86cd262994d8b45611c5d40a679202934dafc45a18227a55ceeef58dd7253e
e3643c712ec3b91652f413d539f964015ea8852ab428dec1d8866745a6249396bf6d551bcf79b4f4
f164bad480e85c0153b2ff2b4af7d082aa693e731adf8b63424aef74e9e0a20cb6d1ed38dcfffb35
402fab1959ee9fad1ee30db79ac9788db02912a0da08847d1eacfdf9b658f44e4a2cd18f392680fa
9bef50cad600c41e0b195a8f01f40fd234a01b82f62844c75d02d196d6b5e29f236e5f44b37acdc2
7ded5c9ebfc9813c74e5933c2b939ce14966e8e30336056a5bb92371ac461611d8fb4b32d18d1b7b
ec71b45c2c8163c8c80fa5f1ec9d38b57a06220a9489e2eb23d04196ca18248b9420c06019485fae
ec17c2f739b0f496f58ecbfd3b6781f18773d2f0a3508290c49a93ef225f2bd862485e6e0a8978cf
f467c91fb50a5614be73a98f564cf434de4bbf3ca1c5e655c6c7371b31b7a5eb2e0dee67fb7558ac
e2221bdab27622f63058e4aa332931dc4f14f8adc12e832d9fe22072c8b7613f18c3010f628a37bc
631ba9d94cd26481d1eb5ba66db1931f5b40d128c829cc3e7bffa0d2ee283dc24f49168438f28434
39a00fd1603a2e5bd0c45cb11cb40185bd62282360c7b9e34984704bd780afd3f7a453564fabf99c
0502ad7a5e932c54be52b3856040ff4de4ac24519267371794e038dcce3ccfc32fc8de6e1895b841
36cadebfd47addba51825889186c2175b97bf01d78f2fba35e09228f70bca86bbf3efeabe4522d0e
12aec7f6acf1b2f22ac67e5c4529dd8db1fbf6fd481975e5ba06b42d6a88de79808d787f9dbe4735
64db5136a61394454e78d42f93526a5099b0a78e5d552d6d6a73200fedada4697b5aebc450559138
87d4e4b866ffaea8f0a6b10434620bfe78b495695c3a2d7f84f13c6fc125bb1edf8df9a0d628d8fe
e3df929a51e3718e5d8c1b927632209cb9f5c4a71ceaec68c5057799733069b0e8ad87224ad700a3
a3d38f7280f55bfd0d5da77ab012a5771e2f3eb1b607c133920da88a530e52c230119c6b99506531
0ea34e3933592048f4cd941b5f2e9a48d1579e46ef2c87d39394449680c4d3c8d5bf031705a9463f
429c61368074a8575635655c4c62337211220606ee9007cb1006874d314684197aa1039fed33bd24
dbeece0d85bf5521e9d889f58dceb7c13a0306800f08395a60ce6b22c868c2ab5bf36337b92bc65b
9bd1f07adf93434f89f38a0c95e599eca22e7aa967381d85c417541d17c6de3fb150ad1fc9fda498
8655bf19d145d673b2c0521e55f953fc8a6c87d8707bb84984d9f47fad6b4a10c8ab2c140322929e
1dd68792706de4c25e82793b50cd39940109c3a8b7845899ff93751acd8861c5f0025f1060795b7c
09ae8a2ebf338441bc72dcba4f9a1c05cfba5e4e0235ec13b4a067e3a55c8ce08fb74e2836c64a5a
3baaf65a6fed22fad38862debdaeb25eb97c1e7f0dbeaf41c9dc19619610288337e81ead4363bd47
54d996790e6857363f8d2d1d991537d20fbebf0f019fa648e269e69b6ad21a20fe1cd5d4f5928652
17fab0d89b47212413b448a556dd316d81fd8627c133b559a41d847ca9114449a628b19899bb6e1a
63ef6eed1dabe140dae63541651dd13bc68b23938db320b7f4b42635f9d5a674330d67a2b93932b6
85af8aa8fdfd8f983d018633ec877c4fbcdbeaa8b5c885dee2390679b77e8244a2f251f4968bd5bc
3b58306753e809a440fd50ffd965ccd16536a3404c67a887bef49c2ecdd6e056faaae5170d716b
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
 HBW_SetTarget_XZ <Virtual>  0
 PID_10 PID  0
 VGR_Movement TASK  0 -1
 SSC_Check_InOut <Virtual>  0
 PID_11 PID  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 V801 MHR799 1 0x0 C797 MC397 1 0x0 MC250 C799 1 0x0 MHR420 V820 1"

// Rung VGR_Copy_State#2
// Offset 43
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 C810 MC502 1 0x0 C811 MC503 1 0x0 Y16 MC500 1 0x0 Y43 MC501 1 0x0 MHR800 D1600 1 0x0 MHR801 D1601 1 0x0 X24 MC504 1 0x0 X14 MC505 1"

// Rung MPO_Copy_State#2
// Offset 41
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 MC808 C1621 1 0x0 C1621 MI808 1 0x0 C1633 MI818 1"

// Rung SLD_Copy_State#2
// Offset 29
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 C1200 MI600 1 0x0 C1201 MI601 1 0x0 MC600 C1202 1 0x0 MHR1200 V2400 1 0x0 MHR1201 V2401 1 0x0 MC601 C1500 1 0x0 MHR1202 V2402 1 0x0 MHR1203 V2403 1 0x0 MHR1204 V2404 1 0x0 MHR1205 V2405 1"

// Rung SSC_Copy_State#2
// Offset 25
NOP

// Rung SSC_Copy_State#3
// Offset 26
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_SetTarget_XZ
$LGCMOD HBW_SetTarget_XZ

// Rung HBW_SetTarget_XZ#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5280 V140
POPBOOL
ANDE V105 3
MOVE 2990 V140

// Rung HBW_SetTarget_XZ#2
// Offset 23
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
ANDE V106 3
MOVE 3240 V142

// Rung HBW_SetTarget_XZ#3
// Offset 46
RET

// End of Code Block HBW_SetTarget_XZ
$LGCEND HBW_SetTarget_XZ

// Beginning of Code Block SSC_Check_InOut
$LGCMOD SSC_Check_InOut

// Rung SSC_Check_InOut#1
// Offset 0
STRN X42
OUT C1200

// Rung SSC_Check_InOut#2
// Offset 2
STRN X43
OUT C1201

// Rung SSC_Check_InOut#3
// Offset 4
RET

// End of Code Block SSC_Check_InOut
$LGCEND SSC_Check_InOut

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE $HBW_Encoder_X.Acc D140
MOVE $HBW_Encoder_Z.Acc D142

// Rung HBW_Move_XZ#5
// Offset 19
NOP

// Rung HBW_Move_XZ#6
// Offset 20
#BEGIN FMT_COMMENT 
"Loop Start"
#END

REPEAT

// Rung HBW_Move_XZ#7
// Offset 21
#BEGIN FMT_COMMENT 
"Enable/Disable PID control<br>"
"Set this to ST2 to disable PID for XZ<br> <br>"
"When PID is disabled V118 & V120 are used for PWM %25"
#END

STR ST2
OUT C90

// Rung HBW_Move_XZ#8
// Offset 23
#BEGIN FMT_COMMENT 
"Set XY direction<br>"
"Based on starting position compared to target<br>Needs to "
"be inside loop to keep outputs active"
#END

STR ST1
DUPBOOL
ANDLT D140 V140
OUT C51
POPBOOL
ANDLE D142 V142
OUT C52

// Rung HBW_Move_XZ#9
// Offset 36
#BEGIN FMT_COMMENT 
"PID Controller for X<br>& PID constants"
#END

STR C90
PID PID_10 0x60 $HBW_Encoder_X.Acc 0 8200 0.0 8200 """""" 20 100 WY0 DST511
PIDINIT PID_10 1000 0.01 0.01 0
MOVE V140 PID_10.SP
NOT
MOVE V118 PID_10.Output

// Rung HBW_Move_XZ#10
// Offset 61
#BEGIN FMT_COMMENT 
"PID Update current X value"
#END

STR ST1
MOVE $HBW_Encoder_X.Acc PID_10.PV

// Rung HBW_Move_XZ#11
// Offset 64
#BEGIN FMT_COMMENT 
"PID Controller for Z<br>& PID constants"
#END

STR C90
PID PID_11 0x40 DST511 DST511 DST511 DST511 DST511 """""" 35 100 WY1 DST511
PIDINIT PID_11 1000 0.01 0.01 0
NOT
MOVE V120 PID_11.Output

// Rung HBW_Move_XZ#12
// Offset 80
#BEGIN FMT_COMMENT 
"PID Update current Z value"
#END

STR ST1
MOVE $HBW_Encoder_Z.Acc PID_11.PV

// Rung HBW_Move_XZ#13
// Offset 83
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 88

// Rung HBW_Move_XZ#14
// Offset 98
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE $HBW_Encoder_X.Acc V140
OUT Y50

// Rung HBW_Move_XZ#15
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE $HBW_Encoder_X.Acc V140
OUT Y51

// Rung HBW_Move_XZ#16
// Offset 110
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 WY1

// Rung HBW_Move_XZ#17
// Offset 125
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Move_XZ#18
// Offset 131
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Move_XZ#19
// Offset 137
STR ST1
STR C51
ANDGE $HBW_Encoder_X.Acc V140
STRN C51
ANDLE $HBW_Encoder_X.Acc V140
ORSTR
ANDSTR
ANDN C150
STR C52
ANDGE $HBW_Encoder_Z.Acc V142
STRN C52
ANDLE $HBW_Encoder_Z.Acc V142
ORSTR
ANDSTR
OUT C150

// Rung HBW_Move_XZ#20
// Offset 164
#BEGIN FMT_COMMENT 
"Loop End"
#END

UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Test slot X & Y target value for out of range<br>"
"if X value greater than 4, fault code 105<br>"
"if Y value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#9
// Offset 38
#BEGIN FMT_COMMENT 
"Task Send<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if conveyor light barriers broken suggesting a pallot "
"is still there."
#END

STR C101
ANDN C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
AND X1
AND X2
JMP HBW_Program.S7
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
STRN X1
ORN X2
ANDSTR
JMP HBW_Program.S2
MOVE 107 V181

// Rung HBW_Program#10
// Offset 73
#BEGIN FMT_COMMENT 
"Task Recieve<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if outer conveyor light barrier no broken suggesting "
"no pallot is there."
#END

STR C102
ANDN C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
ANDN X2
JMP HBW_Program.S13
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
AND X2
JMP HBW_Program.S2
MOVE 108 V181

// Rung HBW_Program#11
// Offset 105
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#12
// Offset 107
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#13
// Offset 109
#BEGIN FMT_COMMENT 
"Task Send - Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 111
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#15
// Offset 114
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"

// Rung HBW_Program#16
// Offset 123
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1
OUT C12

// Rung HBW_Program#17
// Offset 129
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
AND C12
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 133
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 136
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 138
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 140
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 143
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 149
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 152
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 154
#BEGIN FMT_COMMENT 
"Task Send - Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 156
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 159
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 164
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 169
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 172
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 175
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 177
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 179
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 182
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 188
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 191
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 193
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 195
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 198
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 214
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 3000 C80

// Rung HBW_Program#41
// Offset 218
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#42
// Offset 222
NOP

// Rung HBW_Program#43
// Offset 223
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 225
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 227
#BEGIN FMT_COMMENT 
"Reserved Stage<br>"
"Just incase I need an extra stage for Task Send"
#END

SG HBW_Program.S12

// Rung HBW_Program#46
// Offset 229
#BEGIN FMT_COMMENT 
"Fault<br>Should never hit this reserve stage"
#END

STR ST1
JMP HBW_Program.S2

// Rung HBW_Program#47
// Offset 231
#BEGIN FMT_COMMENT 
"Task Receive - Conveyor In<br>& Move XZ to Conveyor"
#END

SG HBW_Program.S13

// Rung HBW_Program#48
// Offset 233
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 10 V131

// Rung HBW_Program#49
// Offset 236
#BEGIN FMT_COMMENT 
"Conveyor Out In"
#END

STR X1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 45
OUT Y49

// Rung HBW_Program#50
// Offset 252
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x1 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
AND X1
ONDTMR T4 3000 C80

// Rung HBW_Program#51
// Offset 257
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#52
// Offset 261
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2750 V142

// Rung HBW_Program#53
// Offset 266
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#54
// Offset 271
#BEGIN FMT_COMMENT 
"Movements completed<br>"
"Conveyor inner beam broken and XZ move complete"
#END

STR HBW_Move_XZ.Done
ANDN X1
JMP HBW_Program.S14
HALT HBW_Move_XZ

// Rung HBW_Program#55
// Offset 275
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#56
// Offset 278
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 280
#BEGIN FMT_COMMENT 
"Task Receive - Pick"
#END

SG HBW_Program.S14

// Rung HBW_Program#58
// Offset 282
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#59
// Offset 285
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#60
// Offset 291
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S15

// Rung HBW_Program#61
// Offset 294
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#62
// Offset 296
#BEGIN FMT_COMMENT 
"Task Receive - Move to Storage"
#END

SG HBW_Program.S15

// Rung HBW_Program#63
// Offset 298
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#64
// Offset 301
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"
OUT C12

// Rung HBW_Program#65
// Offset 311
#BEGIN FMT_COMMENT 
"Math calculate Y target for placement"
#END

STRPD C12
MATH V142 "V142 - 100"

// Rung HBW_Program#66
// Offset 321
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#67
// Offset 326
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S16
HALT HBW_Move_XZ

// Rung HBW_Program#68
// Offset 329
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#69
// Offset 332
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#70
// Offset 334
#BEGIN FMT_COMMENT 
"Task Receive - Place<br>Place onto storage shelf"
#END

SG HBW_Program.S16

// Rung HBW_Program#71
// Offset 336
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#72
// Offset 339
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#73
// Offset 345
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S17

// Rung HBW_Program#74
// Offset 348
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#75
// Offset 350
#BEGIN FMT_COMMENT 
"Task Receive - Move to Idle"
#END

SG HBW_Program.S17

// Rung HBW_Program#76
// Offset 352
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#77
// Offset 355
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 4300 V140
MOVE 1400 V142

// Rung HBW_Program#78
// Offset 360
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#79
// Offset 365
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S1
HALT HBW_Move_XZ

// Rung HBW_Program#80
// Offset 368
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#81
// Offset 371
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#82
// Offset 373
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#83
// Offset 375
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#84
// Offset 377
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#85
// Offset 380
#BEGIN FMT_COMMENT 
"Force Ready<br>Jump to ready state without resetting<br>"
"Reset Fault code"
#END

STR ST1
MOVE MC105 C105
AND C105
JMP HBW_Program.S1
MOVE 0 V181

// Rung HBW_Program#86
// Offset 387
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#87
// Offset 389
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#88
// Offset 391
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#89
// Offset 394
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#90
// Offset 409
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
ANDLE $HBW_Encoder_X.Acc 8050
OUT Y50

// Rung HBW_Program#91
// Offset 415
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#92
// Offset 418
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#93
// Offset 433
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#94
// Offset 436
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#95
// Offset 439
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#96
// Offset 454
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#97
// Offset 457
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
ANDLE $HBW_Encoder_Z.Acc 3500
OUT Y4

// Rung HBW_Program#98
// Offset 463
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#99
// Offset 478
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#100
// Offset 480
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#101
// Offset 482
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#102
// Offset 484
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#103
// Offset 486
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#104
// Offset 488
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#105
// Offset 491
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#106
// Offset 494
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 40 MHR120 1"

// Rung HBW_Program#107
// Offset 510
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick
HALT HBW_Place

// Rung HBW_Program#108
// Offset 514
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#109
// Offset 531
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 100
OUT Y7

// Rung HBW_Program#110
// Offset 547
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#111
// Offset 564
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#112
// Offset 580
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#113
// Offset 584
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#114
// Offset 586
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#115
// Offset 589
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#116
// Offset 593
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#117
// Offset 596
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"Reset Stage"
#END

SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Reset VGR Fault Code"
#END

STR ST1
MOVE 0 V801

// Rung VGR_Program#7
// Offset 25
#BEGIN FMT_COMMENT 
"Stop VGR Movement Task"
#END

STR ST1
HALT VGR_Movement

// Rung VGR_Program#8
// Offset 27
STR ST1
COPY 0x0 "4 0x0 0 N810 1 0x0 0 N811 1 0x0 0 N812 1"

// Rung VGR_Program#9
// Offset 39
STR ST1
OUT Y28

// Rung VGR_Program#10
// Offset 41
STR ST1
RST Y29

// Rung VGR_Program#11
// Offset 43
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
AND X26
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100
OUT Y26

// Rung VGR_Program#12
// Offset 61
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
AND X25
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100
OUT Y24

// Rung VGR_Program#13
// Offset 79
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100
OUT Y22

// Rung VGR_Program#14
// Offset 96
STR X25
AND X26
AND X27
ONDTMR T54 100 C798

// Rung VGR_Program#15
// Offset 102
STR C798
OUT $VGR_Encoder_Rot.ResetEdge
OUT $VGR_Encoder_X.ResetEdge
OUT $VGR_Encoder_Y.ResetEdge

// Rung VGR_Program#16
// Offset 106
STR C798
JMP VGR_Program.S2

// Rung VGR_Program#17
// Offset 108
#BEGIN FMT_COMMENT 
"Ready State"
#END

SG VGR_Program.S2

// Rung VGR_Program#18
// Offset 110
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 118
STR ST1
OUT C797

// Rung VGR_Program#20
// Offset 120
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 122
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#22
// Offset 124
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S8

// Rung VGR_Program#23
// Offset 126
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S13

// Rung VGR_Program#24
// Offset 128
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S22

// Rung VGR_Program#25
// Offset 130
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S20

// Rung VGR_Program#26
// Offset 132
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

SG VGR_Program.S3

// Rung VGR_Program#27
// Offset 134
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#28
// Offset 142
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 5360 N810

// Rung VGR_Program#29
// Offset 145
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 800 N811

// Rung VGR_Program#30
// Offset 148
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 620 N812

// Rung VGR_Program#31
// Offset 151
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C414

// Rung VGR_Program#32
// Offset 157
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
AND C414
JMP VGR_Program.S4
HALT VGR_Movement

// Rung VGR_Program#33
// Offset 161
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#34
// Offset 165
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#35
// Offset 167
#BEGIN FMT_COMMENT 
"Pick up disk from HBW"
#END

SG VGR_Program.S4

// Rung VGR_Program#36
// Offset 169
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#37
// Offset 177
STR ST1
SET Y28

// Rung VGR_Program#38
// Offset 179
STR Y28
SET Y29

// Rung VGR_Program#39
// Offset 181
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#40
// Offset 196
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 199
STR X25
JMP VGR_Program.S5

// Rung VGR_Program#42
// Offset 201
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#43
// Offset 203
#BEGIN FMT_COMMENT 
"Move crane from HBW to MPO"
#END

SG VGR_Program.S5

// Rung VGR_Program#44
// Offset 205
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#45
// Offset 213
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 3550 N810

// Rung VGR_Program#46
// Offset 216
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 800 N811

// Rung VGR_Program#47
// Offset 219
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#48
// Offset 222
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C415

// Rung VGR_Program#49
// Offset 228
STR VGR_Movement.DoneThisScan
AND C415
JMP VGR_Program.S10
HALT VGR_Movement

// Rung VGR_Program#50
// Offset 232
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#51
// Offset 236
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#52
// Offset 238
#BEGIN FMT_COMMENT 
"Assign new values for next VGR location"
#END

SG VGR_Program.S10

// Rung VGR_Program#53
// Offset 240
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#54
// Offset 248
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 3528 N810

// Rung VGR_Program#55
// Offset 251
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 3400 N811

// Rung VGR_Program#56
// Offset 254
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 2000 N812

// Rung VGR_Program#57
// Offset 257
STR ST1
TMR T51 100

// Rung VGR_Program#58
// Offset 260
STR T51.Done
JMP VGR_Program.S6

// Rung VGR_Program#59
// Offset 262
#BEGIN FMT_COMMENT 
"Position Crane to drop disk onto MPO"
#END

SG VGR_Program.S6

// Rung VGR_Program#60
// Offset 264
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#61
// Offset 272
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C416

// Rung VGR_Program#62
// Offset 278
STR VGR_Movement.DoneThisScan
AND C416
JMP VGR_Program.S7
HALT VGR_Movement

// Rung VGR_Program#63
// Offset 282
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#64
// Offset 286
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#65
// Offset 288
#BEGIN FMT_COMMENT 
"Release vacuum and turn off compressor"
#END

SG VGR_Program.S7

// Rung VGR_Program#66
// Offset 290
STR ST1
RST Y29

// Rung VGR_Program#67
// Offset 292
STR ST1
ONDTMR T53 100 C416

// Rung VGR_Program#68
// Offset 296
STR C416
RST Y28

// Rung VGR_Program#69
// Offset 298
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C416
JMP VGR_Program.S1

// Rung VGR_Program#70
// Offset 300
#BEGIN FMT_COMMENT 
"VGR.T2 - Move Disk from SLD to Loading Bay"
#END

SG VGR_Program.S8

// Rung VGR_Program#71
// Offset 302
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#72
// Offset 310
#BEGIN FMT_COMMENT 
"Get assign location values based on color input as number"
#END

STR ST1
RANGECHECK V820 0x0 3 1 C555

// Rung VGR_Program#73
// Offset 315
#BEGIN FMT_COMMENT 
"If N820 == 0, no color passed, enter fault"
#END

STR C555
JMP VGR_Program.S30
MOVE 4 V801

// Rung VGR_Program#74
// Offset 319
#BEGIN FMT_COMMENT 
"If N820 == 1, White disk needs to be picked up<br>"
#END

STRE V820 1
COPY 0x1 "4 0x0 1790 N810 1 0x0 1485 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#75
// Offset 333
#BEGIN FMT_COMMENT 
"If N820 == 2, Red disk needs to be picked up"
#END

STRE V820 2
COPY 0x1 "4 0x0 1470 N810 1 0x0 1715 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#76
// Offset 347
#BEGIN FMT_COMMENT 
"If N820 == 3, Blue disk needs to be picked up"
#END

STRE V820 3
COPY 0x1 "4 0x0 1205 N810 1 0x0 2315 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#77
// Offset 361
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#78
// Offset 366
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
JMP VGR_Program.S9
HALT VGR_Movement

// Rung VGR_Program#79
// Offset 369
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#80
// Offset 373
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#81
// Offset 375
#BEGIN FMT_COMMENT 
"Vacuum on to pick up disk at SLD"
#END

SG VGR_Program.S9

// Rung VGR_Program#82
// Offset 377
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#83
// Offset 385
STR ST1
SET Y28

// Rung VGR_Program#84
// Offset 387
STR Y28
SET Y29

// Rung VGR_Program#85
// Offset 389
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#86
// Offset 404
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#87
// Offset 407
STR X25
JMP VGR_Program.S11

// Rung VGR_Program#88
// Offset 409
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#89
// Offset 411
#BEGIN FMT_COMMENT 
"Move VGR from SLD to Loading Bay"
#END

SG VGR_Program.S11

// Rung VGR_Program#90
// Offset 413
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#91
// Offset 421
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 990 N810

// Rung VGR_Program#92
// Offset 424
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 2275 N811

// Rung VGR_Program#93
// Offset 427
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#94
// Offset 430
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C423

// Rung VGR_Program#95
// Offset 436
STR VGR_Movement.DoneThisScan
AND C423
JMP VGR_Program.S17
HALT VGR_Movement

// Rung VGR_Program#96
// Offset 440
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#97
// Offset 444
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#98
// Offset 446
#BEGIN FMT_COMMENT 
"Assign new Values for next VGR location"
#END

SG VGR_Program.S17

// Rung VGR_Program#99
// Offset 448
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#100
// Offset 456
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 990 N810

// Rung VGR_Program#101
// Offset 459
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 2275 N811

// Rung VGR_Program#102
// Offset 462
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 1650 N812

// Rung VGR_Program#103
// Offset 465
#BEGIN FMT_COMMENT 
"Delay to reset Done for VGR_Movement"
#END

STR ST1
TMR T52 100

// Rung VGR_Program#104
// Offset 468
STR T52.Done
JMP VGR_Program.S18

// Rung VGR_Program#105
// Offset 470
#BEGIN FMT_COMMENT 
"Position Crane to drop disk into Loading Bay"
#END

SG VGR_Program.S18

// Rung VGR_Program#106
// Offset 472
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#107
// Offset 480
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#108
// Offset 488
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C424

// Rung VGR_Program#109
// Offset 494
STR VGR_Movement.DoneThisScan
AND C424
JMP VGR_Program.S12
HALT VGR_Movement

// Rung VGR_Program#110
// Offset 498
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#111
// Offset 502
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#112
// Offset 504
#BEGIN FMT_COMMENT 
"Release vacuum and drop disk"
#END

SG VGR_Program.S12

// Rung VGR_Program#113
// Offset 506
STR ST1
RST Y29

// Rung VGR_Program#114
// Offset 508
STR ST1
ONDTMR T54 100 C418

// Rung VGR_Program#115
// Offset 512
STR C418
RST Y28

// Rung VGR_Program#116
// Offset 514
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C418
JMP VGR_Program.S1

// Rung VGR_Program#117
// Offset 516
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

SG VGR_Program.S13

// Rung VGR_Program#118
// Offset 518
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#119
// Offset 526
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 40 N810

// Rung VGR_Program#120
// Offset 529
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 140 N811

// Rung VGR_Program#121
// Offset 532
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 3085 N812

// Rung VGR_Program#122
// Offset 535
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C419

// Rung VGR_Program#123
// Offset 541
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
AND C419
JMP VGR_Program.S14
HALT VGR_Movement

// Rung VGR_Program#124
// Offset 545
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#125
// Offset 549
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#126
// Offset 551
#BEGIN FMT_COMMENT 
"Vacuum on to pick up disk at Loading Bay"
#END

SG VGR_Program.S14

// Rung VGR_Program#127
// Offset 553
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#128
// Offset 561
STR ST1
SET Y28

// Rung VGR_Program#129
// Offset 563
STR Y28
SET Y29

// Rung VGR_Program#130
// Offset 565
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#131
// Offset 580
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#132
// Offset 583
STR X25
JMP VGR_Program.S15

// Rung VGR_Program#133
// Offset 585
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#134
// Offset 587
#BEGIN FMT_COMMENT 
"Move Crane from Loading Bay to HBW"
#END

SG VGR_Program.S15

// Rung VGR_Program#135
// Offset 589
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#136
// Offset 597
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 5395 N810

// Rung VGR_Program#137
// Offset 600
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 763 N811

// Rung VGR_Program#138
// Offset 603
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#139
// Offset 606
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C421

// Rung VGR_Program#140
// Offset 612
STR VGR_Movement.DoneThisScan
AND C421
JMP VGR_Program.S19
HALT VGR_Movement

// Rung VGR_Program#141
// Offset 616
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#142
// Offset 620
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#143
// Offset 622
SG VGR_Program.S19

// Rung VGR_Program#144
// Offset 624
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#145
// Offset 632
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 5405 N810

// Rung VGR_Program#146
// Offset 635
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 763 N811

// Rung VGR_Program#147
// Offset 638
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 685 N812

// Rung VGR_Program#148
// Offset 641
#BEGIN FMT_COMMENT 
"Delay to reset Done for VGR_Movement"
#END

STR ST1
TMR T56 100

// Rung VGR_Program#149
// Offset 644
STR T56.Done
JMP VGR_Program.S21

// Rung VGR_Program#150
// Offset 646
SG VGR_Program.S21

// Rung VGR_Program#151
// Offset 648
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#152
// Offset 656
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#153
// Offset 664
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C426

// Rung VGR_Program#154
// Offset 670
STR VGR_Movement.DoneThisScan
AND C426
JMP VGR_Program.S16
HALT VGR_Movement

// Rung VGR_Program#155
// Offset 674
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#156
// Offset 678
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#157
// Offset 680
#BEGIN FMT_COMMENT 
"Release Vacuum, Drop Disk"
#END

SG VGR_Program.S16

// Rung VGR_Program#158
// Offset 682
STR ST1
RST Y29

// Rung VGR_Program#159
// Offset 684
STR ST1
ONDTMR T55 100 C422

// Rung VGR_Program#160
// Offset 688
STR C422
RST Y28

// Rung VGR_Program#161
// Offset 690
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C422
JMP VGR_Program.S1

// Rung VGR_Program#162
// Offset 692
#BEGIN FMT_COMMENT 
"VGR.T4 - Move Disk from Loading Bay to Shipping Truck"
#END

SG VGR_Program.S22

// Rung VGR_Program#163
// Offset 694
STR ST1
JMP VGR_Program.S2

// Rung VGR_Program#164
// Offset 696
#BEGIN FMT_COMMENT 
"Manual Control"
#END

SG VGR_Program.S20

// Rung VGR_Program#165
// Offset 698
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#166
// Offset 706
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100

// Rung VGR_Program#167
// Offset 721
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#168
// Offset 724
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#169
// Offset 726
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100

// Rung VGR_Program#170
// Offset 741
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#171
// Offset 743
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#172
// Offset 746
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#173
// Offset 761
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#174
// Offset 763
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#175
// Offset 766
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#176
// Offset 768
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#177
// Offset 770
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#178
// Offset 772
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#179
// Offset 774
STRN C500
JMP VGR_Program.S1

// Rung VGR_Program#180
// Offset 776
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG VGR_Program.S30

// Rung VGR_Program#181
// Offset 778
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#182
// Offset 786
STR ST1
HALT VGR_Movement

// Rung VGR_Program#183
// Offset 788
STR C799
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
#BEGIN FMT_COMMENT 
"If we are not outside the oven, turn on the compressor"
#END

STRN X18
OUT Y17

// Rung MPO_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"If the compressor is on, open the door"
#END

STR Y17
OUT Y20

// Rung MPO_Program#5
// Offset 14
STR Y20
OUT Y52

// Rung MPO_Program#6
// Offset 16
#BEGIN FMT_COMMENT 
"If the crane is not at turntable position, move towards it"
#END

STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#7
// Offset 32
#BEGIN FMT_COMMENT 
"Turn off the conveyor belt when reseting"
#END

STR ST1
RST Y47

// Rung MPO_Program#8
// Offset 34
#BEGIN FMT_COMMENT 
"Reset our bit that said its detected something"
#END

STR ST1
RST C1000

// Rung MPO_Program#9
// Offset 36
STR ST1
RST Y18

// Rung MPO_Program#10
// Offset 38
#BEGIN FMT_COMMENT 
"Reset end of coveryor belt detection bit"
#END

STR ST1
RST C1001

// Rung MPO_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Reset the turntable plunger"
#END

STR ST1
RST Y21

// Rung MPO_Program#12
// Offset 42
#BEGIN FMT_COMMENT 
"Reset turntable to crane position"
#END

STRN X12
OUT Y46

// Rung MPO_Program#13
// Offset 44
#BEGIN FMT_COMMENT 
"Jump to manual control mode"
#END

STR C801
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 46
#BEGIN FMT_COMMENT 
"Make sure the crane is at the turntable, the turntable is "
"facing the crane, we are not wanting to control manually, "
"and the loading tray is outside the oven before beginning "
"stage 1"
#END

STR X16
AND X12
ANDN C801
AND X18
ANDN C802
JMP MPO_Program.S1

// Rung MPO_Program#15
// Offset 52
SG MPO_Program.S1

// Rung MPO_Program#16
// Offset 54
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#17
// Offset 62
#BEGIN FMT_COMMENT 
"If our oven timer is less than 100, fault out"
#END

STRLE D1600 100
JMP MPO_Program.S8

// Rung MPO_Program#18
// Offset 67
#BEGIN FMT_COMMENT 
"If our saw timer is less than 100, fault out"
#END

STRLE D1601 100
JMP MPO_Program.S8

// Rung MPO_Program#19
// Offset 72
#BEGIN FMT_COMMENT 
"C810 is the ready status bit"
#END

STR ST1
ANDN Y17
ANDN Y16
OUT C810

// Rung MPO_Program#20
// Offset 76
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#21
// Offset 79
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#22
// Offset 83
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#23
// Offset 86
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
OUT Y44

// Rung MPO_Program#24
// Offset 89
STR Y20
AND X17
RST Y20

// Rung MPO_Program#25
// Offset 92
#BEGIN FMT_COMMENT 
"Once inside, turn off the compressor, which will shut the door"
#END

STRND Y20
AND X17
RST Y17

// Rung MPO_Program#26
// Offset 96
#BEGIN FMT_COMMENT 
"Once inside and door is closed turn on oven"
#END

STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#27
// Offset 102
#BEGIN FMT_COMMENT 
"When done timing move to next stage"
#END

STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#28
// Offset 106
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#29
// Offset 108
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#30
// Offset 110
SG MPO_Program.S2

// Rung MPO_Program#31
// Offset 112
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#32
// Offset 120
#BEGIN FMT_COMMENT 
"If we are inside the oven, turn on the compressor"
#END

STR X17
SET Y17

// Rung MPO_Program#33
// Offset 122
#BEGIN FMT_COMMENT 
"If we are inside the oven and the door is not open, then "
"open the door"
#END

STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#34
// Offset 125
#BEGIN FMT_COMMENT 
"If the door is open and we are not outside of the oven, "
"then move the tray out."
#END

STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#35
// Offset 128
STR X18
RST Y17

// Rung MPO_Program#36
// Offset 130
STR X18
RST Y20

// Rung MPO_Program#37
// Offset 132
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#38
// Offset 134
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#39
// Offset 136
SG MPO_Program.S3

// Rung MPO_Program#40
// Offset 138
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#41
// Offset 146
STRN X19
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#42
// Offset 163
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#43
// Offset 166
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#44
// Offset 171
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#45
// Offset 177
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#46
// Offset 181
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#47
// Offset 183
SG MPO_Program.S4

// Rung MPO_Program#48
// Offset 185
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#49
// Offset 193
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#50
// Offset 210
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#51
// Offset 215
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#52
// Offset 221
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#53
// Offset 225
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 227
SG MPO_Program.S5

// Rung MPO_Program#55
// Offset 229
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 237
#BEGIN FMT_COMMENT 
"Turn turntable until at position to saw"
#END

STRN X15
OUT Y45

// Rung MPO_Program#57
// Offset 239
#BEGIN FMT_COMMENT 
"Once you reach saw position, activate the saw"
#END

STRPD X15
OFFDTMR T103 D1601 Y43

// Rung MPO_Program#58
// Offset 244
#BEGIN FMT_COMMENT 
"Once done sawing, move to the next stage"
#END

STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#59
// Offset 249
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#60
// Offset 251
SG MPO_Program.S6

// Rung MPO_Program#61
// Offset 253
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#62
// Offset 261
#BEGIN FMT_COMMENT 
"Keep rotating until we are at plunger position"
#END

STRN X13
OUT Y45

// Rung MPO_Program#63
// Offset 263
STRPD X13
SET Y18

// Rung MPO_Program#64
// Offset 266
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#65
// Offset 271
STRPD X13
OFFDTMR T104 3000 Y47

// Rung MPO_Program#66
// Offset 276
#BEGIN FMT_COMMENT 
"If the light barrier gets broken, set c1001 true"
#END

STRN X14
SET C1001

// Rung MPO_Program#67
// Offset 278
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#68
// Offset 280
STRND T104.Timing
AND C1001
JMP MPO_Program.S0

// Rung MPO_Program#69
// Offset 284
STRND T104.Timing
ANDN C1001
JMP MPO_Program.S8

// Rung MPO_Program#70
// Offset 288
SG MPO_Program.S7

// Rung MPO_Program#71
// Offset 290
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#72
// Offset 298
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#73
// Offset 303
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#74
// Offset 308
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#75
// Offset 313
#BEGIN FMT_COMMENT 
"Manually move crane towards oven"
#END

STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#76
// Offset 330
#BEGIN FMT_COMMENT 
"Manually move crane to turn table"
#END

STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#77
// Offset 347
STRN C801
JMP MPO_Program.S0

// Rung MPO_Program#78
// Offset 349
SG MPO_Program.S8

// Rung MPO_Program#79
// Offset 351
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#80
// Offset 359
#BEGIN FMT_COMMENT 
"Turn on flashing red light"
#END

STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#81
// Offset 364
STR ST1
OUT C811

// Rung MPO_Program#82
// Offset 366
#BEGIN FMT_COMMENT 
"If Reset Button (C802) is pressed and both the oven timer "
"and saw timer are over 100ms go back to stage 0"
#END

STR C802
ANDGE D1600 100
ANDGE D1601 100
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STR C1610
COPY 0x1 "4 0x0 1 C1621 1"

// Rung SLD_Program#8
// Offset 32
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STR C1610
JMP SLD_Program.S2

// Rung SLD_Program#9
// Offset 34
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 36
SG SLD_Program.S10

// Rung SLD_Program#11
// Offset 38
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 46
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#13
// Offset 48
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#14
// Offset 50
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#15
// Offset 52
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#16
// Offset 54
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#17
// Offset 56
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#18
// Offset 61
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#19
// Offset 63
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#20
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#21
// Offset 67
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#22
// Offset 75
#BEGIN FMT_COMMENT 
"Start timer for start fault. If light barrier isn't broken "
"by timer end, FAULT."
#END

STR ST1
ONDTMR T212 2000 C1632

// Rung SLD_Program#23
// Offset 79
#BEGIN FMT_COMMENT 
"While bit is on, if light barrier isn't triggered, FAULT."
#END

STR C1632
AND X35
OUT C1633

// Rung SLD_Program#24
// Offset 82
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#25
// Offset 88
STR ST1
COPY 0x1 "4 0x0 26000 V3205 1"

// Rung SLD_Program#26
// Offset 95
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T200.Timing
JMP SLD_Program.S3

// Rung SLD_Program#27
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#28
// Offset 100
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#29
// Offset 108
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#30
// Offset 113
#BEGIN FMT_COMMENT 
"Checks for lowest color value in color sensor."
#END

STRLE V3200 V3205
COPY 0x1 "4 0x0 V3200 V3205 1"

// Rung SLD_Program#31
// Offset 123
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3205 0x1 10000 6000 C1602

// Rung SLD_Program#32
// Offset 128
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#33
// Offset 130
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3205 0x1 20000 18000 C1619

// Rung SLD_Program#34
// Offset 135
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#35
// Offset 137
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3205 0x1 24500 21000 C1620

// Rung SLD_Program#36
// Offset 142
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#37
// Offset 144
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 4, jump to S4."
#END

STR C1602
ANDLT V3202 4
JMP SLD_Program.S4

// Rung SLD_Program#38
// Offset 150
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 4, jump to S5."
#END

STR C1619
ANDLT V3203 4
JMP SLD_Program.S5

// Rung SLD_Program#39
// Offset 156
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 4, jump to S6."
#END

STR C1620
ANDLT V3204 4
JMP SLD_Program.S6

// Rung SLD_Program#40
// Offset 162
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#41
// Offset 169
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#42
// Offset 176
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#43
// Offset 183
SG SLD_Program.S4

// Rung SLD_Program#44
// Offset 185
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#45
// Offset 193
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#46
// Offset 197
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#47
// Offset 199
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#48
// Offset 204
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#49
// Offset 206
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#50
// Offset 211
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#51
// Offset 213
STRND C1604
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#52
// Offset 220
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#53
// Offset 223
SG SLD_Program.S5

// Rung SLD_Program#54
// Offset 225
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#55
// Offset 233
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#56
// Offset 237
STRN C1606
OUT Y30

// Rung SLD_Program#57
// Offset 239
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#58
// Offset 244
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#59
// Offset 246
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#60
// Offset 251
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#61
// Offset 253
STRND C1607
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#62
// Offset 260
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#63
// Offset 263
SG SLD_Program.S6

// Rung SLD_Program#64
// Offset 265
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#65
// Offset 273
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#66
// Offset 277
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#67
// Offset 279
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#68
// Offset 284
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#69
// Offset 286
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#70
// Offset 291
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#71
// Offset 293
STRND C1612
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#72
// Offset 300
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#73
// Offset 303
SG SLD_Program.S7

// Rung SLD_Program#74
// Offset 305
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#75
// Offset 313
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 8000 C1630

// Rung SLD_Program#76
// Offset 317
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#77
// Offset 319
STRND Y30
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#78
// Offset 326
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y37

// Rung SSC_Program#5
// Offset 14
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"c1202 is reset button, c1500 is execute command"
#END

STR X40
AND X41
ANDN C1202
AND C1500
JMP SSC_Program.S1

// Rung SSC_Program#7
// Offset 27
SG SSC_Program.S1

// Rung SSC_Program#8
// Offset 29
#BEGIN FMT_COMMENT 
"Look at HBW"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#9
// Offset 37
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#10
// Offset 45
STR ST1
ANDPDPF
OUT C1203

// Rung SSC_Program#11
// Offset 48
STRN CT150.Done
OUT Y38

// Rung SSC_Program#12
// Offset 50
STRN CT150.Done
AND X46
STR C1203
CNT CT150 V2400

// Rung SSC_Program#13
// Offset 55
STRN CT151.Done
OUT Y35

// Rung SSC_Program#14
// Offset 57
STRN CT151.Done
AND X44
STR C1203
CNT CT151 V2401

// Rung SSC_Program#15
// Offset 62
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#16
// Offset 64
STR CT150.Done
AND CT151.Done
JMP SSC_Program.S2

// Rung SSC_Program#17
// Offset 67
SG SSC_Program.S2

// Rung SSC_Program#18
// Offset 69
#BEGIN FMT_COMMENT 
"Look at VGR"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#19
// Offset 77
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#20
// Offset 85
STR ST1
ANDPDPF
OUT C1204

// Rung SSC_Program#21
// Offset 88
STRN CT152.Done
OUT Y37

// Rung SSC_Program#22
// Offset 90
STRN CT152.Done
AND X47
STR C1204
CNT CT152 V2402

// Rung SSC_Program#23
// Offset 95
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#24
// Offset 97
STR CT152.Done
JMP SSC_Program.S3

// Rung SSC_Program#25
// Offset 99
SG SSC_Program.S3

// Rung SSC_Program#26
// Offset 101
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#27
// Offset 109
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#28
// Offset 117
STR ST1
ANDPDPF
OUT C1205

// Rung SSC_Program#29
// Offset 120
STRN CT153.Done
OUT Y36

// Rung SSC_Program#30
// Offset 122
STRN CT153.Done
AND X45
STR C1205
CNT CT153 V2403

// Rung SSC_Program#31
// Offset 127
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#32
// Offset 129
STR CT153.Done
JMP SSC_Program.S4

// Rung SSC_Program#33
// Offset 131
SG SSC_Program.S4

// Rung SSC_Program#34
// Offset 133
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#35
// Offset 141
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#36
// Offset 149
STR ST1
ANDPDPF
OUT C1206

// Rung SSC_Program#37
// Offset 152
STRN CT155.Done
OUT Y37

// Rung SSC_Program#38
// Offset 154
STRN CT155.Done
AND X47
STR C1206
CNT CT155 V2405

// Rung SSC_Program#39
// Offset 159
STRN CT154.Done
OUT Y35

// Rung SSC_Program#40
// Offset 161
STRN CT154.Done
AND X44
STR C1206
CNT CT154 V2404

// Rung SSC_Program#41
// Offset 166
STR C1202
JMP SSC_Program.S0

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRPD X37
DEC V3202

// Rung SLD_Storage#2
// Offset 3
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRPD X38
DEC V3203

// Rung SLD_Storage#3
// Offset 6
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRPD X39
DEC V3204

// Rung SLD_Storage#4
// Offset 9
STRE V3202 3
OUT C1628

// Rung SLD_Storage#5
// Offset 14
STRE V3203 3
OUT C1629

// Rung SLD_Storage#6
// Offset 19
STRE V3204 3
OUT C1631

// Rung SLD_Storage#7
// Offset 24
#BEGIN FMT_COMMENT 
"Upper bound W fault state."
#END

STRGT V3202 3
OUT C1625

// Rung SLD_Storage#8
// Offset 29
#BEGIN FMT_COMMENT 
"Upper bound R fault state."
#END

STRGT V3203 3
OUT C1626

// Rung SLD_Storage#9
// Offset 34
#BEGIN FMT_COMMENT 
"Upper bound B fault state"
#END

STRGT V3204 3
OUT C1627

// Rung SLD_Storage#10
// Offset 39
STR ST1
COPY 0x1 "4 0x0 V3202 MC809 1 0x0 V3203 MC810 1 0x0 V3204 MC811 1 0x0 C1625 MC812 1 0x0 C1626 MC813 1 0x0 C1627 MC814 1 0x0 C1628 MI815 1 0x0 C1629 MI816 1 0x0 C1631 MI817 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

// Beginning of Code Block VGR_Movement
$TSK VGR_Movement

// Rung VGR_Movement#1
// Offset 0
NOP

// Rung VGR_Movement#2
// Offset 1
STR ST1
RANGECHECK N810 0x0 8000 0 C780
RANGECHECK N811 0x0 3500 0 C781
RANGECHECK N812 0x0 3300 0 C782

// Rung VGR_Movement#3
// Offset 14
#BEGIN FMT_COMMENT 
"Set fault state if rotation out of range"
#END

STR C780
MOVE 1 V801

// Rung VGR_Movement#4
// Offset 17
#BEGIN FMT_COMMENT 
"Set fault state if X out of range"
#END

STR C781
MOVE 2 V801

// Rung VGR_Movement#5
// Offset 20
#BEGIN FMT_COMMENT 
"Set fault state if Y out of range"
#END

STR C782
MOVE 3 V801

// Rung VGR_Movement#6
// Offset 23
#BEGIN FMT_COMMENT 
"Initiate starting values"
#END

STR ST1
MOVE 0 N813
MOVE 0 N814
MOVE 0 N815

// Rung VGR_Movement#7
// Offset 30
NOP

// Rung VGR_Movement#8
// Offset 31
#BEGIN FMT_COMMENT 
"Set Crane Rotation Direction (Encoder Values decrement on "
"CCW Rotation)"
#END

STRLE $VGR_Encoder_Rot.Acc N810
OUT C411

// Rung VGR_Movement#9
// Offset 36
#BEGIN FMT_COMMENT 
"Set Crane X Direction"
#END

STRLE $VGR_Encoder_X.Acc N811
OUT C412

// Rung VGR_Movement#10
// Offset 41
#BEGIN FMT_COMMENT 
"Set Crane Y Direction"
#END

STRLE $VGR_Encoder_Y.Acc N812
OUT C413

// Rung VGR_Movement#11
// Offset 46
REPEAT

// Rung VGR_Movement#12
// Offset 47
#BEGIN FMT_COMMENT 
"Calculate Rotation position difference"
#END

STR ST1
MATH N813 "$VGR_Encoder_Rot.Acc - N810"

// Rung VGR_Movement#13
// Offset 56
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100

// Rung VGR_Movement#14
// Offset 71
#BEGIN FMT_COMMENT 
"If crane needs to rotate CCW to get to target"
#END

STR C411
ANDLE N813 0
OUT Y27

// Rung VGR_Movement#15
// Offset 77
#BEGIN FMT_COMMENT 
"If crane needs to rotate CW to get to target"
#END

STRN C411
ANDGE N813 0
OUT Y26

// Rung VGR_Movement#16
// Offset 83
#BEGIN FMT_COMMENT 
"Calculate X position difference"
#END

STR ST1
MATH N814 "$VGR_Encoder_X.Acc - N811"

// Rung VGR_Movement#17
// Offset 92
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100

// Rung VGR_Movement#18
// Offset 107
#BEGIN FMT_COMMENT 
"If crane needs to extend X+ to get to target"
#END

STR C412
ANDLE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y25

// Rung VGR_Movement#19
// Offset 121
#BEGIN FMT_COMMENT 
"If crane needs to retract X- to get to target"
#END

STRN C412
ANDGE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y24

// Rung VGR_Movement#20
// Offset 135
#BEGIN FMT_COMMENT 
"Calculate Y position difference"
#END

STR ST1
MATH N815 "$VGR_Encoder_Y.Acc - N812"

// Rung VGR_Movement#21
// Offset 144
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Movement#22
// Offset 159
#BEGIN FMT_COMMENT 
"If crane needs to extend Y- to get to target"
#END

STR C413
ANDLE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y23

// Rung VGR_Movement#23
// Offset 173
#BEGIN FMT_COMMENT 
"If crane needs to retract Y+ to get to target"
#END

STRN C413
ANDGE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y22

// Rung VGR_Movement#24
// Offset 187
#BEGIN FMT_COMMENT 
"Exit Conditions for all movements"
#END

STRLE N813 40
ANDGE N813 -40
ANDLE N814 40
ANDGE N814 -40
ANDLE N815 40
ANDGE N815 -40
ONDTMR T50 500 C499

// Rung VGR_Movement#25
// Offset 214
UNTIL C499

// End of Code Block VGR_Movement
$TSKEND VGR_Movement

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C11","C11_Interlock","","Used to delay logic by one scan"
"C12","C12_Interlock_2","","Used to delay logic by one scan"
"C51","X_Direction","","True: Left False: Right"
"C52","Z_Direction","","True: Down False: Up"
"C80","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","Fault_X_Target","","Active when X target out of range"
"C183","Fault_Z_target","","Active when Z target out of range"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"D0","MC","",""
"D140","X_Start_Position","","Distance to target"
"D142","Y_Start_Position","","Distance to target"
"T3","T_HBW_S6","",""
"T4","T_Conveyor_Timer","","Used to detect conveyor faults"
#END

