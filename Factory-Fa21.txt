// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\keepe\Desktop\Factory-4.0-Fa-21-CONTROL\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
05563330b5268fffc634251ecf583fa6e23681670e8dc6575c4968956e3975df53a8dfd7f278a2bd
a9dbcd9de9c976d9e5d27532226d5504ac98588069cfe695fa64c39dc7816f28f01a39e62e3a5eba
a525ccdd45edabf82f44aff6473c0442d3f04af1ad6791d7f5785354855405b3a6500bc4824fd7b8
822bdf388f08d294981f82465cffe696e4ec34d8d0d436c2ed90245b3ec81ffecec3631efe0a6df2
64885cc90fa372c34f752919d65da5309bb287946a82a263a5d9f24293cddf859b0884a47a57d840
29d1b36cd3e6f69d86efaf7725cdca845ea917facc054de5c5cb36c94a716b8c53a88056bf7f84e7
4fc4de10a1fce99595bffb4f9a1b6eea61d172c26e6d1477583ecafe249a9eaf5fc12390a72020cf
3ea0bd65f6056bee0c737e6076e4b19fac2f378a876b778a900c4ef16a4088ab37fd2ffd786aa4c9
0e2d5cb27ba097354e3dcc14c9d81653901cde6f1544aee7c94a0e33276203e40ef25ef8972ccc9d
13d570ae0ede72a9e96e8a969ca3b95a0853782545f9c0444749bd80fbeaf1b9ef668371b9be23a5
d036ad6358d4956cc215cbd5c61b62139689872ad7e628b96b12c4178feca1cc4c4cd463b9356dba
64e3c80ae131d23c65200f211aed5d1df102c9b59e4227b02c91557dc11b78047affb02c12afe052
5a20ddc92c2ef1c377ca4468e3c7a786f24e7f85cacaf0b010332413f9c2909fa1c8950083a52228
40029b23827359751176c82ac7b3884dba83ead0384a0342280048973c3a674b59128bf526e28fd3
a3b91d7935696f5efbd782e01a9fa4a41030b23c07205724eec6af7795b007ef4b2245dc66f50dbe
59d8b9e42915dc73e1a14b7eecc419f7d9d76a038f02d4bd6b3698feea75ce678f2a90cb0b7811ef
9d6937a8eacfda3384f8e76568dacb974fa7333148a54424926beeb0387c52fbaa2794c4fb13b9f0
5ba4225640c44336933619fdda6a2673527262f0f555ae58837df48a6d40356d1a7f19b88471a212
3dab7c9c3422a9eddf0bc4c15ac7c9e617dd04975357352b2708441d7371ff9b1db561ebe64a36d8
bd64efd7a7d4e161e490e094c5e07db2e435461c9cb0986477c64b7668376927aeea08fd109801fd
3a2b9404dbc9d9aa66f40f2d1f0b8a21e94929dc3a3a00221e651dbf876248d142bbe57f4cc3e1ea
79e1100faec51f25e9f2b0ccf269d594a6463585ebc542e76efbc51b187e0fb3c683b861e2d99369
89c977d92830ef3930f3cb045357975c3311840755da3f503b9195e3b04c267e2f10f434f62bafcf
48a426095ca1b2907520ace638cf0c63fb6aa93430dcb72a3e23a420233ffed7af066c10f94f9393
4be8b4052dbacfbec533a7e264efd04be363cc0ffd1877eea54723c1e04f73b39182b73c4d10ef3a
6a317a371657f1faf7e0ccf53e3ffdaf777a0e38aa8bcb112ea8e8bd40aaba98d26ce087e1b9f433
2e6db7e8981b3e54fe36c5ce239349f030d88d3af3bb07740b147d1280068b5d6fc5548a3da83fd5
daa55175a1175d8586221aca1b73b8a4059075346f664ff368345f20cfbaa594b4317490eeb77421
ae7c76c03e4993ac919c66ed06247279751d7363b32dfa3a01f9ea5bb602f18a7d2eade2143568dc
8c9554539dfb9303e1622cf3992fec0efbe647e0ef8daa9117350510a7cf795eb27e24a7bd440e53
5754f41cd711db8f2bcc8629809fc7574e89f2f70d2e2325b2c6e1251683a8ced4e9ed73844260a7
4d33f3fb54087016ceb1bb7e07ac4cd84506eecdcdca7a39155bc4334e6ac9b6c00ac2ebe1f500e7
b73d5203fcd4aee7652b2a0dc674e806ad7b20d9f6fce416a3b124db2f283d0f89b9ebffb5c78d26
c63293ff3397e89ed4bcc7b164ee19c9380b1a0b4f0aff15e26f4d3f71742f473c92583f8270d3dd
b40b33ed6e40345e73acb988ccec90bfafe91619b88046d1b2c7ec16226634a6302fc40f60b0f5b2
54cc93d1cdd1df79e2102b39b0050598bca26ba4e43093fb753097779f09eaad3e9ea88e3f24d5d1
2399c8e0f1c6e87be01db7ee8e8d0452cf3788016e197f941eead0983bee9d628aa1bac6547c3fb6
2e939a141d0d5b8442f718823417d403e5d530fde294cb92e81a7da00fe7c7c7bd6e38168339924b
3e2a278112c532609abefea2155eadc878f2c8a80b41d2a2f9e4e1de8022f9dd9f15e35c4cd333a5
77b28ececaedd6d702d9539933b018ad3b9b888cda3c2412cded8e755dc4147ff6b169085efbf12f
9b4e951ddb71e944f17797845821c75f69b494c73c144132c39765d90d6b3269f653f89313d193ec
ed3cef62c265840972946caf1fbcf66432741e92b227d1ba4d66c66c444a4106b7dd83254420018d
1417d4447617d45e15ca480abcd8cef48a5ef89933350f0423d7a4c1d36d377110d0238205b1028b
9a160f22d9c4c491e7cb78b4df2b382d198fc20b3a04871922e3818bccd596a086c1bd6e6099053a
1342078af4d1fce116db85ba826ae4e4a847c923485329e2f05cea6a9b65a0f5dc01156592b09021
e18686031bf7aa601e4593d96b9a6b9a292e098d725bd749083650210d79d6a165d51ae207b8d833
544e2d1bad467400c1734e1d9ed561d3957dac78ef2ed9fbd9061628f60051d0a96d6e1b8d54b199
caf7f530817b6236f173e97ffc8a3f3d6fa4d5b351f7325521d0f45ce37c667a25c0806c33fa07c5
5a70251ede88bb2ac9ba52743fb5e64596d98db65ad3197cdee29a3434fe136feeb1843255a50092
58dac76f8f2fca3199cdd255c8150e3e48bcd3e9ac8ee223c188a943b1807c2b3cd4526657385060
b92e8dfb998a414406bbd4e2ac52b9a909cace4bc1fb7c587222e5b9a0d1fd0b04225227df1fe1eb
22c066390468f9dfa4b6947968c257fad8dfc9d73a0544d97e524918d6f117c7d7ae4aab4aa367f1
02c68e763a73b3f5c0ca3c69f0e51426f9877def317e1bfe16c12d819ce297fd736f2b58bc6d39dc
f23d1185ea0e7ab394e37ebc50e30e0c932998e693d0010a2870022a9ff52286381767b9e32bc82e
8a72382be7cf89e21a5486ee8ae7eb0faccf45b6ba8ccefa8a8dadc0bc55017085c4b4ce52a49775
97b0bd2ecaf10dd2d0f7cb09de09c5ffa28f9e442e959be49f67c5fa6f8498b9b5edb8dc6e6a5027
cb3018a2f3b4ff401d1523b95b0aa022b498815827551e123081e7dfeb2296469e4e188055bd74ff
26b5a818e2a02995b50cc9eef0d50cb0d9f7da3ce5c02ecf8abd7b320c465cf5e9b18de255ace0b6
814b34cebea3ca82de3e81f8a886264ad3587f16a52ea966ea96e9832ab041cdee4974f418957366
ad629505dfdbf30a9cc0934af69fb1086d1947603ce32d540d126c89589319e9aabea51a097e6872
94e40bb4180418db0cea9a791e8e2c48080dfc8a6914370cb52de8959da288e2b385d4333af2bae8
f14daaa57ad64a5f85953107293c00edbe2c8eeaaa4fb9155dedad7d3dacb342e37ff23cc0a36c9d
b5c4747b98516a34dd607c77b0576a281f0d35604f4bad17b460405ce6815e88239950fb4a513da2
edd89d547092e405f969c65797c520843d9e4a6a7ec42f6945f4a15af73286fe928355ee3661bc77
566410e40e3bf574910b4aae727e1889a3dce2b59c314af4590445471afdd420b24b87d9eafba2e2
652eea5e135a64338a74acc4852a7608b61b86c076e3fe033d79f05c244859854e312a6a6c9c6c9d
6c86b31d85cee73fcd0ad6d24399f4593c7c7aa2907cf8e9a07030a3bc43e27e73b62221ee1f37c6
76a173cfc2ab43249e3c4816195b4250683df2f6b85864ea534b45547e013f88a0cdd08445367741
6b8ca551738a7ecd851e1d8407a24f73fd4458d61b6d081aa5bc0ff274d5b7f82d045b93b77603c6
e37f7f2626a401e4d8562f340e5a8553f84d549f2f34583ff3c088416587fb1a99e9dce4b16227f2
d34a057e678a87259957c6b7efe7c8fc634fc20dfcd4c9b83a5fdd65be44ff0bfae9c42f1d8d9fa7
f29d9846ff5c88e8f71712b00cc26a73900bb608ef3536dbf9e2a2a47c4e1adf40432aaf07edd15f
26350f7df1409827ee2158e64bd696a02c205a8544fc73eda381f8cbfe32bf698b5c47fd3b4d283a
8d941f8f121b1c2fc09d3abfc7c8f074f8767e6f613c9b837bbc45ef200ef1079566c100b1bdacca
dfe084d45f9d02dd5c8276c001caa9b35fdbbdcf401f160c585df37af0bce49ff1b8baf0b4731999
b8fa6adc3ab5068e7199d935f7d109e92dbe51daed9df21345a6e6474e9017f2b7821f0626fa74d5
31da795135f738deae4dea4e4586ee49ba76b48531f75c965f02fa3c9dffb06589823cc177743cdf
ca0483fe9ac9aed54a61be6852fdc68e33bc7cca328e8108e419d7c60600b04322b0ccefca795a7c
059ab18e56f6fb52e8d4a4f1c9d7de8aaf3775f23a81bd378e8fe9ea0ea3ff49e57911220c6189e6
905ffc98c6e674f131316c2cbff43a4ea4ba72aacae1f33d5f74774034d3e664261f49b89a173dd1
bee7b114c96a055764c2353445cbd68ea8b0577286c71e155ee0874f93017c2cc5cc1612394cfa1c
f88161d9b4ddc887d2691d601b079a62fb7bd6c5363fe02216d1201385234566a098cf95d11bf126
8f391f5a61a45811041827e13223a4d3f06f733c18a2d88e7f0b9220ea8f015926c327c1f62b05fe
988c82abdf5f827de1d2b0c5f7bc61295fa958fed9e03b3cda0acbdac5992d0f5b23bb46886bca43
a775b9a48e041858f532a032b0689d5b852fb28cfb20781e5ca1496086e7b62581c4f504545f9ccc
d855587b0db3f409e1c8c2f5d41b1bcd0d76a27a235924e9c9d8502af98127cc141b59639d22bf48
bc191baf9c65dce82d21b08d74bffd5ffc36c138ef744102de8484a7c3f3413ed6d236e25b9a5588
9597971e460effab0239ce7df63dc0e08b0b8269a67b66c877c95f666cd15177a8d172461f7e23a3
aaf05dfa4efe048765ff6d8ea4c54b3d75b8404cd8a61a285e7bfdeb6033c092bc1d76a66441deb5
6a70ec685886bd3bc1e346a05e3192341dd92480cc27bc81c0c0d5641da1f4799ba709ac6542534b
65d719eed32da8638fc2719e4bb1a900931a13435b2398119c5ffd2a149deee8cd192239f58c7e2c
86d90e305ec6535d1f3e793494dd83a4f94cced2a8c179cacfe9d442da12b9ec63a61cb3c7491a98
258e0ff15ceaf002589af0ef5efca50af8bf0137c1b743df30cc60df84dc7643ca490c92e35ca7c0
9e580546fef1ea64b7bb11266b3353b017c4db84d92dcca85291dc5900051bc998d737abad4aa493
3c69ffd075a85b31e236da1c7910ce7bc7c9934384e10afedd9951b7a496ca3f4d5e72055b293143
cd39c796fb89528671ce9553d275519be01bebf378862bdc0829c4759610ec03dbd86ee437ad1a95
8a4c981d2b792c5fda126df5bd7d35c6f4a741bb48c07a3b03ce144c5a45df6a0c208fde6a2610d0
becca32367f29a8a4a648cbfd4f2c0738d6309f3b5c121a830baea8ed17217ccb97e1ba3f2684e13
d4ad9103407425fc3ffb51b1245a39a2aa455b6973d674cd3273852298169f7a8497bacb7ebb3482
2131ded962073cf91128c1ca51e709c1fc95579ee72ba5ae0a8c0e04673b64ed9ce67813caf1e1fc
9d110c898994197c35e3e734cbebe5405d462e992c539845d2f8ef79f51ce0fae8f3b95180907ccf
c1ffc1aeb989e775c6c891c454f36218dcf9feb6274719738d1dc01999c6afcc41f3c8c90008ce53
1d144ed73fe66725deb268061a8840fa319a07d6c3a58ceb10f711a22f470d140392da2b4a449881
95dd62e53a8f62bca25cbe5b40745e22f99a96e73a6d87cfc7545521ff7c196c93194bca30f75531
1513412da8b55cddd1cdff62385aedc93255f8d81a4a6603cfb60c33de67a838fd7956819ac59dc7
9a05b8a98c408fcf69235758188bda14b74678ea27759224c361c3f313dc8bf032116efd1622fd84
3f4e9fd582ea395eb3676d155c56b9aa4a6f5708af2d28315c37f5e13fb7086b41bde03e4066510d
6e21b6e00091afff4b4aaf5b62eaa81acda75333911f6212d1c4ba5df90af5569c33a320e9c67ca2
2e4f4a874e120571320bc3acd131f1e0bcc13d798a56bbd3f4839a38c3cfb1cfa25bd33a2d33f8c2
d95c0e4df40be536b1ce01082f2e65dccfa7d5aeaa8566531749c8ecd8708453b7e6de391a9ec6ff
5dbc123c09ec8c46b6ff33b65f0bb60d716de88091cdf534edcded0d2ac14053927150e31ac77cbd
0809d681b4cc407610cdd7d9817b5ca8124e341b6f4edb86f2179f2791c427b2abf0d7ce410e4b49
676d0b8b02a28ceee1cedd9c6734c342a3d159906cd5e3d004641bfa63676a8d878badf38dc04ff2
21f86c0dfa04983d6ea1e18abf59780196361ed30b4aecfeea8898ca255a0109f503984b5092ee7c
ae154b442c840838c5bd09d6948f6e0fdc2833b6ac71bed233b471d8de8ab92b530094924542a406
596ccc0229d29e11f9b06e8e1d7153fbaecaaa3b98a9b52136ab5ae6bc35ba18398b2c424214f0bd
8f773794455186af12d5fe32e37cbc51116ed15780f273c2d9f2a1d8679414fb370cff1b8b2fdff6
3addaabfae054da12b5367a1cf77b4afd1014e8d257d8d5db494a6862c9fb87ffedbb03791f1b459
229a6b10d08bf8774fa2eb35c47f2f0254b07507b097266f80d280a461e6eb654f83c0c0b9cd279d
ab017c4a395ecc89a00b84f40a2a23a9bd768c0d27c974370c2af98b9faab49c13cec05ae13f2c50
79d0224181de204219cf209a967ee94b4f5706b6bf8701cad4484e23a0b64c689d1372803565b8d2
ccff5025604527a99b9b82e2edf5a1b438214a171a052acbc37cee4508c7de136988eefeb67b11b9
128e8451e48ed040d1bd6d11129937f68280b4be5c955e727f9cb3feabe5919dabc4cd63aedf6db9
bb4ec9b1ab1a565f3ea409a9979a2c713ed36fa0b5fe2612186bea70c7dcb7586f412fdadcb19f8e
34c1f8f15b4888bc726b565792ad345ba7d94101d27bff46c84e2b4f9494b1794c3a14b74bb5d533
1ca38e204c5d5112df122cdfc12e369523415957473125ec8d39d0ab5376607a508d9a754204fe11
813d7712bfc3c008c459742c10019ced560e4a7f3d7f6fd94ebbfcdeebbca585634930f4dd6cbf7b
f0ebf6bdba3109b4ac021b74a3d98a2d8a20fb55c95a6c8cd9e13f56741aca749142c2d51ef0a2d3
92fe83f1ef3a7720496c47eb356380325ff6a4a4449a51d0d9db3a9d7d2114ee9a6b1db37464dce9
690fb1320eaaa6e48fecb674be126eab88a949484e424e51161cf05687426a34d97b26511c8000a1
161fa94890507e21c3f570ccec53c0b7b70f74b7a46031045dbd8aace8fa5858350b8f3fb79541d4
8057e5fd9e77cd87a6a817e1c3b49ef386daba1e2b5b0aa407940f20648bdc1c2273811d80f17db9
bb00674f81526aa3f2ea0bf203dc04a42d7f3aaa94f43d1e7c0519404e0de9597c135caef4bf1e61
57a62118516da4f3a200e305d2e35a72477442134190aa0d542f172347b04a0595023f16a3d4f039
f70fbc2e62688de91b749bdcc303a1ec6a45be862d06b4be3e3acf45698e8b341c3bdff23bf1a366
9ce27f481a055a03b53c05f2058e07da375a006c8114fc402dfe4635345ace2292f242e368eca098
b430c5eddc14cb72721e14082f2bff4a8a14c9a983698ca2b6e09d9de788d66426f1742cf64f5317
6f4189756369c860855cc72a7e5b506009ad9a0bd0393c53bf5b2d28d40f836a3cac49ec71cfd4b2
31f27c9d5fbb75d0e02d0d933a75b6c5d4d8c30a05720072d44c5e6482690cd57be2cbd87dc1ba8a
0d036420c442a7b74f4f67123eefddfc98641970e4e8143c7f293aa7bf647ff3780b7144aad2fc56
ae631c341ff13f58a1b1f34fc272124cc2048982057fabfa513395a8e1865c5dbfdce44523836dbe
34856c1f790340aa96c0d5d3bc9c25f53d09369830bf22b27698999254b459b27305cbfcd6c287d8
37ab892e56c4de19e6cdb5378723bb57393844ddd9e120768101bcb31bd4659790ab05289e7e5ef2
5ed39d1dd9af4b7717ad846d995b1272cc0f4165ebb48964dba125a320fd43333686019c56d1579d
0fcfe55424962402f48c3f35ea2e560e5c59c826d38e4244604fad2f5ffae86c5ead398dbf74ee35
e65d49dbfddaeb4b9b0c05a6168d1c00859411f420832e5c8e03ebab84033a7c056314c47f746d71
911bdf23432540bf3fc06420ee9ba83c72ce304e728dcad3240eb3aeea776e09085a31f9047f84d1
1a343e816824ac009e5d76c3b99f278e011941fdb9c501ed721128f41a8c1812bd174ac44d9c7794
5bb622a6aaadc4b2534cc3fdf71188e235950f1b7b632380090571a56ae398ff9acb7dba958776d1
4033b02801957895514699b2c9c9b406938d71b82fbb92bdb495b905ed1a3aab54f65fb74ab48301
70075443772850df8b6fe3fa0ff8448ae1ba182875994c8ce7361d1eb42f8e712ee3cc8add6b8445
5ff12a4ec7c36876267753c76308e4691dfa2bdd415893388c7ec400179214af421e0550076a3962
c4eb3bd22e1b5fb692e8a93cd37e185a626ad897f73dddda2badafca2b052e11c1b4998ccfe60efb
c5d18de5019f8cf02227fb13e65b7ff7a275019b9d5785402900c8867acd2757ebadfaa41531aff2
89b886b3de27ef7f16c83a0ba234e16ab57c23db50e56c373eb8a06503889937eecf634161d4da8e
b2c35adf801e2e2aca4b080cc3bdda3caea1c026994e7470335ed6e6a97c3853c998ccdc52fed0d1
661baab5a2ab718bb2a329fd9c9f4c314715190106c7d31d3e1967916ddbe048d4857a609ee93b3d
9374ae92474633f36ab61f98223960c0f03ac9646a7c0d32fb2b9bc60bed86d8b3586b93891277ba
65ee9633e24c56c3431d3123094ab16259792884e4cb3f32f69e2b5813a35ff573601d854220b1ac
1fc5e31b32fd7cfe5fdde961c87604c4e3ceb386f37a5aa4129257f57783126bbb01e9a0e09b68f2
93c28709595bb6639d44d2760d54a39a1a04487721076a7c4868f31924a530cfc4b51b10c444bd91
924d70a8a2219ffe7e2fd32a71e8184a5c2746b4e8cfbb1b3c8ee7c58d5fcd3cf576e47f4c792cbc
9bc26a194658e6dbce39f3867e10a6e5aedc0a4f9b1154d363a0e74ec8450ff55af3d14f45d24a83
c4d210be46bea23b07d24635ee249cc83f6aa9b193620cb4f9e04e3c92e7856a4649a6955d1c4606
2d61b8f92e367595ca4c7024a5e76feeb20d1ee215f8092136ce447b829f46d140b5552438a18ea6
cedea965a9b95228bb163228bcbee3e09e3fd84f2be06b18f8cecdb8f661ca5fa4a9b38fc5ad15e1
f861d0314466f8c5c9915e7e0ca1d399fd96424650c36f0cdab4954969469ecc0c30a26aa3a0a183
6a5beff281686b4d4066c4c3cb21a30a11bc6d6ebf75232a58e59f8eb60955b5d0625d1d10d3a366
25efaf6cec626c28b2650cd3ec7deb08f190c4721639a415744cce645ac8e65c9fd87603be69abfa
862b5d58d96d7d0fe8290a605382aaec67b2284a095dbe3be49f759dc18ecef2db88d4e16208c8c3
06f8d65daa856e490e40c98e30180741293fe0e639a21ec2e80c7d0be9ca28105f19e9740e11e077
dddf23ba333a165521a955706512b0cda298e6ef9c6688ac4c16e0bbd6abdfd28b7e8e666f3b5e0b
1531cfbed7c290d23b072a42e74e0e7bca17343a219eeba8a6e6a2bbab5e870c875349d88ca4fcdd
44f94d7de33f00ab378af770f746b68aec625048acead20bba85aaa58e4bdf927fd989c6f93730ee
80a17e9abbca81d97510ce77a475ee02f7adf661c15ceb78d2d0e9766218b2809098143d03d5f119
7eaf61ab2835be067d7900775f2bdfc8d7276f003315344c0c75f132f8fbd260b6266713e96ae6b5
85237fdab1084806bbf3606cc2c4639c72aa8d73672d8cdbdfd23c62adb0482d3db628152f467c6b
684cca889158a8d24069588cce2749fc77de733401a90477ad5014b67529bb161aba5a3ace554eb7
0292a0427af960d46c90c76c0148bd90cb37d00d30e9de23dab9b4d0a3ce07601c11ef8e3ce33c9f
52b14a324c38b7c6f3173802369fe0dce74261ab495335f3f039bdb66256c9297e5742cfd42a9e83
9041a2b22dd2f1015934f12dd35cac6ba34e8b36f13170428c4144cd72f52ab285504ff182646a4e
f4414be5b5ae643e9f3e7c71840f240293480bc0bf6d1de8446029d01218eff6447d79ac68e34e09
ae23063e0ffddb9f8877f481d3727e45ab135dab36575d4142216bdb0d4b171d9e87618ccf25d927
a3bec58c616a4b5c1f6a81757c3726a0ab8b8c56c338bd618e94dddb6f8f19ae3bcdf34f9f40c3f5
c5a8f3f9e96efcb9f41d6c9b6a6a9b4ba0c78f000d8043fe49309dd17a4c474b1af4e89ef11d0bcd
f2751087bd4a4920810883597095b2c2d53d578d93b45853b799d140279de4f3ce4dc2726ad1f898
0a662f4b98144e22eca850280a4eb7513b646f084272eb8af8a967970870dbcc561e25bf2840c59b
9e378553492569ff98be09fd6cd3958763bff4a2ef277c8a8926b8fd20ed7a66371ae9b8b949673d
6b89b7225517f209252727c663f68b89f8a351bb9f948a33b5d889b0a71cf72b61dae8b273e21481
3a625363f36a3d365aa101f698d4dcc2c4df83973c393f51dc8e3cef2e9cf136ac80c7eef939eed9
668f4af5010ee9e333a9d188e52631f5cfad49edc91dda5440895f1d62c0ff790eae1987b4a4f72d
53548cab3e7d98c984bb599c33baaaf07b48fe023c78ab25314baa5ed605ca3cebbb33dc11755493
d5e5514d95da2a00ca84988e44ee095fd3a5c267f0619b743a93c816728ec3b295480df58c917ea8
db0d0cb7f81db4cf1ea9d96e034aa91c6c1c7e78aa5d36eb4becba195b8f4cdb7e25eccd0421f1c7
af21789e69a13aced5a35ff687cbd95f324343075398d85ae5be987d56f323d0234cf052faac4d6c
0b3eadf3cb759a76991522075b1f524de2e2e41039d0bbe663b69bb406ed41416faa7b596fb8d318
dbcc4f6eb3f37d45e163f3416b0fe54ad9225e2d77c698f3a671aa4e9c946bfd99c08cb72c03a077
c2e2de501f3cfa202308b2f0288e64bc32fa2017775ae00af8c4e1dce0dfabeb831e7523bc5d1d51
79ebb83d067202475415b3d8991d537ae97ae224c7bc068f98489695ec0034d8253566efd4ec2562
af697dbc5da2573cb952abc2090afd70e444a05de035f9dbc70fe4b6061e416c50cd067ae7b78b19
51522405867ab339c4d566550e41472adccf24014a10f804abfc44e0c823abdf5f78f3e4c3bc7d68
45093e658d709dd75b5c436129ba2c83a62846c5671e83962377218b20571b806db8af120f433343
93db1c268c24d4adc97f0395a35d4afe3b6b1aa876dfe8ef59047958f46bc52bbcef664ef5300d5c
1d8a9f82dc15ebe0077246f416792a729b93882a6b0879cd1fb6f11cba1fc3e4102c52363e2545d3
4feb9c7e9541104daa708edd5076df49ce2d182fd1bb324fea1064d6f56c80ab01d50c4476b04e65
c99aadfb1adf4607d417545e8f9763ed18fd0f7e6a01051bcafa82080eb5e71e26e2b28c24706c22
74c2a3665c74e046db638553ee5b393f79b447c264b24b471db33c20f29a4341cb5d33d6c4462b38
b1a03d14240ee6acedc34884c5c39ad57146cd762e66bf88311849c5e2c02f4912f47df2cbfaf511
e649eeb67eb40e1cb3ddccc656b5f9ce14ff11fdd73f3abd9bdad0aa77f196857de9f563804c5d66
87ebc612643d634d91d84a9b6e613da34c50610fe60e3808c4efcfb363f6b4e9016aa92e38a6806a
b9f660ae763660982ac07bf73bf194f56134cc515186283a8e035ac3da2e782a85665667c9c1ce43
8fd5055fbcfbb1596c3f8ee3468aa20332773b1386164737c183f874ddd06c551c8c97188d1c118c
ad4dd72471ca930018ce61172c0ce8899b55d09b354580a69747496fecbd93e4a78ca614babbf85b
028f7791b0e97abf9dee96cf6833a80870c32e4a854f61b1f80a100979
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 1345 V810 1 0x0 180 V811 1 0x0 175 V812 1 0x0 860 V813 1 0x0 200 V814 1 0x0 400 V820 1 0x0 420 V821 1 0x0 440 V822 1"

// Rung VGR_Copy_State#2
// Offset 51
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1"

// Rung MPO_Copy_State#2
// Offset 31
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 V3201 MHR1601 1"

// Rung SLD_Copy_State#2
// Offset 23
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every "
"scan</FONT><br></center>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 3000 0 C182
RANGECHECK V142 0x0 3300 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
#BEGIN FMT_COMMENT 
"Deadband for X position difference"
#END

STR ST1
DEADBAND D140 5 D1

// Rung HBW_Move_XZ#10
// Offset 48
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#11
// Offset 63
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D1 0
OUT Y50

// Rung HBW_Move_XZ#12
// Offset 69
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D1 0
OUT Y51

// Rung HBW_Move_XZ#13
// Offset 75
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"Deadband for Z position difference"
#END

STR ST1
DEADBAND D142 5 D2

// Rung HBW_Move_XZ#15
// Offset 89
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Move_XZ#16
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D2 0
OUT Y4

// Rung HBW_Move_XZ#17
// Offset 110
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D2 0
OUT Y5

// Rung HBW_Move_XZ#18
// Offset 116
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D1 -40
ANDLE D1 40
ANDGE D2 -40
ANDLE D2 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#19
// Offset 135
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V118

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Task Send"
#END

STR C101
JMP HBW_Program.S7

// Rung HBW_Program#8
// Offset 14
#BEGIN FMT_COMMENT 
"Task Recieve"
#END

STR C102
JMP HBW_Program.S9

// Rung HBW_Program#9
// Offset 16
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#10
// Offset 18
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#11
// Offset 20
SG HBW_Program.S12

// Rung HBW_Program#12
// Offset 22
STR ST1
JMP HBW_Program.S1

// Rung HBW_Program#13
// Offset 24
#BEGIN FMT_COMMENT 
"Task Send"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 26
#BEGIN FMT_COMMENT 
"Set Position Targets"
#END

STR ST1
MOVE 900 V140
MOVE 500 V142

// Rung HBW_Program#15
// Offset 31
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#16
// Offset 36
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#17
// Offset 39
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#18
// Offset 42
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#19
// Offset 44
#BEGIN FMT_COMMENT 
"Task Send - Move 2"
#END

SG HBW_Program.S8

// Rung HBW_Program#20
// Offset 46
#BEGIN FMT_COMMENT 
"Set Position Targets"
#END

STR ST1
MOVE 2950 V140
MOVE 1700 V142

// Rung HBW_Program#21
// Offset 51
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1
OUT C10

// Rung HBW_Program#22
// Offset 57
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.Done
AND C10
JMP HBW_Program.S9
HALT HBW_Move_XZ

// Rung HBW_Program#23
// Offset 61
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C82
OR C83
JMP HBW_Program.S2

// Rung HBW_Program#24
// Offset 64
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 66
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 68
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#27
// Offset 74
STR ST1
ONDTMR T0 3000 C12

// Rung HBW_Program#28
// Offset 78
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
AND C12
JMP HBW_Program.S1

// Rung HBW_Program#29
// Offset 82
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#30
// Offset 84
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#31
// Offset 86
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#32
// Offset 88
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#33
// Offset 91
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#34
// Offset 93
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#35
// Offset 95
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#36
// Offset 98
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#37
// Offset 113
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#38
// Offset 115
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#39
// Offset 118
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V118

// Rung HBW_Program#40
// Offset 133
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#41
// Offset 136
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#42
// Offset 139
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V118

// Rung HBW_Program#43
// Offset 154
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#44
// Offset 157
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#45
// Offset 159
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#46
// Offset 174
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#47
// Offset 176
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#48
// Offset 178
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#49
// Offset 180
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#50
// Offset 182
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#51
// Offset 185
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#52
// Offset 188
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#53
// Offset 191
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#54
// Offset 208
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#55
// Offset 224
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#56
// Offset 241
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#57
// Offset 257
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#58
// Offset 261
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#59
// Offset 263
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#60
// Offset 265
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#61
// Offset 268
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#62
// Offset 272
#BEGIN FMT_COMMENT 
"Reset X Encoder"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#63
// Offset 275
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#8
// Offset 56
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#9
// Offset 73
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#10
// Offset 77
SG VGR_Program.S2

// Rung VGR_Program#11
// Offset 79
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 87
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S2

// Rung VGR_Program#13
// Offset 89
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#14
// Offset 91
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#15
// Offset 93
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#16
// Offset 95
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#17
// Offset 97
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S7

// Rung VGR_Program#18
// Offset 99
SG VGR_Program.S3

// Rung VGR_Program#19
// Offset 101
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 109
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 111
SG VGR_Program.S4

// Rung VGR_Program#22
// Offset 113
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 121
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#24
// Offset 123
SG VGR_Program.S5

// Rung VGR_Program#25
// Offset 125
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#26
// Offset 133
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#27
// Offset 135
SG VGR_Program.S6

// Rung VGR_Program#28
// Offset 137
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#29
// Offset 145
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#30
// Offset 147
SG VGR_Program.S7

// Rung VGR_Program#31
// Offset 149
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#32
// Offset 157
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#33
// Offset 172
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#34
// Offset 175
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#35
// Offset 177
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#36
// Offset 192
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#37
// Offset 194
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#38
// Offset 197
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#39
// Offset 212
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#40
// Offset 214
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 217
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#42
// Offset 219
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#43
// Offset 221
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#44
// Offset 223
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#45
// Offset 225
STRN C500
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#19
// Offset 56
STR Y20
AND X17
RST Y20

// Rung MPO_Program#20
// Offset 59
STRND Y20
AND X17
RST Y17

// Rung MPO_Program#21
// Offset 63
STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#22
// Offset 69
STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#23
// Offset 73
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 75
SG MPO_Program.S2

// Rung MPO_Program#25
// Offset 77
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#26
// Offset 85
STR X17
SET Y17

// Rung MPO_Program#27
// Offset 87
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#28
// Offset 90
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#29
// Offset 93
STR X18
RST Y17

// Rung MPO_Program#30
// Offset 95
STR X18
RST Y20

// Rung MPO_Program#31
// Offset 97
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 99
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#33
// Offset 101
SG MPO_Program.S3

// Rung MPO_Program#34
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#35
// Offset 111
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#36
// Offset 129
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#37
// Offset 132
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#38
// Offset 137
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#39
// Offset 143
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#40
// Offset 147
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#41
// Offset 149
SG MPO_Program.S4

// Rung MPO_Program#42
// Offset 151
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#43
// Offset 159
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#44
// Offset 176
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#45
// Offset 181
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#46
// Offset 187
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#47
// Offset 191
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 193
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 195
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 203
STRN X15
AND C800
OUT Y45

// Rung MPO_Program#51
// Offset 206
STRPD X15
OFFDTMR T103 3000 Y43

// Rung MPO_Program#52
// Offset 211
STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#53
// Offset 216
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 218
SG MPO_Program.S6

// Rung MPO_Program#55
// Offset 220
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 228
STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#57
// Offset 231
STRPD X13
SET Y18

// Rung MPO_Program#58
// Offset 234
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#59
// Offset 239
STRPD X13
SET Y47

// Rung MPO_Program#60
// Offset 242
STRPD X14
RST Y47

// Rung MPO_Program#61
// Offset 245
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#62
// Offset 247
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 249
NOP

// Rung MPO_Program#64
// Offset 250
SG MPO_Program.S7

// Rung MPO_Program#65
// Offset 252
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#66
// Offset 260
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#67
// Offset 265
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#68
// Offset 270
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#69
// Offset 275
STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#70
// Offset 292
STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#71
// Offset 309
STRN C801
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: Listen for Doug's instruction to start module."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
NOP

// Rung SLD_Program#3
// Offset 3
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#4
// Offset 11
#BEGIN FMT_COMMENT 
"Wait for Doug Start Command"
#END

STR C1610
JMP SLD_Program.S1

// Rung SLD_Program#5
// Offset 13
#BEGIN FMT_COMMENT 
"Enter manual mode S10"
#END

STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#6
// Offset 15
#BEGIN FMT_COMMENT 
"Stage 10 has manual controls for SLD"
#END

SG SLD_Program.S10

// Rung SLD_Program#7
// Offset 17
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#8
// Offset 25
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#9
// Offset 27
#BEGIN FMT_COMMENT 
"Manual Compressor Control"
#END

STR C1652
OUT Y31

// Rung SLD_Program#10
// Offset 29
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#11
// Offset 31
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#12
// Offset 33
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#13
// Offset 35
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#14
// Offset 40
#BEGIN FMT_COMMENT 
"Manual Auto Run"
#END

STR C1611
JMP SLD_Program.S1

// Rung SLD_Program#15
// Offset 42
STRN C1650
JMP SLD_Program.S0

// Rung SLD_Program#16
// Offset 44
SG SLD_Program.S1

// Rung SLD_Program#17
// Offset 46
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 3000 C1600

// Rung SLD_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"C1600 is set to true when timer is running so the conveyor moves"
#END

STR C1600
OUT Y30

// Rung SLD_Program#19
// Offset 54
#BEGIN FMT_COMMENT 
"When the timer is done, move to stage 2."
#END

STR T200.Done
JMP SLD_Program.S2

// Rung SLD_Program#20
// Offset 56
NOP

// Rung SLD_Program#21
// Offset 57
SG SLD_Program.S2

// Rung SLD_Program#22
// Offset 59
#BEGIN FMT_COMMENT 
"State 2 is where color is determined by checking if the "
"analog value is within a range, and conveyor timer distance "
"is set based on color.<br> <br>"
"Need to integrate a counter here still."
#END

NOP

// Rung SLD_Program#23
// Offset 60
#BEGIN FMT_COMMENT 
"Subscrib is to get value from color sensor and convert it "
"to something the HMI understands.<br> <br>Need help with HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#24
// Offset 65
#BEGIN FMT_COMMENT 
"The disk should now be in the center of the color sensor. "
"This function checks if the color of the disk is in the "
"blue range. If so, sets boolean value C1601 to true."
#END

STR ST1
RANGECHECK V3200 0x1 23000 22000 C1601

// Rung SLD_Program#25
// Offset 70
STR ST1
RANGECHECK V3200 0x1 20500 19500 C1602

// Rung SLD_Program#26
// Offset 75
STR ST1
RANGECHECK V3200 0x1 16000 15000 C1603

// Rung SLD_Program#27
// Offset 80
#BEGIN FMT_COMMENT 
"If C1601 is true, Off Delay timer starts output is set to "
"C1604 which when true runs Y30 for timer length."
#END

STR C1601
OFFDTMR T201 3000 C1604

// Rung SLD_Program#28
// Offset 84
#BEGIN FMT_COMMENT 
"When C1604 is true, turn on conveyor."
#END

STR C1604
OUT Y30

// Rung SLD_Program#29
// Offset 86
STR C1602
OFFDTMR T202 2000 C1605

// Rung SLD_Program#30
// Offset 90
STR C1605
OUT Y30

// Rung SLD_Program#31
// Offset 92
STR C1603
OFFDTMR T203 1000 C1606

// Rung SLD_Program#32
// Offset 96
STR C1606
OUT Y30

// Rung SLD_Program#33
// Offset 98
STR T201.Done
JMP SLD_Program.S3

// Rung SLD_Program#34
// Offset 100
NOP

// Rung SLD_Program#35
// Offset 101
SG SLD_Program.S3

// Rung SLD_Program#36
// Offset 103
NOP

// Rung SLD_Program#37
// Offset 104
STRND X36
OFFDTMR T204 5000 C1611

// Rung SLD_Program#38
// Offset 109
STR C1611
OUT Y34

// Rung SLD_Program#39
// Offset 111
STR T204.Done
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"T3","T_HBW_S6","",""
#END

