// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\njost\OneDrive\Documents\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
33857e4fbda7713dd3d856281c1540ae63c84372e2fef0841136601490fb6033209e0c9a8d702343
6bce214e6f8f6eb1d1f1fb1309881110d28dc3d8ff4d28b3a2e13c0557c360bd02257f3cb2820323
0e14ef9bfa86bb17e4eada699dbabef42f3e0f91ba6e52bced8920851fd5b3ed66e2a96dc0cf1a50
2bf04a427e1edaf5c5f4435f1355d205c039d7f8fa3a342b0f8056c346db263387b2aa72fad441a3
94b4658dde18cfa26529537bfd390e7d7bbfac79566979cb0ec3de38534500c535133866b1509224
9afc3e7dbf56dcd1a809786ce043c7bacc11c7c145768827a3eb00a66e6627f807fb8e952ad1f770
3e8911c6ef97db66da6394a2780e0f7e91a3dd7bdc1ef393ab6ae6a3e44a9af3ae4456282479e893
5436ff96385eeb71d1c90de9b54ad579a86a8ee77ab5fd825b77ea595363b3ee788fd06e025a308d
12891d86559ebf77dac201667e6bc07156f5149f070e39dffe50195de043beb0e340851647792aba
8671d6f5a74b08b716904a44d86d411a28a8605db8f7c1af4a3add6e06d64a078b3b926cd3b7f209
2cffd19781e7dfc08eaafc0cc4375b6876938761f9ec17e122d2bbb8eb7edb85aa76146af0b4892f
902e79fb0437985665b8dd915dc1eee3b08bd15a4a00fd9f3609165a2402d54c841a7bde0785f0c6
8754672e85e97d80ca4cea6fdb3b6313f26baeeca5e658126b6c08a9b92ee5d035b191a8ccc8a81f
a84d7501dc83e504c0c96b83bf803dec957924fe6e9b2a2b329515487be8baeb1a1b33dc628735eb
f6b408f77ca58ef39434ce131210772cb8f5dfb6f222ed7357e26171732ac5866b8cb4b4f4368402
36cb7bdf8f173d7fcdcceefd9222c1b4659f8dbd5134f75415aa9f548c4c59d0c6daf4284a705560
ef0df302a1c13492bd7db8cec0b05f21bc3427cdfe584349d1e71fe2ba85bfa63e92c1e5df6490d2
ab0689dc2b13920eb2f590853320d437dcef6804846e93307a602a228ffb39d277c27c57f36f7b35
1061f440479f0471deadc9e1da2112f26b6db906bebdd07a20703805d8118eb57c1b374fff922f95
0bfb7f6aaa39cc553013b8aef0d17f9aedebad3c43843f575ab63880aae8b76df653dd8c654f15a7
a8f1d70d5a27e5b83f2c6de36f41a19b3e753409672aac34e76e6108812fad0a269e5522d01f6fdd
2a9c7dfd5f34c794c713d67271c1b13fc91ef39af8c029a387c8b0b7ea67e7a8f157f55a17a5de40
d5d4f675c2e366b244ded74915001e12cd697846879b99f252ab2b4c5c3902ac5d9aa4b0255ca28f
a9ff6e2a61b6ca6be87b6356f9842f49ffbd42d51ece2b3c76e7065401a9355b7ba3ae99043361a5
559488c86fe25c8f41d5023ac415363265b43b77db99aeb0bfe3424514e431fe82e31deb2b8479d7
94847c19c22ae1095253c9c277489483becabf26a187842e33663772492f6edc85ad2b461f429a5a
15a810ae81264dedf230fbe3eb91cb4504f0de415ece19f6ee5c8579e457c7e57e58e7bb77d2924b
8100290d384d36318d24920f400ece70ea8f296a5b113a8c19e23394b930c6e37fa821a547c832e2
8d668829e7f15585ed4012619e8ed526e9e5a3a53ac620d39a8dd7344f83d7e86e03205d47629755
23591afb6fc561cb595273d9becce616e109b203035ce2c9233d75e872cdf615886b449972d11126
79dcd38d202b5114612a48c238ef1cde33de4bb0cf7ca11f5e76da2db7350063c894ae2e76a9a481
294f250643ef2e4ee1299a16b1395ce9cbe977870c22606605e2cde0f18f2037c7e7e05217b8b3ff
8be0be439b486acacb39280c103d04fc84629c45752bc15c92b5d8a859dc021145c7726a34b4139b
e69cb55e218e9949c1d23f8a3a3591fb87498f8cb0bd4768f9a9a3009c9c41460cafd75166725c49
552291528d176bc7bc91eeedd9fee47c406e06d21a1a0d07576d530cafe3d10409319107c312d1da
e4e5c5480ddc382fd30f79c37808a5eefb840717b0aae81dfc5fa54d256dbcca5005da06ca34e7d6
081c04f2a7fa2ec2bf871c7434c4a35c346b031ad5818ba9467a708e4b1de0480fb92650a82094c2
276756d9ed38dd9eab8610777ddfe76e2209c897dcbba7fb5581c6ed85bfe7af2b34bd4a29f385ca
bde6994d324d8b38819114cbc12b022444184d5587f11f9140b1b4e15be0d949b97681d3c4f691b7
0bb4a437cc5a8c497515f59202689780b022938c77a3e364ac262ab808cc1c3c7f84acf902b25da6
63dfbf5cfb2d46b9aa8a185f4bb0448403cb4d41d390fc4a1d73d1d48d09ed522df76705e7ba5515
b3f50e7029dbfa3682ccfc42d892a0051ec6b772679a12dd0f312b2b2aba667ae0257ebe7149a084
16abbff379fbc18502287a051124aae760d1df454e42d2561b478c3a4d4d2cbe8ca2c756bb85d509
fc8acb7722efcad74e507bf73af433ec04e7954bb6cebfc1fba131ed9b0bd42fe6af2be21eab6993
c7c554d30c773a85e4bf000ee6f72f6ae1c8f078731daff9609563ef1aa9ae69eeeb65ea3ae4f882
594be7512aef6f6868edf55b7584c824b78cb55c664fea282ac3df86695ad1d0b6476b1f8058f05b
454bf691e9b767670b967048cc5177a48c357015b7386836313f72976783e3af6cf4ffaa56ad35ec
d393b02e8818fdc6a4503828758a3834d07c6f152e52fba6c8f3c1b82fa3a6a317b74c49096e089f
5f4814294c00b67eba96ed5c26fc40a576c89eea7bcd79e651565c462b67013195ab56ea9cd7df52
3379acbff3842b76833a5e3c0ecd0472877a15429c65ec99703b9eab9daa5f070e4f200604f1dc97
2de6f24af909892e21e79190f0b761c415752a836f4fc3d96925dfb5fb3137fd492f3e7b77f99108
dbd77740a56856cd5eb34e034ef7123ee1790e224c24d8b4da494bad33fb305b1427e3d4f9e98440
8c54826b6d4dee1811b0c0a7544365b106523003b5438ba7742993a80cf2f779a01c43366cc9ed13
3a779a4d05fa4a6ecf64f73a4406bc3bdd422d4c9ced1cd084d0a12682d8030c027ceffbd8d09dc0
5f394351248496138e4581ed6f1661a5214f8b5ece0fc928c06f52b5b7c7bdd2901e9eb5c036a241
bf0a497c3bcb6883b738df7f31b9573c16acfc213ec0f52ea01d7a07624a7eb703d34b0c0522a326
32c738cdffc2a4e6e7ae0532c8559a52a351e36c0d7c36a2bcaf7280c8974d597b7a79ab89aa4fe5
1edd84230021fec5280411fb1f8b4482979ab95848a45179b070b245c4f837e0ba14390067a5ff71
978249365c9117e413945386d999655f6e45d0adecd45299a23c58cdf197edb9c5dd177e7e8b29df
decb297a651a1152709a0ec10792ed7eead58022390fd8384b2c0f2fa262551d706b1745431e874f
70c49309721a524043775f8299cdce9eb5db7ddeeb5badf38037c02add5062f2003b4e8f9928093a
05e65d1256ac2e3a409fe98419e44dd6cd999aca1d33eef8b468a3c2f0dc1a85869f193c04ecbb5e
5f513bb706deafc680aa8b7c38742ca2bf427c28a13d4529380c876fd9d67d6196e02d506346aa59
2bd20286558314bb81abe36f14c1354d2130048ee6613dc9369c2c61f2541321b917d163097dbcf3
c583c22537df26ba86f6614a4370784957f913b934f0f78abeacd8e297d28349dd74d7ee96497049
0097d9fb82ad9815de147058c2f135324f83117310fae56dbd2782c5f72f80a88e4d8a7267e91f5e
b9ab6f55bcb615e0c89ba4acc3bf438f48b0e0d683acd409c2e3d13dfa65660f88a0947c2bcedfd1
80aad5ebbc950816428390da42c9d429175fd61f8cb3892e251b03322c8254feab23b90938aa380c
793c6db125eb35436a9e3cc5b1231c26010aa4275dc06b9cf0be6aea76857698aceeb79cdc79713d
314b9405fc808b8e2fa3a816cb2ee95ba056eec094c26b98c6a64c535b8ef4563029d46a01e01a31
3a58c7ac0e15555323d1d023c9fcd25ea1846c3b5e72c47f835b333299dfa816bb2670c65c41bc82
fe778cf49889d51ebda7e7e1b14428ac14734c0f2e5ad6fb38ff07576103e4cd39451c891b241ec1
4b13c722e557a0569753542925b7e5bdb59aae4eb2d3c99fe15a2de29b45e710da51991b61fc57a1
cd249d1e3748f49da75a8a6a931f3f262853453597434f487b94a96fd0db546f516aaa37a6ac1fa7
f4290a9b6c67573764a5c965cdc88b1931762811253e69129b6e30595b8087b5a6326acb535199d6
6e74bd1bbe79c11e0c7c2a428e8a4ce0c3f7c6cfd9ff93313240a0b00272c1913cbf74ef6e8bcefb
465d20672f3e3d09216459f8effa85ab3a1dc1c36a768f39ca1e960af90a44e86017c749429bef32
91f5ab8ea4c7d0a8fdeeab16b76181b6a888b59aa59b503937478552aad759dd506515a09f9b889f
e7b27d79170c9462fb97084451fe1b12e604fd998782221e137aba9188c77c67cad20cca619b52ad
9dc90af9b6b46c6b914ef7ccc553e53380515563f2e1f15d372fa2fc88d1db273152cc67ce400de8
3cccac06bb3653659a14fc2dc6110b4665d6aa9f07b4ca597aa777ec51a6870a83073d4c53cc90a3
544344a113abd66db3ddbdca62c1363ad071c2b594c0a04dc573aa22229f12ca229010e8799bfbfa
fd10b81070445d17eb76da319aaacbd74f1c5d060b10eb3cd28e2092ee37c3367e73c6a074e93d01
0b35ea3051e3bcc07ed927893f7e637c0b15ee325e151d1e7e92a16b20790504bbc00023cb2ef66a
ff7e36c39a867455dcc7554a09dcb4278d043788dad192c2d65b567503bdfe03ebc224459444d129
4cfc717f87d7c34ec33d4171b930ea9deafb70f343b67b8ec55434d612d603e7fc6076c0b74b2d98
7c345d21ca8c633b155f73bc2d7a54d0f88fb0c58ee3db485c6636ebe4d2d2b73c10e2ca68056f65
a58a6363faac99b6852a15a412f59a27dfb1167b119bae76596097fef67c4ca680d4fd2e8932ca94
6544015ec8b81047a41e5d223a3a7d140265ef8dca821e6471e84a34a6f389640f58d6bf12a143e0
684b934a6b78f9ef8b5074805d416ab5d9974ae391daf64e261b772c4aa938ab942aae9fa4fceb7f
e0d96857e32372d0e3c1adbe614dc0f978b1a4fd46a058e9beb263f44d9c66369db3f0c67124dee3
17978458a2b0fe2ec1d91833a09fea089e01ba9e239c35afdfc99241377a9b4a742a01ce1f53a57a
9af8d5f3ee6886224a067157fd795f13827fc0a52e2b46bfd2b4ebfd3961f480d0cb6ee082cc5590
d3dc5a84cd893881b2584766a8e62e4d7bee3493ee842f09ef8c67f3202aee3a7b710e59d0a1ae97
8fda91aa6f0b4743fc85a672582f50cd9616d229325a2a928363a8f46e093e2076301d8ac4703481
0cf96fa6f771842bf6b85f8f2c67c7941a26b22285f8758a0029484061ccc5ebfd60087ecaaaf97e
1d5a23385c0f91e29d321454565c768a94ef43f2204e0c701bbb1d52172303aa61587e8b8eb389d0
5ec858097e568aac97e7e9212559f51891af87a6318bfbd04256dd3888c781d6652ecde94f54b118
902f41938c551323c0d8784ba4f61282b4830f1b803048071d22d9fa294ba06df12c40a79465059d
59f003b5fa843f879bec9630cfc66cb51fe555192774768d1e66321a47d2e2f3dd3a32f620f28517
b6a30fffb889e2a80bfa8479a36db47327cf7a01ee1623d493a683b2baddcd3935e5cd74c03bc574
237a911e5099f0ecafab8cb04fdb4ffc67eb092d67c280297d8074c61c762edf019741434bf80dd3
e1b7c38b2513f3471efa6c5b7f9f436995c23c7b70375ea04b8034812bf3f7e059bbc78dbc1383b6
eec3708a57ec09bcdb35fc703f6735736b7a143b3832aaaa9c113ccbf99297be2cf2903c0098815a
e925e8b974ccbe30074bbe1a1aa1582cb7cecb4b5f466dc6ce10d56cd06eba8b38c1ecbc9b871396
7ca3e7bc7d969009918edf8256c263395d4410293fd4b4bd156f517114f1e5d74d1f4b71eeabad55
3907175007431a73f42ee6440c3563962fe164ff4790e6b7ef8d8502e05df725cc6b560b901077af
2eb9749a0e8b5d62af265b0797dfa520b04f85a0736ce2a0fdb4bddee04d682a01b7e5cfd24cf150
5a965466e3d4d1172951c88530f0f4f1dc3b7c708d74fcb855d369653e37588975453207c020dc42
75914b678afcb859d4958f50a0785402157967f40dad36974aa8f373e9147338f4ac65e7040003db
639ae376d971c97737c9182225f80e87f05bc3950ff181e5df0f6198684a5c21e9211f537c84c423
21845ce1ff0eb13011a72e7ad6525f71b4588b4038d7020db9ab053add7d8e7824af3b55b627f540
1a95c56d07de8bfb3026c4e2a06d87fdb35cdea17d8256f51dc8721ad6a51c4cfdacad1d0cb67183
076f6768becdb6a4b66e0bd2b2427c27f359b889f16df0e830a3b7da35a96984f4aa5e8a88cffd39
1e0b5acd5774aaa7611a9dc743693cb84551c658393aebd1e21e0405823cc088ac8380272b22cacf
f080e51fabbacb3c1e298395d648128d565c35ede1b463fe0f0326b2022cf47cc2599a8ca95a0b55
e686ee887fd20ed1aa62433aadddb4565168b986182a4b3df7f11d2a8050e1d04cfd74502b65b7d2
1bcc4bdd7ad863133f6a4d660230e47632e1839b55ffbb0b411f1a40ac3774cc937952b9b36f243a
06c80e688ed83925d3f1862834b8a58073008eee177bfb723ebcc5be1dcce258abe99b5d56dcf8b7
8f9de03cf7a12874ae075934f1c3e176f65066dc2d008281f84c027520b14ba2d7066d7384d2bf29
15d94b79bc8ee670d75ea83df7d83261aa0e62328eb793a4890a83ae9ba5be318a84c86ff91c0b7c
b089e66f70d8f13f2da6cecd99fe23d620f065f4be457ded704cb053aa2ecf1c140d5b3b50dc06a6
c3d32b36ace9bf43ceca9f9d6d8b0b96c47b21cf0db53cadd82370b7965346bb6a2a13edc1ed0a78
5dea44886667a880e69f059287da87167f1dde1b5b5f0a5e32183c83c8a259863fbc97e6f77ea84b
86c818c01cba07fe7a67aaeba410395ed7c19b2d55b9a704371c1dbdcd4efe21314a628f82c2ad56
b3fa8355e12220610a53df926bffdac7df0b326ee59068b28dfa542af14618c4034c75aab6f8c3b5
28a26d7623e1817fb0bbff821eef03bf6b686848588e51ed8627e5eaed665ee3fbd77ea27ec0f343
88ff2dbeaec017db16fea3314191b13408138902dd6b1f0a9778e469a4713e49e3dba625ac573078
da6da8bbc93f4f36834f5a8e1c4b4da8e2b2666b59a09f260d419d1eef7d33544a8b8695275841cb
d375aceb70492bf6722624692dcb7358a493e3ab358eb920e8f5ce8c9fea89cb251a65a576494578
09f7f4b5b98d8f933a524e1aa5481cc86e48f07dbd1c8a49aa3666fff4208fba36964806d8b6f556
ccd54e69841b2db3868097b3f2af0937f467895ba42792e9639bae8e6c38dba6ea4017fa2495aada
347fc7ec4e30c81e0aff31cda8ac1c284cd7b1ec397bf3f9d54a4ab923d8e6a2c95ab450daa40bcc
f2c102a0ef4f28641a92e15648eb11dc027d31f37733981c8f313cb7380ec73a705c4977e698955d
6bfd60d17b57d33285ac95df47fccd36e3344c63f2753d6dc264feabdf206d5c09fc99cf6ecf2730
8029bb802ac105cbf1a690f19aff9561ec683d8b297cd4e32d8becef6d0711b7735a7437763671fb
b3a633f51372b1e0e4a54925aea47abd549b06324f9ce12832f5aa1f069c83ab1eb6f6d271c6d71b
22c8e1549c764ebafc9af3140591ed7d564920e69c0f26c5ea870c3155bbb1a593d86958878b9022
1fcc74169d3689f54c06335437c7c9ffe434f6bfe02e3fa600d66243afc6fa536720d4fd406c784f
bc2ffc17fb72761a28ba314a74faa034fba4ecfb208973697e68c2b44216c7fdf7999e67abad3749
e8c5d7cb4039a2cec7670879672726b54e6fffd37d088e1656a9d68ed5f1fcb4acb02aebd51e2080
bec9e57cf052b0a9ccc3c0894cd2e686792e9349a045330fc404d4d7771a506a3594942e6be80dee
df2784d82e6524db832fd76d74d8a1a825caecbfc3abe8e50f227312d17dd320768b30976d37914a
e9a8bad35851d48eb275ff4260400079f9602b9a40bf44b995ec9bcbf61b1599c5a45191e8df5df3
819908248876cd2860fcb44122b197c3d0465293f3fba8adbc23d73196641dcaddc70a951e66d5c9
6f5e59a467e8beb8c61cb89b6d6b8b1904c05c038c2fed3f372ddddd18eafc9ed818cb58b3ef7600
ab7c5c99d15869c7e82d09000f48f72b4e7f2ee0882d4fa16a41b42dad4fac3b944f1ebef6f0614a
33e6aedc14e5edd7cd637724672cfe57ee9c37eeebc75fc0e6fc7cbeab146a069ddd4a19f7eca811
92235a927f1b37c1a050295802fa235287010437f0f72f1a77b0c278ed87b3091fd2a9e74611c34e
2cfcbbd53a6be790218b9cf4ddad5c55024ed59e65e539c0e444eb640738601971e0908aa63636d4
39f1cc1336c14f303d4be917fb9b9113fd1a4482f130606d614085e0c81fcd23270f6d509d3c0625
8e7c4b6e1c17659accdb8f7002707183ebe32a11e845c04ace7704e9460d0d554746c16a6ea32b9c
aef388bacec095dc5b032e2d9e9e78610f8e9dc9c948085c5ebf4c680e3996446d790c219e048462
ad1b0aae2666b3d520efb879c0b670a3c556709fe067273f27e1e8d65cfca06c489c38e143cdfd12
6c46c0b81d0cd9129ed46ed2bc3f70e2fa571232423a13829d480e6e666d627348d01e30889365d4
db6f9f56510e0011703a4bb43ddbddbf183f1d8c67e2442395e39230b582b633e8cd309ccd4d9f08
f411ba51963933c9b53eb5aadf11ac9864da2fe231b8d9a9c66450c8a34bffc1628930967a6e278b
83a19c1a05c3960b6859b85971624fdbe42c10e22d79b70b56ff0307676b1f3abd17232fd8e5e048
4506520340601338ddd106059b3e7d9662307d697c8bb710295ef65801cb8dd61ca7e3a06ad4cd8e
7453fce5cf462dfddd8c96f511eabfd23cea5d54d143e412ae049b38ccebd031ca373d80d108ca6a
4f871e4c1a83682f5cae1a942c5ea9f6a12d6c20109ca5a888f401598eec240de587b91b6ffb11c2
3579f7e97b9628efc5850de5aa2f61664ef0550ee6e75924ad0e19538c1b18077dfa59909f07531a
5e86828354b13cab9b5944aa033670d2c4735068ba6b18c6ee29b35839f98a51fb21b4ee5d0b7320
f7c259670b7e80595c312fcb74ea3f1845dfe83721460d6d8f6d0a28e9635aa275150a0095e6b35d
c062ac9794b3ad372ac190eb842e3e07de3972d7d457f8bdaf3a32c8a8f16459d813658519998b51
6c099a07b48b58c1000c227fb8ad4c305a6543b4621292ebf8a9255ea6936bde368034901737b868
1e44701f8a44a726b8a4c77f14d9d51445284913cab1b81468e2987ddff39d4123c5184e1641c4fa
b80829ffae8f371f4a27872663eb10aef5a2fa205beecf73c89e70c2632e0736edef50703d0578b6
f2b1aa628ba0142cde69fea5bb952b35186d67fe6d1241b0840ce7af5498585f96d8d299d7fca054
fc0a3b244233fea912fdf96df6fe1f506785c6c165d534375da1a53eca709cbbc671b5d860dd1414
3bc7c5256183834ae33e3a277bf52886a3acefd2d7c4ca4e7f535d9fb7cb5083f7a0d1948321a884
dff35ee4dc607ca0594b981728f4cc41cebfab714e58ab76856cbd3fba57005117676e89fd2d0fe6
e1a6dc2d2eb62beccc02e94164269f83d88b0307f2d5b212e805c8f45079077938c378ee42beee2e
38fdc94e1b5c7e3797d92330355bce2be4dd4c0f30b84c61062710b8571204f438b31e09ac611cb9
35a7944843dd0b9ed3c519123f6a74f5ea51274b5a2690714e6543cc6dd278b645b2cd0573abaa32
f3b4bf84239f01e777fe1a86de9fa53e1a0f72cd6fa3a53b33676180370a4d37e77b24af5c96ee1e
d42a2d991f1a8d1cb6d024c33cf1763c8d380741f1799fb5702f6ec2f4f398bdd1ab1a9cf1dc7da5
d3917dbaa6b7cca816deb5f2a61c787a7abaea58f531b7e04fb1e5996c1ac1afcf27b2623224e2d7
06e66e56378eb2ef20d9dd89d5e106cddd536ec65951023a5dd61b82963839969d4e57e2d3cef7c9
fbfe22a386acf3f869a74e2e2cb25d7fc80fb48c5cdffdfd13a43e02efc55b2c4400663a7bcc843f
339df6d43eb349d1be39adcd83b0a5813926147e643c1d8edf680b4b4a01707bbf67283f85d1ea3f
50160e43726ff6128bde8ae7ae439ec249e04cb35a09de3b4b764ee1b88cfef284b3d7acc2eff645
80d6386a9572787c4012de088c4a74f3be339c298481dee4e7a09ef2d72619fbe68238bbce513517
233504ae7993b5e66fcbb84c3aa60dde7436e77131177038980487b3c21b4ab965e6e3f428e29e0b
036d53fc220d3f3672802c9b03bccafeca7cbc011a29f871350da069d71411d1a7f571b779d4043d
ace6159f3ea2a97b9aafb8a95cfb91db4435703d3e8b9b68c925f0bf6c207f132266a3d185375096
848ab644e554536a30bd352af970a308de300795f9321b20014f2481e3b58d30a1609d1a218b5333
fc8867a1b64ac25a193068aa4ea9e76041f80b37b18ef0fdb6293252d94831cc36ca76ecafbaed8d
d8ccfcd989222e7deb9b69c2f5e717cb0d83217ecc016d5e886ca235e90b2ac8eca2a65b4f328599
178db15f7bfc731816ac23e8ad1f121145dfaac013a0231673d66f98471fc9dab9e14e0b853e22fb
e1b6b7b8c48cc7c1dcf75d05510463848a96aae895f059665cc2989c239200af79cd8cf8937cc70a
ab061d5948726452d152242dd1dd964ea253d456cb240e29d72bebf022da047e96b130a152199d65
6239d52c845a05af1b297083e5ff1b2477b2c6cee767df71f60883748623e8ac638f4c6a19f0638e
1c3648a20f6f4da6fe2145a01bd7c94fac4d089b4a97137b3e27ff01b4c4f52562bac8debc17ddd4
e916856eb77f540805458d4fa5c2582406d9daf596c0e1d274b01e7b85182ae4839a83f25aac678e
12388d8556bf2ac317301cf7bd169075ddf4017987eba063e0d1f913120a485416ff601e8c704168
504a0541b89073cad33a87cea1b269b89f19d73ed64813a822d77b772f069323d332069c71e66a7f
7e4d7ba569d9cdb39def1adf61dedebaaa44611ab5a2ca1324c117eae399b1f550d555e281bf903c
c0e21bc1ead41f948f8a0c60f699fbdf0f06f1c81260cf1de615cbbe07c87c66c8db7cf6b00b0984
b9c935a6118c4bf1c46740cb3c7b515486199f947863c32b389518e513ac22c303f9c4f4ef77c15e
e1a8c69f546de8db27eb20a5b40f782a1b8064ce858941bd43df04f277c5a163d49e14f2d89596e5
7e62f4f668ec4a8b49bc3cba88c2b1767deadac8cbf8e3af3ef1874edaeb906042affba32ff0e01b
bd4fcfd35b46d827f6c3aa0cbcaef48c67d02e28a8fe1785a01c0064d205df5f528f4d6cbb139dfb
30ceeb42ef5305dcdc4d1995247287a466df9a570351fd2729cd4a3a7a05097a2b9736b0766bb091
45eb653b8573aa53fdedea0376a858a0ce0bce4813791df206882df7d5547a4496db6da6c074e4ab
02edfad98e584e4598e889f5ec9ce697cd4115c64833168dcc1fe4a7ad7cb4404eb451e3390d54e8
2e1d37d1ea9d3ea947b985de33289780661f419e9b5af0494f623c8bf3bacd873f4942eef3914660
4be3309b586df75379175fb365cf7f5ee9b0252f06b3d51903359314c65370b8f389fa63a0ebea13
6a371e694310dbb186a12623131aad815535de6b4b901349169d724cd7437e7653f109aea2c5098d
378093cc2ebbccd6c22e8805d38557623b838fe753313771bc4fcac118260baf1c77b447d014eafd
48e2a9662a70ca04a857faa994a516efc1f72319ab6034aa46accf42ca18e307af52cb27d366323e
57291dd433e214de4af8c4db25ecc08ceff98310748b495a8ad3e072e0e40ba7918ba5e5cae1f496
666d6936db47007ee794f10e5f06f21856a18f9b02716dd79545c144ef8c73b417cf2a32aecb3357
42f9eef1f829606b6b5c80a611fcde43137afdc362947e4c0da2ffc3ab84366192fe4cadb5933cab
135aa8b26ab2
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 1345 V810 1 0x0 180 V811 1 0x0 175 V812 1 0x0 860 V813 1 0x0 200 V814 1 0x0 400 V820 1 0x0 420 V821 1 0x0 440 V822 1"

// Rung VGR_Copy_State#2
// Offset 51
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1"

// Rung MPO_Copy_State#2
// Offset 31
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1"

// Rung SLD_Copy_State#2
// Offset 21
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
#BEGIN FMT_COMMENT 
"Deadband for X position difference"
#END

STR ST1
DEADBAND D140 5 D1

// Rung HBW_Move_XZ#10
// Offset 48
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#11
// Offset 63
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D1 0
OUT Y50

// Rung HBW_Move_XZ#12
// Offset 69
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D1 0
OUT Y51

// Rung HBW_Move_XZ#13
// Offset 75
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"Deadband for Z position difference"
#END

STR ST1
DEADBAND D142 5 D2

// Rung HBW_Move_XZ#15
// Offset 89
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V120

// Rung HBW_Move_XZ#16
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D2 0
OUT Y4

// Rung HBW_Move_XZ#17
// Offset 110
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D2 0
OUT Y5

// Rung HBW_Move_XZ#18
// Offset 116
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D1 -40
ANDLE D1 40
ANDGE D2 -40
ANDLE D2 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#19
// Offset 135
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5310 V140
POPBOOL
DUPBOOL
ANDE V105 3
MOVE 2990 V140
POPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181

// Rung HBW_Program#9
// Offset 53
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
DUPBOOL
ANDE V106 3
MOVE 3240 V142
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#10
// Offset 85
#BEGIN FMT_COMMENT 
"Task Send<br>Validate X and Y input are not 0 (unselected)"
#END

STR C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S7
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#11
// Offset 109
#BEGIN FMT_COMMENT 
"Task Recieve<br>Validate X and Y input are not 0 (unselected)"
#END

STR C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S1
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#12
// Offset 133
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#13
// Offset 135
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#14
// Offset 137
#BEGIN FMT_COMMENT 
"Task Send - Move<br>Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#15
// Offset 139
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#16
// Offset 142
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#17
// Offset 147
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 150
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 153
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 155
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 157
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 160
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 166
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 169
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 171
#BEGIN FMT_COMMENT 
"Task Send - Move<br>Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 173
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 176
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 100 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 181
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 186
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 189
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 192
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 194
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 196
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 199
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 205
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S1

// Rung HBW_Program#36
// Offset 208
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 210
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#38
// Offset 212
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#39
// Offset 214
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#40
// Offset 217
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#41
// Offset 219
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#42
// Offset 221
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#43
// Offset 224
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#44
// Offset 239
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#45
// Offset 241
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#46
// Offset 244
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#47
// Offset 259
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#48
// Offset 262
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#49
// Offset 265
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#50
// Offset 280
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#51
// Offset 283
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#52
// Offset 285
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#53
// Offset 300
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#54
// Offset 302
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#55
// Offset 304
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#56
// Offset 306
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 308
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#58
// Offset 310
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#59
// Offset 313
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#60
// Offset 316
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 100 MHR120 1"

// Rung HBW_Program#61
// Offset 332
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#62
// Offset 335
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#63
// Offset 352
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#64
// Offset 368
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#65
// Offset 385
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#66
// Offset 401
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#67
// Offset 405
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#68
// Offset 407
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#69
// Offset 409
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#70
// Offset 412
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#71
// Offset 416
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#72
// Offset 419
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#8
// Offset 56
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#9
// Offset 73
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#10
// Offset 77
SG VGR_Program.S2

// Rung VGR_Program#11
// Offset 79
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 87
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S2

// Rung VGR_Program#13
// Offset 89
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#14
// Offset 91
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#15
// Offset 93
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#16
// Offset 95
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#17
// Offset 97
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S7

// Rung VGR_Program#18
// Offset 99
SG VGR_Program.S3

// Rung VGR_Program#19
// Offset 101
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 109
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 111
SG VGR_Program.S4

// Rung VGR_Program#22
// Offset 113
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 121
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#24
// Offset 123
SG VGR_Program.S5

// Rung VGR_Program#25
// Offset 125
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#26
// Offset 133
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#27
// Offset 135
SG VGR_Program.S6

// Rung VGR_Program#28
// Offset 137
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#29
// Offset 145
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#30
// Offset 147
SG VGR_Program.S7

// Rung VGR_Program#31
// Offset 149
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#32
// Offset 157
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#33
// Offset 172
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#34
// Offset 175
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#35
// Offset 177
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#36
// Offset 192
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#37
// Offset 194
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#38
// Offset 197
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#39
// Offset 212
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#40
// Offset 214
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 217
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#42
// Offset 219
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#43
// Offset 221
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#44
// Offset 223
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#45
// Offset 225
STRN C500
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#19
// Offset 56
STR Y20
AND X17
RST Y20

// Rung MPO_Program#20
// Offset 59
STRND Y20
AND X17
RST Y17

// Rung MPO_Program#21
// Offset 63
STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#22
// Offset 69
STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#23
// Offset 73
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 75
SG MPO_Program.S2

// Rung MPO_Program#25
// Offset 77
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#26
// Offset 85
STR X17
SET Y17

// Rung MPO_Program#27
// Offset 87
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#28
// Offset 90
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#29
// Offset 93
STR X18
RST Y17

// Rung MPO_Program#30
// Offset 95
STR X18
RST Y20

// Rung MPO_Program#31
// Offset 97
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 99
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#33
// Offset 101
SG MPO_Program.S3

// Rung MPO_Program#34
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#35
// Offset 111
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#36
// Offset 129
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#37
// Offset 132
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#38
// Offset 137
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#39
// Offset 143
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#40
// Offset 147
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#41
// Offset 149
SG MPO_Program.S4

// Rung MPO_Program#42
// Offset 151
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#43
// Offset 159
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#44
// Offset 176
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#45
// Offset 181
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#46
// Offset 187
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#47
// Offset 191
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 193
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 195
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 203
STRN X15
AND C800
OUT Y45

// Rung MPO_Program#51
// Offset 206
STRPD X15
OFFDTMR T103 3000 Y43

// Rung MPO_Program#52
// Offset 211
STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#53
// Offset 216
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 218
SG MPO_Program.S6

// Rung MPO_Program#55
// Offset 220
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 228
STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#57
// Offset 231
STRPD X13
SET Y18

// Rung MPO_Program#58
// Offset 234
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#59
// Offset 239
STRPD X13
SET Y47

// Rung MPO_Program#60
// Offset 242
STRPD X14
RST Y47

// Rung MPO_Program#61
// Offset 245
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#62
// Offset 247
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 249
NOP

// Rung MPO_Program#64
// Offset 250
SG MPO_Program.S7

// Rung MPO_Program#65
// Offset 252
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#66
// Offset 260
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#67
// Offset 265
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#68
// Offset 270
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#69
// Offset 275
STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#70
// Offset 292
STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#71
// Offset 309
STRN C801
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command."
#END

STR C1610
JMP SLD_Program.S2

// Rung SLD_Program#8
// Offset 28
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#9
// Offset 30
#BEGIN FMT_COMMENT 
"Check White temp storage status"
#END

NOP

// Rung SLD_Program#10
// Offset 31
#BEGIN FMT_COMMENT 
"Check Red temp storage status"
#END

NOP

// Rung SLD_Program#11
// Offset 32
#BEGIN FMT_COMMENT 
"Check Blue temp storage status"
#END

NOP

// Rung SLD_Program#12
// Offset 33
SG SLD_Program.S10

// Rung SLD_Program#13
// Offset 35
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#14
// Offset 43
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#15
// Offset 45
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#16
// Offset 47
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#18
// Offset 51
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#19
// Offset 53
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#20
// Offset 58
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#21
// Offset 60
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#22
// Offset 62
#BEGIN FMT_COMMENT 
"Check White temp storage status"
#END

NOP

// Rung SLD_Program#23
// Offset 63
#BEGIN FMT_COMMENT 
"Check Red temp storage status"
#END

NOP

// Rung SLD_Program#24
// Offset 64
#BEGIN FMT_COMMENT 
"Check Blue temp storage status"
#END

NOP

// Rung SLD_Program#25
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#26
// Offset 67
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#27
// Offset 75
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#28
// Offset 81
#BEGIN FMT_COMMENT 
"This timer gives a delay for the color detection to get "
"correct color."
#END

STRND T200.Timing
OFFDTMR T201 2000 C1601

// Rung SLD_Program#29
// Offset 86
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T201.Timing
JMP SLD_Program.S3

// Rung SLD_Program#30
// Offset 89
#BEGIN FMT_COMMENT 
"Check W temp storage status"
#END

NOP

// Rung SLD_Program#31
// Offset 90
#BEGIN FMT_COMMENT 
"Check R temp storage status"
#END

NOP

// Rung SLD_Program#32
// Offset 91
#BEGIN FMT_COMMENT 
"Check B temp storage status"
#END

NOP

// Rung SLD_Program#33
// Offset 92
SG SLD_Program.S3

// Rung SLD_Program#34
// Offset 94
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#35
// Offset 102
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#36
// Offset 107
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3200 0x1 10000 8000 C1602

// Rung SLD_Program#37
// Offset 112
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3200 0x1 20000 18000 C1619

// Rung SLD_Program#38
// Offset 117
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3200 0x1 24500 21000 C1620

// Rung SLD_Program#39
// Offset 122
#BEGIN FMT_COMMENT 
"Increment W counter when W is in color detection range."
#END

STRPD C1602
INC V3202

// Rung SLD_Program#40
// Offset 125
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 3, jump to S4."
#END

STR C1602
ANDLT V3202 3
JMP SLD_Program.S4

// Rung SLD_Program#41
// Offset 131
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 3, jump to S5."
#END

STR C1619
ANDLT V3203 3
JMP SLD_Program.S5

// Rung SLD_Program#42
// Offset 137
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 3, jump to S6."
#END

STR C1620
ANDLT V3204 3
JMP SLD_Program.S6

// Rung SLD_Program#43
// Offset 143
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#44
// Offset 150
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#45
// Offset 157
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#46
// Offset 164
#BEGIN FMT_COMMENT 
"Check W temp storage status"
#END

NOP

// Rung SLD_Program#47
// Offset 165
#BEGIN FMT_COMMENT 
"Check R temp storage status"
#END

NOP

// Rung SLD_Program#48
// Offset 166
#BEGIN FMT_COMMENT 
"Check B temp storage status"
#END

NOP

// Rung SLD_Program#49
// Offset 167
SG SLD_Program.S4

// Rung SLD_Program#50
// Offset 169
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br> "
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#51
// Offset 177
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#52
// Offset 181
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#53
// Offset 183
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#54
// Offset 188
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#55
// Offset 190
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#56
// Offset 195
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#57
// Offset 197
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#58
// Offset 200
#BEGIN FMT_COMMENT 
"Check W temp storage status"
#END

NOP

// Rung SLD_Program#59
// Offset 201
#BEGIN FMT_COMMENT 
"Check R temp storage status"
#END

NOP

// Rung SLD_Program#60
// Offset 202
#BEGIN FMT_COMMENT 
"Check B temp storage status"
#END

NOP

// Rung SLD_Program#61
// Offset 203
SG SLD_Program.S5

// Rung SLD_Program#62
// Offset 205
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#63
// Offset 213
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#64
// Offset 217
STRN C1606
OUT Y30

// Rung SLD_Program#65
// Offset 219
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#66
// Offset 224
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#67
// Offset 226
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br> "
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#68
// Offset 231
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#69
// Offset 233
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br> "
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#70
// Offset 236
NOP

// Rung SLD_Program#71
// Offset 237
NOP

// Rung SLD_Program#72
// Offset 238
SG SLD_Program.S6

// Rung SLD_Program#73
// Offset 240
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br> "
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#74
// Offset 248
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#75
// Offset 252
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#76
// Offset 254
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br> "
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#77
// Offset 259
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#78
// Offset 261
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
ONDTMR T210 5000 C1613

// Rung SLD_Program#79
// Offset 266
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#80
// Offset 268
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br> "
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#81
// Offset 271
NOP

// Rung SLD_Program#82
// Offset 272
NOP

// Rung SLD_Program#83
// Offset 273
NOP

// Rung SLD_Program#84
// Offset 274
NOP

// Rung SLD_Program#85
// Offset 275
SG SLD_Program.S7

// Rung SLD_Program#86
// Offset 277
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#87
// Offset 285
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 10000 C1630

// Rung SLD_Program#88
// Offset 289
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#89
// Offset 291
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"T3","T_HBW_S6","",""
#END

