// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\hunte\Documents\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
d0669dac5e4492de303bb5cbfff6a30dd07bf079ac523a654b20e556f3cafc616b3c49dcc4ff74ce
0bb9af9e4870e2498107e9513542e347b02ec54c7efa5d874040c707a5a6bdb6d4d0b51eb37ac7c6
a4a1f9bd579403926911c1bf972fb827eac936a542d6ac6059447e4490fa5e18f252e7c656e54353
ae3803ad6de31e05f5c4a0cbc19ff3add3f4fbd6d4097bb6e0333e37f1c4f304887290bfd027dbf3
4bba98fcb9f57bc660ce53e4f7c0feba77819045e891cbba22f3107f4b936904ff43943f49f41863
771f79c10eb297fcaacc3336aeb264579c5de179c78044677f23f67edc818a95d56074ed86156d88
fd21f3e0f7d5eac92233f827a25a93d756d1ddf866dde21930c3ef5505c6e0677f9685c2a3bd5878
99ead6abb9d457e5ea163d8306e3a40980f1469d914932af785a1dc86f74f29f18cb74defb1dfe0a
f5f789b16f011e3a242caa6825e2edf99ff0ad1582920752725f238ad167c511f5c810b9118d0449
d16533cc0d6438c327e50fb6e0cf8a34207f8dec20b4fe26d1d66ddeaa38edeb9a223fe092470582
76129f1c102e7e765f57671d70b3271840ff278c87b0ad96c22b450fec5e3467d36fc8032e794a16
e8053c1608a473c080e9dbb0e64017b4183f9fc756befd3aef6c08303fa7c9961e83ddab4c6e7f2e
7b320bb71191a6c380ac00bb6d300ceb90493ba0e8038e1b14216295715187fab5092cc355656991
7a40827a84411ab6915fea091fa04f72da5ffba2f2232276357db937c0159aded451f146fb7b7dfb
39734fa74ba21f3b2f50c052a36c73b65d2d2046850343aae0c8efdafbc069c9997d181058f4c1bd
d8458781cf701784e9052e5b3049980fd78e06cc46236089821315f38390f91c950abdd608717de6
3a14572381278735ade243851fab7b9d8f233784f18c4ecfffb778ca168bef322051192847040b00
ebb129185bb01a5a7aae41a6b93e9806eb7c40263d1b8efec4a8b220eeaf88193650b5f1a9278206
7b944cb3003a1c9984673a9ab5e59ceaa0b2ea4d08ec48dd59902b796b5f145aa60fc0022620c589
57ca517f5ebf205286138cd7d845a1d1a1d3a9a6252b853092fb49ab709c14ee45e995e7ea39a542
e1149cf4f209f50a70e146a37b0bf2e0bf3ecd3f7ae014b92506ed054ddf938543cca1243c904c4a
742294ae808daccbb4dd824c36637de922b52795779c6de13baf7f5de516eb226299df7912eab191
745658c7012ede8b7eafe16c39c20e46f8fb8449cf0f9fdd58184d85c769d68691b7b050869f64d4
9ebb4684972718f037021f9dd62ceaaf7e54992a5af6ea0ebcc4dbfabdba37fb5c0eea03fbbcf1d8
e2fb144b4108aa7131986ea22a9c10b3d93dba309e183d5aada2a83b7e9d02f38f5abe47c21b236b
bf216a1cf439b48d52fee6488d8b9c1211f18b91f9cbba0ccd0a226077c5201f1d52e8653ffc9744
dc2d6d12551698d8300d53514ca940f8d6359ab6471b300f5486697db7665c4fb23dfe51f89c77af
682e1a6b97d24e318ac307c324bc918c5d65dcba7254c31aef2e3be578d2e4d7ce9051fa55be9616
66ebc640e77438c3a9170d1434a0f4798517a95aecef6810317027249d490efbac014b0e9625acef
c8221453820912704cb6826ea80b2e38f4631dd972764753109fb06dd2123df3d2eb362a4b087048
8ca4327a1d9d226e86942f3c4b124fd0e86590184deba1c82a5ef646f91ed23e7b787de9a720950d
1481909e2c038b4fb63f5fda12ea3e433d9f2ba628b2dada6535bdd97631cabe3cde624bd58b1025
1c27679e919b8351ebdf831c7ef8d30cb09907a1380d340f4fb6b9cf70687a6f3bb1140c52d2801e
b3ba79e44d81d196e288ada568e49808883fdb59ed2cf36915e3d10419914b83f649f3fe28aaf114
546fed0354c97a137c1e4dc78d6b0452ab361a9da51001c81c638d91fe6881e56d8401e069d8238c
8e20eee1f7e1938b646625843a727b0cde75c3c81535d31a3c42bd5e0d5ee1bc6196522aa5aaf2b6
545c459981a81d782ae888c55819c5ebd252c13388a2f8e72bd677e3e189c0e5f4401e878b99fdd2
66b03fcc7fc002b6bb8a605b4f77f4180d450e87d99aa276aaa5f0d44d52dbfbf980a33745cea759
905221891982b8aa7bb483b6d9fffce6b32520fcd0b7a7f2cf6e28696f68f73c4bb6e3413c3a716d
5332faceff5d6aa7e3c05b46c4e1c6ca58190761d8d2829a2c0419307c33c4c728f855bab8797436
61758e7aba3f47ff31dd777bf51608aeed0c6523113c4c3671475abf060f0537700bf60a5595d3f5
9a067c23093c205ce1f5b9f55c6e113204970f4e847091963f127dcd81a43c66804f3ddf6400595d
bc8d975914932224be85efbef2d34782fd3df2ca210dd44e14a4df1cbd3e17384985b35672d31c6e
0cc411eb52a17989f0c6e7a2b2dbfc9e504daf9d1d9fab1184fa7a669dd9a3d09fea006dbf4ff406
055365b7a40ff4d9ac54a667f21f67f00baa74651af96a287bbda670a2b87682eeb11a3c212cdf25
6f2db9c0f46e0653514a6ebd9d7431a4c4cbc8716ba6c8d93b9208cd22eb8696397f493c58f4d005
bd525870ef595409c7aca380b9a10cd7c95d1eff96e8dbd6a5df98ae840a5e966d8178c3e0e3a71b
e8a9ba11a24ecbff4b485d42b24e10fdcdfa3a80ab96a642c77967beeff213bbf56b47cbd34486c5
8544bcecd8fdb41bcd877e76a989fe13ed85756dd34f7f6b60ddeb6453308007a3f1c0eb8393e6cd
0a7bab67ffa1fb8681bef357b4535feb01aece6c373ad14840c324caf20b3ed69f79018036483d95
5c13e0d2aca6d2fbf8d2879fab2c4f5693cb00c304145f41dd4bfc6fa815bf4a014777b60bac30bc
0e6d43c03cd5313415b736b62780836e0ecefaaff9a6970225960c372030c64fe05f500a75c3af31
14cf44826eb57b68585bcaf1f41aa924e8b3ecfff65c86a3fb55552cc0c3e06d59f510b31640fe0e
12b5f7a263558db023c334b96d8b553b6274d1ade651390f95c1b90e0f0b8c30bc87cedbd0e828b0
7d03fc8eb1d67fd85a61c2ed891afac3d5c7b3eff41395f1bd8ae715f984c0499930b4fd57c7c8ab
9f0f64ba447d361c2183b183f0acad2105c00a691112f385b941ec4662423afd208b451d33473b17
50b4f4b02b958fdf9431dfa0feba5e2401f4f8b294f2c149ea30c2f20eb233af8b1739fec555f64d
12cc4aaf776e92da55e4c0a17d0433e3acdb3ec5caeafbc1778aa5aa3d19d657336d954ae1bfba7f
a209c79f51927d687da1e51306ddecb25c5e4613377961eb82602d3010f5387390cb2de29369a2fb
5448c1fb1e948f74831d6789a26480d61ca98136a81471396742757f18fa034bb8b0c9e41f8ead31
8324cc9d485ffabd0b94f282e05503e6a6878e508c692a1f223934389aa22b57fc3a92f8844ac874
0619b984ff5ccfed3ca60b4cfa65fb0bc727ee34bb18736d3771bbdf017bf632354844d6a49eebae
3fe4c4310b53ee3626c4bf4cece907d713ccd2e9c268eca280f9e6d3ddb0b43660fbc0aee6369606
c3848ca3971834a1024b33ec556d24b7f9dba28762c6e4e299083e75de879ccab4df2efa2d919c15
fb86288afea0bffd3c62c75fe5e0ae4975fb42545a0b215e602b42ec942a871a4a7c4c604d0f0979
8b2a6fbb3ba70625b2a0238cc4d294bec1ffc8e085352e425d1114381b53dfa4f18301b962902bef
1e0d20a3d1c69963d1b910101e572da6fc9dda338e94dd4ee3f400aa7ff76dddc093d4861930ef3b
81412817d912a29575bc87a94474b56a744f6a408795adf8d7d29c764ac47d757b56da6bb3721be5
cced1a5e14cc8be3cc0becd99b9024d261d89d44292dafb923e881c91939a1d0917954247e574abd
00a2d688ad879420d6656287b7dade5c36ecd4bdf52565f42b444c6357b09c55f7fdbdf9ebd13801
71e62d2841c65ef3e41f6550d842f25341a5c52f30b86c5622b15a5ec30373e343c8b6985918ffed
f941fef5f0512d259648ad6a18fd57b29c3e91252042c14b7d137e42cc202d5788c9701f2252c5ee
e112be268b9c78d2732c11f760f0afc19ad2952f03e2f9afd16a1dd27e066a7b874cafb4f4f28272
1355df071d7bff365308eb12d3ff0685455aac5ca848d917e40a9a3cb9212f1703095400515a44c0
8aac185bef0516d8c5719c34f2835d250f410342eb1a4f3de8671f957e8a07d98a3d5f2aedfba2ef
aaa88b022d867f1b0580c1ec04413813ca756675c382adf2b4d75a9ac6f5bbae12e85351c73d40ba
9b410dc384096de72e738b2df4d2b2ec51cc8c4f49b94abb658fb81698d33f386f3c1414c5cc28ba
657f043abeed0b8a4a47722a011857940f24f07eef3788410e19730f4e1a440889c98c9ea4ad3781
57e40d48a54eb26cab0af834a7fc491790a9f029b10e349399e7e42dc7a38359b1d1a7cad8475ea1
90c407f4b3b1191ee43b82bab3318751e2535660f0e3b31f778f015b2f78728caac9573c941a5732
1f3df6eb115c99beab354ee1ce591c9b854b483065b345d69a24f1af6622e03ff5f43306412b2ea0
e6079c58464073d664d871f34eb64302ab8697c9d3ede0e4b1e30b14881e1ddab95e749d3b0de79a
e16dc97fb426b5eef14129f86567e400b9fb6290a5e01a98ece76f9cd6a5bc76a7c892f5a4608a1c
d7ccf9e51dc17d5cfec6a049d55fcc8b95a9c310ccc0ca8ceae100fcccc7c42ee85bf4bfa61cd593
4eeb2546e5ac0f626840028a96963b9c0e1095f37f794fda7aa5adfbba98f1aad7d49a4030565bf5
3a2a49c1aa3f9f4088b0d4301d7a1e8a8c6eb37ce7475c7ef23514dc04c015fde67264d2a5690fba
4e061f6388ce267dd298b479e88fa1220a72cdb8fd90881b0f3575a8a69094f17a56b45cff92fcf6
3619f232abe3d6e7d47a55e412f59a27ff91335e30ba8f5768d1254c46ccfc1631052cff58e13967
95b4f9a63040ecfb18a2e09f8787c4edfb9c177532fa662c39a1017fecbdc71a7126a8c12c9f7dde
5efd25fcde850d233a40e37dcac97b4e0569a24de37a06477dc428f88f2b68b61811cadf857deb7e
8158e8cf7bcb1ab88b6e90fd995813f9a0cb06e040db02614d0684560e22c49102b01a97f1b357c7
fa788c2a7efc4c19048de3b12240b1e565bd5d65a3f2e1f63370fc1ab6ad2fde4fa76872d2d5a5dd
10cbc4de979e14beaf82ae003f5cd938aa697ee9a53e35c3edd00859c6e277c3f3c85dd3b3fd64a1
e2ea6abc3571c07a89637c5dabe5ad25d489ea7e1a52bf89f127febc1d56038dee51d056bd274392
9890ae5f94484614795c4c3e9eba7e19abaadeb5cbf90e833602e47c73ec9d1380c9614ac52b29a1
81f5c68abc59acd5dbb5ee2e8c204ccabff258b676fc706cd872da0a0c851aa6a06aeb60957370a1
f1970629fc7b8b56133b996b76487d7b544e28d4ede187d7c8af82676ae36ded753ec408049af1bb
f94182c97b9035e16f10cceba3d844bc32ada9fdbb4a03c080b28933ce65d1c774c82a0ea0bb7e57
de6977f47e90e8987bdad1a04614f08094c8d4232db68ebece3bdbc4aa4141e800c5642a1979c7cb
634afb05a9026254d366129f9d916087c51d2f10056ba0ac2900a12231119014c49d1cf1f3c9cb4c
e7f7950fa9e60080dabdbfabc302db1c4ea613688f7742b7f0c502e7abbd3e4bfef37ecc51363424
aaad4fb578853ff78c9348f307bc5a685bb3ef110c028190feaa0a6e14ce8b505d417298b72462d8
707d121b68764343ae92b0525a3779a19b15716c4c83df6a77dc817786d602235221ac08eac75239
e34400cc0b5da04cb073c41f334640796634250df00b19d152d11e3b2b92186755426b9d30f630f7
3ef96c6f3ae8b5eea5ad8fc9d74c0a2da79b3176c48167fa39d250af1377a79c70229e841175cf67
a4ca1f88a9098654eb4cdbc52d3e371572ef032741f797c0ca16cc4d424f6f80a564af81850c6426
1fdeb9829320b5a2cdc37014f45949b1587271160390b1c3ef1d060bc889560003eb1e8870beac6f
0990907ec327cceffda4cb024ae78ac6abc519395ada2ae80c570b68013850e9754db07ecc882591
97a4f583a255ea5c18f355e09fdf96d441cd631270c76bdbc6b50fa4f23ba182d9b412dd2cb9ea1d
88925f09ef52f4ee5e37df5b4154f5533764bedb6786c9434250c07f473ca13a4de433304d69499c
06c3ef67fb1430065e87d6b3fd30b77b0b0387d426c5fb2081c918b51fe860c7e54af5af22b23676
9b0c1d2904e433d799bfebb9462a76ddc1c23fc7effac9e899b00b91e203a4311295b7b8cbc4aadc
71772199e9e8529620b4a4b2384ed0d534e7e96416c15ca95fac6f6c3067770791638faed830d93e
c0adb9ce7192efe0148b4daf3919f009a54ec1dc5077342a6826f4919342f8bc78fb8cd121a5b118
8ffa2942680057342ac14a15ea06d1ae83350a55bb79a231a0e1d873cd468593b64517c92c188a06
2893ea8d2698e9f07a7131f0e83f7b3ff86b1d6a66dda2c3fd84a970e6c46f0a56efa9113781bc99
657fe3634dee47541d448e4347f12503aebfc0ae776b39038c2a02e1746dc939fb47f05def0bd122
f35fbf7edd814efb5e56d6b2588da2eda3d883abc3574b2d0f3e4afd5d75a8606fd2a03b1096a68b
dd39f4863114a5ec43c13e2ab5b36443f5a230c46812cecd97c633dab3600b1584d25bf2d2cbcb94
82c621948d23da575f0a87de64d8bb8d3960b6cd7732200c2eba7f64bd7053b894a1ceb4aad54260
b01774a4848d8fe0aeedcc428b04a8d622db2e873ccec22b6421a30f664ac30e422cf82ce7f5e9c8
5c995e8bc6fc173baec1bb2d6d1c9e25c9409cacdd16e2caf93ec70fdae0856cd6c1fc921b54c4ed
9d151c22e4bc53ad3fb5240f60a8d3b302753a738b6211c2a95be0b734de2fb39e28f2a70597f0a2
a17e55f55b630e63851b984255b334225d03800e7ca5834e0aca56b3755d968881450f8d5c0d88b9
33d7e268bd2a494296e090376f2dd26a498bafb14429df07693397ffda6be4753165ae594e8f31ea
ef4dbf1c4ac301a5372874114d0fc17a4a51830de93886770c4975059f78af9737b97ef5caa1c4b4
7ac3f0aabb8d4d8af9eda6d795598f579f935963e78c30d4ac17b935851ac775543369efcb321e35
1e85a698cd22cf1174a1ba8c801eb3328b24ada38f717596e9347a8c270591f6e0bb7e7b6f672f1e
162798604da9b2f02f8bf0d4d2a3d25e3c556a8c9fb360f211f03fc42b307cf578d2b818ceb6516d
059ea4094cffaee3d39f657194673dcb6426b51ee3d6b877c96b0bf46908f8d15a01325157ae46e1
00ce0018cf633dcc77d98cb33749b62f4b5d8c6c4b97b4a1d2a26e5380b52e6544fc2c27d34eefd1
b975b551d888353bced29df9364994579ae964b88bd37f117c674603d21b589c3f83bd148fb5717d
cd2f1fb3f880bc17d660dc9c6622ec753c77ce1ecb5224e43e98a4d203b2b8fd08df4bf0933a0102
e371b0688b73e4f53e9e4784904cbce0196ea47f1c67adfa02aecf99a07e2e27ed1e76d7cf4816e7
3228ee7aceb136b714d4e9fdfb1dbd46d346d49007397511258b309155cbebc64ffae1151ed29f52
304484c53f568ff7cda5b2a86268ed1b62a8e06530becf90e3e0c7a6cb16b3c47a18b639a689a980
3d5ec88fd46a67709f33dd9363d695dfe0f46068e34e08da6dbd3efb8fb967401583d26904318e4e
449abd6466d001b22843e603a3e803ac2cae8d56caa860bee2930bfeea82e69235a70ea54438bf77
66b6dc29eb1b05f2449390e780ff0e3a0a0ec311d53d97f468996f711f63007dc45179eefe2b60e8
37860bd018e8cab7aec824876dcae3fa147f0f87b0fa12caf8f2ab7b97d6a6a1ee60e10906ddb675
8203b63891564e8862209dffd4a2bccef38453e912c0a6bdac3593156ee8be97d7baad1a2ed34218
dda38e8cfbd21441a608aefa8083ecad536e60f1ad94999ece6a54ddf5c2e1c60618705693519dfb
b5a17532ccf628875919f686cdd65f206d4be10f2b8e792c22a1d40e44165ff48e14906b3a7f63ea
ff4e6a8cba326199850d53e21fb02b0fc6d1ca90841bdd5a8af2a542c4785522d26011c19a2402cb
fcdf001a22eef09223f6fcf6b46e88409a37822ec3d22840adf1d1b52f64ed4f4a0c27efdc491b8c
4577a71286bed5af203c4b73409cbd0c8984aaf0ade352a48d34c0c593f7de3a3445554755c4b5b5
6190100ed82e5b61c98238cedef26033347e7864f42104fbd9dca8c905e625fedee3703e697c5877
926a2a68c18647b36132d8af57236d9d75cb47a097e42b5e123b345000b8aa88e0897246be21d064
65058d9003374532b520e9d58d87a96c8da2ffd0764adb5138f65f3cff432307f9014f8a40e585f6
671873c91482ad2b00aa4d9068594a8a6b5b800d9f449088d9c79e1523b0b0b4e1d3e364f1865d71
48f07ad134725b1d64d7f964374fd0543fd8d6940a0c1b39997bcea014c7d8ce776a8b654d4da390
e9785f0021d13ffd8f66d8c1bd0be7b694d8f5195f6e18d37e3d941cecd2c4c92caab3f5ea75ec4c
46227c02862d397c9ac9eab7401efb29f2bdb47c7cf30b7f21dc1ab3e4593d12a9b97c81c90e11f1
6d90245034e6a28b7b14f173667b84714d68c4409b0d337225d7ce84195e9302848dcf865bd2f247
9081807aeeb22d74e130a950743a7f382ea4fdbcdc47b1f2f775caac15bab590c188a63bc19d9161
d5de47bc7255f22612002066d4286bf52d8061aa45297a12255cf401083c08a1e8ac2bcdbb790a7d
e5f866015acf06bd327472fe3d31d83f8f5c62dfc8408b09efb06cb4ce1d332a2d49c7bc88d76142
275bcfdb3d2bb9f53e1fb4271af8a7972983bb99b8bd14f23d786c23552cfbe093cc47a5bee836d8
ba027ec95277e97625ba36b1322bd906efb7117632f7f278cfb245e3672adf9613182117c97e7309
a72822cfb76dddc031b527bfef24d155463bd8364c24a01ac37c167b212c46fbf9b264021f31f61f
38eb32d4e834d551f1f0e708a76e5b2f29ea3545b46635ccb2af8572bc8b60cc1fa91ea0e50eb7a4
50bc05febdd416884706bcd360d6e90b2e21257ade786871bacd87d87718f334bae88568f20bf2d5
6a15bb34507cc1c66de6189d701da570c1d1120734dd08824a4b101f8a3001fd48bb705215e881bc
6cdf34681901ac93c994df00b5412cefd735fc4080ac0d8d0f8f8866e0e8b2345e87030bd63922ea
78a2a1eaaaf7700e31f0da83f156c9d9b8d8913d91f311353dfbd2c281d8b6c511699879e9338774
660277940b65a789154c1e5f50d5f07199e1828ee997e023268165b97208f99a68b7b09648cba099
6486b983ec7162a86162422d9f5ef6c6d4daf743af9447f4b76c7fb9f28277c0b9615c1715709e33
fa747c1de6a9370c43d0f5c58839e1d84e4194efa8fb5fe444009febb5457072993a0ff827836a01
06ede546e50d8ea8aad85baa14eaed52d4ffafa8db705d985b998e9a6a72af8fa2fa1dcd85c84619
2707bec2b817d0639e2fe2a704dd38571a809f17fb9df25a7db0596fd09ed103f702afabbe9ff713
50479bf70b7f1836c77d83a4b8178bac69cd758d34e1cfbda76f17f52236d47176b0e3a4c00b8496
b8602e626b0efe3b2490e0226d2c343426a158c833b00bb38d4b84b23530c657974c5c840eeb349a
a0639520156706be1a5e24d2b3e47e1508383251e91a85bd05068af9ca8dde437ae35b75e7a01fa8
2521a05ac1ad6e1187f5decd4d35ec57e20000e89ed01562e41f711fb943362ffebf31f0eedbe1ef
dcb07c9882594bd171ea89a85cd4ad7a89c481234fa1e9b9c22bed8a5915472bda9a3fe5a5c90b9b
66dee6858d5164e3f590dd4c9c514609dd69f6c9071f03fab319e4c3807cd6fb9912a5f06c1bbed5
99797e7c64745027d15ff484c729341b1c6ec9ccccf4bec4613d9255d6481b13e3f3c874988fc9c2
bb8731a741bb469a99fa192ab5e9ab2ed7d0ced64a8726bed69a9e3d10fbdaf13bde4eba39425bb6
84cb5bcf6be77e15f38ab712fc7da2759de20c3e0932b194d259ed91d83ae2f1d6b21dff7fb7775d
310c1ed40c0880f4f3a41554c596f1022dbe8976ab4ea07663e889e8c6c8e3f20545f4b7bd9357ff
77658b3b16221b2f6fe41a59bada7219c4d7b914416879125ffa88d6ea697707e13a46269783d68d
1838a50097330bf5fc18b31e194a7bdad46137f094521d95863f413694762d7b0aa25fd59bf72430
d71da3a836fb0b87aa91bec8d16a4cb24442ad76f4a2bc763957084f5f1a326df6e8bf31ccc9f548
a5de4ddf3d87441a5a8a76c5a9470efeb816f4fb8c9382bd1fa7d9a1aceb9d5b7f9eca7d2e225dcb
da25949d2a2b58cbb3963ebbbf9793c2a0f2e3cea10ce8eeeede9cb39b5c9d367ca6ed6655baea07
f4f820772b25f5b0c5ecf4baaa3e1736badec5e37fd6dd812d638bb33df3fbb81a13e789b10323ed
e49adb36183dfbda4cc21af752cf7d6b53047a848106cbeff1821902f29e77bd87df0b2aa10458a3
dd58c205640af9e0e919ffbb757b24c8a75e8282e1ac50be1227df9891aa833e1845b08460a3f475
49d266188cfe751d58cc6ee53e683c7a0e02eccbedd1eb9673724705024ee3c5ebb8bde6b498599b
4fc1cf6c7817d3d886a3c6c30ab38b3401f518acef1968ed98160def0f7c5a4d89347c6517e001f1
5910087132da61cc6d5783f862215ff4685ef40515aec505935c9b55a59df0c36154a920fcbe3ac5
a48a50e5420c9d0594874d755a4529f3990a90274733c7275abf593404b3d564a37ce29194facd98
b5f2f1e86b3d7ce60d8cde99cc064cadf9c137402631feccf4935cda0996f4efbc3d89c42202a917
6b840664e9e4754c898788946f5d0f94124a2de2db069d364ec9034c87c78eaf8dbff7fd2729aadf
77fe89e756d8eba10c52b47358aa2ac2f22670185468507067aee05ef38c4495ab2d403381556e84
5db75cf3cbc0182df82adef4c710a0cd74e2a85575a5b675e2bef22dbf4b659458c84ca0dd1739ff
ff031ae117ad79cd6450314c4f172b5d578f322b06d75e4963a778d2892435d0b52fdfc0081ee86b
064278559d293341c35a04fc14bafe65314b2afcf3d85ffaa2183d89d7b1b7a00e0fab2052423ae4
c9e02acc7a9ba83b769512bacc09dbe9ccb91bc41f83e94723c751e8d375a559716db9d894d98020
1554b7edaec9f2150e7d3ac9e055204f3caceb7eb89c6264a318bf250f917e3443f4225d298e499e
f0429e20f2ed592754025f027d73370f1e6b8b0fd5c2b4a40d65f22e19d1ac3674ee957da4280a4e
003fad49de8d277d26cfbaddd1edc4dfcc339ba2aadcfdd2cb8cd20563842dcca198bc2a35735fbb
c17f6847dcd21bdc542971a208bd8435016f1ca1689b22410288fc1baeb996906a91734680b400c0
2181d4ac582851fe0b443a7fb6bbc6a48bc63189a5854b654e215da2f0d0506ee5a39ab55b72f22d
50379ecea3d2483fe56a3dc71a9fd50ec2ee0fb644d1e1df45ca60deb90ae97a29a1f986aacd3625
46e621d8cd9626509d3728c7d3dc610f3482e09a676c84e935f0a827bc7a15f8c8d9172522b92ae7
8a0a7468a4b007c81fc24fec192f24e9089e8b35c0eff8f9295b570f944d58f40e464e0a8b68d6a2
116d60f8b02d77ff9d4ac405134111335394aebd56a6d7338408bd6821aa38e449d428e795793e7b
ba1bc24d361cb1ca74c3de51f43527f2dcdc4051c005365d879cf46bfe53cd9c20a95a7ef7ca93ae
4a9eb012244efd391fa3c3f0e52fff8b17d7e7524ef0c0ef40f6e5192e15805cd648b8e86d6b6f8c
5c1c746f846d10ae7daeef419ecf03ec794783d7000f3931a019de1db63bb1527cf3f4c8b1f3656f
8981585ac62be2fbe1cf3eca0faa9eddc00870990b4935e2d5f70640375d998ead1dbaabd7c16fb1
b68c330bcd450c7fc2ae576f54811e703c45950de5a24a611c6a18873593f4109d69bc452b91f07e
545f12255eb2e1e1670885983749108b9fa2202137b8299a4fd0e4f5ae63f27c8908fa1b94aef6ba
bbca118411178097401852b2d935a8ea54822d3c68e0393c08dea8d8b0c13ffd4af13923a6003537
5a1cf76ad59e4fb3c6e605145235a9a5a916c0e49d359a5934619915681809e27a09e6328c706adc
47c58e7091d406b2da4bba2214226e25eaa6843ef07c83aee2dfd21f660f3713f14297fa6488c2a0
2da577d430a0818e587ea1f2fb71b5dcff051894eefc6788fd0b64d5accfd923a3c7ec28aa554407
b6d81c2f804360fc4b60b1dc63adf16e89aab7f549314275cdcf1ba1f1dcff13ce2f4b394ffa3ef0
5cf05725c6602ee3dcf786b7c2ec1e68e5b926f32cb398862e1dacbdde0f56db43852476e5600271
abfae16997685566880144099c1458aab05df9
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
 HBW_SetTarget_XZ <Virtual>  0
 PID_10 PID  0
 VGR_Movement TASK  0 -1
 SSC_Check_InOut <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 V801 MHR799 1 0x0 C797 MC397 1"

// Rung VGR_Copy_State#2
// Offset 39
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 C810 MI402 1 0x0 C811 MI403 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1 0x0 MHR801 D1601 1"

// Rung MPO_Copy_State#2
// Offset 37
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 MC808 C1621 1"

// Rung SLD_Copy_State#2
// Offset 25
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 C1200 MI600 1 0x0 C1201 MI601 1 0x0 MC600 C1202 1 0x0 MHR1200 V2400 1 0x0 MHR1201 V2401 1 0x0 MC601 C1500 1"

// Rung SSC_Copy_State#2
// Offset 17
NOP

// Rung SSC_Copy_State#3
// Offset 18
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_SetTarget_XZ
$LGCMOD HBW_SetTarget_XZ

// Rung HBW_SetTarget_XZ#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5280 V140
POPBOOL
ANDE V105 3
MOVE 2990 V140

// Rung HBW_SetTarget_XZ#2
// Offset 23
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
ANDE V106 3
MOVE 3240 V142

// Rung HBW_SetTarget_XZ#3
// Offset 46
RET

// End of Code Block HBW_SetTarget_XZ
$LGCEND HBW_SetTarget_XZ

// Beginning of Code Block SSC_Check_InOut
$LGCMOD SSC_Check_InOut

// Rung SSC_Check_InOut#1
// Offset 0
STRN X42
OUT C1200

// Rung SSC_Check_InOut#2
// Offset 2
STRN X43
OUT C1201

// Rung SSC_Check_InOut#3
// Offset 4
RET

// End of Code Block SSC_Check_InOut
$LGCEND SSC_Check_InOut

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
#BEGIN FMT_COMMENT 
"Loop Start"
#END

REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
#BEGIN FMT_COMMENT 
"PID Controller<br>"
#END

STR ST1
PID PID_10 0x60 $HBW_Encoder_X.Acc 0 8100 0.0 8100.0 """""" 20 100 WY0 DST511

// Rung HBW_Move_XZ#10
// Offset 57
#BEGIN FMT_COMMENT 
"PID Update current x value"
#END

STR ST1
MOVE $HBW_Encoder_X.Acc PID_10.PV

// Rung HBW_Move_XZ#11
// Offset 60
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#12
// Offset 75
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D140 0
OUT Y50

// Rung HBW_Move_XZ#13
// Offset 81
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D140 0
OUT Y51

// Rung HBW_Move_XZ#14
// Offset 87
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#15
// Offset 96
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V120

// Rung HBW_Move_XZ#16
// Offset 111
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D142 0
OUT Y4

// Rung HBW_Move_XZ#17
// Offset 117
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D142 0
OUT Y5

// Rung HBW_Move_XZ#18
// Offset 123
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D140 -40
ANDLE D140 40
ANDGE D142 -40
ANDLE D142 40
OUT C150

// Rung HBW_Move_XZ#19
// Offset 140
#BEGIN FMT_COMMENT 
"Loop End"
#END

UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Test slot X & Y target value for out of range<br>"
"if X value greater than 4, fault code 105<br>"
"if Y value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#9
// Offset 38
#BEGIN FMT_COMMENT 
"Task Send<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if conveyor light barriers broken suggesting a pallot "
"is still there."
#END

STR C101
ANDN C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
AND X1
AND X2
JMP HBW_Program.S7
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
STRN X1
ORN X2
ANDSTR
JMP HBW_Program.S2
MOVE 107 V181

// Rung HBW_Program#10
// Offset 73
#BEGIN FMT_COMMENT 
"Task Recieve<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if outer conveyor light barrier no broken suggesting "
"no pallot is there."
#END

STR C102
ANDN C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
ANDN X2
JMP HBW_Program.S13
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
AND X2
JMP HBW_Program.S2
MOVE 108 V181

// Rung HBW_Program#11
// Offset 105
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#12
// Offset 107
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#13
// Offset 109
#BEGIN FMT_COMMENT 
"Task Send - Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 111
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#15
// Offset 114
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"

// Rung HBW_Program#16
// Offset 123
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#17
// Offset 128
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 131
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 134
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 136
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 138
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 141
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 147
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 150
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 152
#BEGIN FMT_COMMENT 
"Task Send - Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 154
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 157
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 162
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 167
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 170
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 173
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 175
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 177
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 180
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 186
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 189
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 191
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 193
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 196
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 212
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 3000 C80

// Rung HBW_Program#41
// Offset 216
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#42
// Offset 220
NOP

// Rung HBW_Program#43
// Offset 221
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 223
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 225
#BEGIN FMT_COMMENT 
"Reserved Stage<br>"
"Just incase I need an extra stage for Task Send"
#END

SG HBW_Program.S12

// Rung HBW_Program#46
// Offset 227
#BEGIN FMT_COMMENT 
"Fault<br>Should never hit this reserve stage"
#END

STR ST1
JMP HBW_Program.S2

// Rung HBW_Program#47
// Offset 229
#BEGIN FMT_COMMENT 
"Task Receive - Conveyor In<br>& Move XZ to Conveyor"
#END

SG HBW_Program.S13

// Rung HBW_Program#48
// Offset 231
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 10 V131

// Rung HBW_Program#49
// Offset 234
#BEGIN FMT_COMMENT 
"Conveyor Out In"
#END

STR X1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 45
OUT Y49

// Rung HBW_Program#50
// Offset 250
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x1 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
AND X1
ONDTMR T4 3000 C80

// Rung HBW_Program#51
// Offset 255
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#52
// Offset 259
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2750 V142

// Rung HBW_Program#53
// Offset 264
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#54
// Offset 269
#BEGIN FMT_COMMENT 
"Movements completed<br>"
"Conveyor inner beam broken and XZ move complete"
#END

STR HBW_Move_XZ.Done
ANDN X1
JMP HBW_Program.S14
HALT HBW_Move_XZ

// Rung HBW_Program#55
// Offset 273
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#56
// Offset 276
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 278
#BEGIN FMT_COMMENT 
"Task Receive - Pick"
#END

SG HBW_Program.S14

// Rung HBW_Program#58
// Offset 280
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#59
// Offset 283
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#60
// Offset 289
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S15

// Rung HBW_Program#61
// Offset 292
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#62
// Offset 294
#BEGIN FMT_COMMENT 
"Task Receive - Move to Storage"
#END

SG HBW_Program.S15

// Rung HBW_Program#63
// Offset 296
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#64
// Offset 299
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"
OUT C12

// Rung HBW_Program#65
// Offset 309
#BEGIN FMT_COMMENT 
"Math calculate Y target for placement"
#END

STRPD C12
MATH V142 "V142 - 100"

// Rung HBW_Program#66
// Offset 319
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#67
// Offset 324
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S16
HALT HBW_Move_XZ

// Rung HBW_Program#68
// Offset 327
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#69
// Offset 330
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#70
// Offset 332
#BEGIN FMT_COMMENT 
"Task Receive - Place<br>Place onto storage shelf"
#END

SG HBW_Program.S16

// Rung HBW_Program#71
// Offset 334
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#72
// Offset 337
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#73
// Offset 343
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S17

// Rung HBW_Program#74
// Offset 346
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#75
// Offset 348
#BEGIN FMT_COMMENT 
"Task Receive - Move to Idle"
#END

SG HBW_Program.S17

// Rung HBW_Program#76
// Offset 350
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#77
// Offset 353
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 4300 V140
MOVE 1400 V142

// Rung HBW_Program#78
// Offset 358
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#79
// Offset 363
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S1
HALT HBW_Move_XZ

// Rung HBW_Program#80
// Offset 366
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#81
// Offset 369
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#82
// Offset 371
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#83
// Offset 373
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#84
// Offset 375
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#85
// Offset 378
#BEGIN FMT_COMMENT 
"Force Ready<br>Jump to ready state without resetting<br>"
"Reset Fault code"
#END

STR ST1
MOVE MC105 C105
AND C105
JMP HBW_Program.S1
MOVE 0 V181

// Rung HBW_Program#86
// Offset 385
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#87
// Offset 387
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#88
// Offset 389
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#89
// Offset 392
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#90
// Offset 407
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
ANDLE $HBW_Encoder_X.Acc 8050
OUT Y50

// Rung HBW_Program#91
// Offset 413
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#92
// Offset 416
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#93
// Offset 431
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#94
// Offset 434
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#95
// Offset 437
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#96
// Offset 452
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#97
// Offset 455
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
ANDLE $HBW_Encoder_Z.Acc 3500
OUT Y4

// Rung HBW_Program#98
// Offset 461
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#99
// Offset 476
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#100
// Offset 478
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#101
// Offset 480
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#102
// Offset 482
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#103
// Offset 484
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#104
// Offset 486
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#105
// Offset 489
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#106
// Offset 492
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 40 MHR120 1"

// Rung HBW_Program#107
// Offset 508
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick
HALT HBW_Place

// Rung HBW_Program#108
// Offset 512
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#109
// Offset 529
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 100
OUT Y7

// Rung HBW_Program#110
// Offset 545
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#111
// Offset 562
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#112
// Offset 578
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#113
// Offset 582
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#114
// Offset 584
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#115
// Offset 587
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#116
// Offset 591
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#117
// Offset 594
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"Reset Stage"
#END

SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Reset VGR Fault Code"
#END

STR ST1
MOVE 0 V801

// Rung VGR_Program#7
// Offset 25
STR ST1
COPY 0x0 "4 0x0 0 N810 1 0x0 0 N811 1 0x0 0 N811 1"

// Rung VGR_Program#8
// Offset 37
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#9
// Offset 54
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#10
// Offset 71
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#11
// Offset 88
STR X25
AND X26
AND X27
ONDTMR T54 100 C798

// Rung VGR_Program#12
// Offset 94
STR C798
OUT $VGR_Encoder_Rot.ResetEdge
OUT $VGR_Encoder_X.ResetEdge
OUT $VGR_Encoder_Y.ResetEdge

// Rung VGR_Program#13
// Offset 98
STR C798
JMP VGR_Program.S2

// Rung VGR_Program#14
// Offset 100
SG VGR_Program.S2

// Rung VGR_Program#15
// Offset 102
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#16
// Offset 110
STR ST1
OUT C797

// Rung VGR_Program#17
// Offset 112
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S1

// Rung VGR_Program#18
// Offset 114
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#19
// Offset 116
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#20
// Offset 118
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#21
// Offset 120
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#22
// Offset 122
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S20

// Rung VGR_Program#23
// Offset 124
#BEGIN FMT_COMMENT 
"Move Crane from 0 state to HBW"
#END

SG VGR_Program.S3

// Rung VGR_Program#24
// Offset 126
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#25
// Offset 134
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 5385 N810

// Rung VGR_Program#26
// Offset 137
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 820 N811

// Rung VGR_Program#27
// Offset 140
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 620 N812

// Rung VGR_Program#28
// Offset 143
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#29
// Offset 148
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
JMP VGR_Program.S4
HALT VGR_Movement

// Rung VGR_Program#30
// Offset 151
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#31
// Offset 155
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#32
// Offset 157
#BEGIN FMT_COMMENT 
"Pick up disk from HBW"
#END

SG VGR_Program.S4

// Rung VGR_Program#33
// Offset 159
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#34
// Offset 167
STR ST1
SET Y28

// Rung VGR_Program#35
// Offset 169
STR ST1
ONDTMR T51 100 C414

// Rung VGR_Program#36
// Offset 173
STR C414
SET Y29

// Rung VGR_Program#37
// Offset 175
STR C414
ONDTMR T52 100 C415

// Rung VGR_Program#38
// Offset 179
#BEGIN FMT_COMMENT 
"FOR TESTING, JUMP TO FAULT STATE ON COMPLETION"
#END

STR C415
JMP VGR_Program.S30

// Rung VGR_Program#39
// Offset 181
#BEGIN FMT_COMMENT 
"Move crane from HBW to MPO"
#END

SG VGR_Program.S5

// Rung VGR_Program#40
// Offset 183
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#41
// Offset 191
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 400 N810

// Rung VGR_Program#42
// Offset 194
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 0 N811

// Rung VGR_Program#43
// Offset 197
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#44
// Offset 200
STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#45
// Offset 205
STR VGR_Movement.DoneThisScan
JMP VGR_Program.S6
HALT VGR_Movement

// Rung VGR_Program#46
// Offset 208
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#47
// Offset 212
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#48
// Offset 214
#BEGIN FMT_COMMENT 
"Position Crane to drop disk onto MPO"
#END

SG VGR_Program.S6

// Rung VGR_Program#49
// Offset 216
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#50
// Offset 224
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 100 N811

// Rung VGR_Program#51
// Offset 227
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 100 N812

// Rung VGR_Program#52
// Offset 230
STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#53
// Offset 235
STR VGR_Movement.DoneThisScan
JMP VGR_Program.S7
HALT VGR_Movement

// Rung VGR_Program#54
// Offset 238
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#55
// Offset 242
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#56
// Offset 244
#BEGIN FMT_COMMENT 
"Release vacuum and turn off compressor"
#END

SG VGR_Program.S7

// Rung VGR_Program#57
// Offset 246
STR ST1
RST Y29

// Rung VGR_Program#58
// Offset 248
STR ST1
ONDTMR T53 100 C416

// Rung VGR_Program#59
// Offset 252
STR C416
RST Y28

// Rung VGR_Program#60
// Offset 254
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C416
JMP VGR_Program.S1

// Rung VGR_Program#61
// Offset 256
SG VGR_Program.S8

// Rung VGR_Program#62
// Offset 258
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#63
// Offset 266
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#64
// Offset 268
#BEGIN FMT_COMMENT 
"Manual Control"
#END

SG VGR_Program.S20

// Rung VGR_Program#65
// Offset 270
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#66
// Offset 278
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#67
// Offset 293
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#68
// Offset 296
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#69
// Offset 298
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#70
// Offset 313
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#71
// Offset 315
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#72
// Offset 318
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#73
// Offset 333
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#74
// Offset 335
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#75
// Offset 338
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#76
// Offset 340
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#77
// Offset 342
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#78
// Offset 344
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#79
// Offset 346
STRN C500
JMP VGR_Program.S1

// Rung VGR_Program#80
// Offset 348
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG VGR_Program.S30

// Rung VGR_Program#81
// Offset 350
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#82
// Offset 358
STR ST1
HALT VGR_Movement

// Rung VGR_Program#83
// Offset 360
STR ST1
ONDTMR T99 15000 C700

// Rung VGR_Program#84
// Offset 364
STR C700
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
#BEGIN FMT_COMMENT 
"If we are not outside the oven, turn on the compressor"
#END

STRN X18
OUT Y17

// Rung MPO_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"If the compressor is on, open the door"
#END

STR Y17
OUT Y20

// Rung MPO_Program#5
// Offset 14
STR Y20
OUT Y52

// Rung MPO_Program#6
// Offset 16
#BEGIN FMT_COMMENT 
"If the crane is not at turntable position, move towards it"
#END

STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#7
// Offset 32
#BEGIN FMT_COMMENT 
"Turn off the conveyor belt when reseting"
#END

STR ST1
RST Y47

// Rung MPO_Program#8
// Offset 34
#BEGIN FMT_COMMENT 
"Reset our bit that said its detected something"
#END

STR ST1
RST C1000

// Rung MPO_Program#9
// Offset 36
STR ST1
RST Y18

// Rung MPO_Program#10
// Offset 38
#BEGIN FMT_COMMENT 
"Reset end of coveryor belt detection bit"
#END

STR ST1
RST C1001

// Rung MPO_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Reset the turntable plunger"
#END

STR ST1
RST Y21

// Rung MPO_Program#12
// Offset 42
#BEGIN FMT_COMMENT 
"Reset turntable to crane position"
#END

STRN X12
OUT Y46

// Rung MPO_Program#13
// Offset 44
#BEGIN FMT_COMMENT 
"Jump to manual control mode"
#END

STR C801
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 46
#BEGIN FMT_COMMENT 
"Make sure the crane is at the turntable, the turntable is "
"facing the crane, we are not wanting to control manually, "
"and the loading tray is outside the oven before beginning "
"stage 1"
#END

STR X16
AND X12
ANDN C801
AND X18
ANDN C802
JMP MPO_Program.S1

// Rung MPO_Program#15
// Offset 52
SG MPO_Program.S1

// Rung MPO_Program#16
// Offset 54
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#17
// Offset 62
#BEGIN FMT_COMMENT 
"If our oven timer is less than 100, fault out"
#END

STRLE D1600 100
JMP MPO_Program.S8

// Rung MPO_Program#18
// Offset 67
#BEGIN FMT_COMMENT 
"If our saw timer is less than 100, fault out"
#END

STRLE D1601 100
JMP MPO_Program.S8

// Rung MPO_Program#19
// Offset 72
#BEGIN FMT_COMMENT 
"C810 is the ready status bit"
#END

STR ST1
ANDN Y17
ANDN Y16
OUT C810

// Rung MPO_Program#20
// Offset 76
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#21
// Offset 79
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#22
// Offset 83
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#23
// Offset 86
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#24
// Offset 90
STR Y20
AND X17
RST Y20

// Rung MPO_Program#25
// Offset 93
#BEGIN FMT_COMMENT 
"Once inside, turn off the compressor, which will shut the door"
#END

STRND Y20
AND X17
RST Y17

// Rung MPO_Program#26
// Offset 97
#BEGIN FMT_COMMENT 
"Once inside and door is closed turn on oven"
#END

STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#27
// Offset 103
#BEGIN FMT_COMMENT 
"When done timing move to next stage"
#END

STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#28
// Offset 107
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#29
// Offset 109
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#30
// Offset 111
SG MPO_Program.S2

// Rung MPO_Program#31
// Offset 113
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#32
// Offset 121
#BEGIN FMT_COMMENT 
"If we are inside the oven, turn on the compressor"
#END

STR X17
SET Y17

// Rung MPO_Program#33
// Offset 123
#BEGIN FMT_COMMENT 
"If we are inside the oven and the door is not open, then "
"open the door"
#END

STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#34
// Offset 126
#BEGIN FMT_COMMENT 
"If the door is open and we are not outside of the oven, "
"then move the tray out."
#END

STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#35
// Offset 129
STR X18
RST Y17

// Rung MPO_Program#36
// Offset 131
STR X18
RST Y20

// Rung MPO_Program#37
// Offset 133
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#38
// Offset 135
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#39
// Offset 137
SG MPO_Program.S3

// Rung MPO_Program#40
// Offset 139
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#41
// Offset 147
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#42
// Offset 165
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#43
// Offset 168
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#44
// Offset 173
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#45
// Offset 179
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#46
// Offset 183
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#47
// Offset 185
SG MPO_Program.S4

// Rung MPO_Program#48
// Offset 187
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#49
// Offset 195
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#50
// Offset 212
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#51
// Offset 217
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#52
// Offset 223
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#53
// Offset 227
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 229
SG MPO_Program.S5

// Rung MPO_Program#55
// Offset 231
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 239
#BEGIN FMT_COMMENT 
"Turn turntable until at position to saw"
#END

STRN X15
AND C800
OUT Y45

// Rung MPO_Program#57
// Offset 242
#BEGIN FMT_COMMENT 
"Once you reach saw position, activate the saw"
#END

STRPD X15
OFFDTMR T103 D1601 Y43

// Rung MPO_Program#58
// Offset 247
#BEGIN FMT_COMMENT 
"Once done sawing, move to the next stage"
#END

STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#59
// Offset 252
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#60
// Offset 254
SG MPO_Program.S6

// Rung MPO_Program#61
// Offset 256
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#62
// Offset 264
#BEGIN FMT_COMMENT 
"Keep rotating until we are at plunger position"
#END

STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#63
// Offset 267
STRPD X13
SET Y18

// Rung MPO_Program#64
// Offset 270
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#65
// Offset 275
STRPD X13
OFFDTMR T104 3000 Y47

// Rung MPO_Program#66
// Offset 280
#BEGIN FMT_COMMENT 
"If the light barrier gets broken, set c1001 true"
#END

STRN X14
SET C1001

// Rung MPO_Program#67
// Offset 282
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#68
// Offset 284
STRND T104.Timing
AND C1001
JMP MPO_Program.S0

// Rung MPO_Program#69
// Offset 288
STRND T104.Timing
ANDN C1001
JMP MPO_Program.S8

// Rung MPO_Program#70
// Offset 292
SG MPO_Program.S7

// Rung MPO_Program#71
// Offset 294
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#72
// Offset 302
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#73
// Offset 307
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#74
// Offset 312
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#75
// Offset 317
#BEGIN FMT_COMMENT 
"Manually move crane towards oven"
#END

STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#76
// Offset 334
#BEGIN FMT_COMMENT 
"Manually move crane to turn table"
#END

STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#77
// Offset 351
STRN C801
JMP MPO_Program.S0

// Rung MPO_Program#78
// Offset 353
SG MPO_Program.S8

// Rung MPO_Program#79
// Offset 355
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#80
// Offset 363
#BEGIN FMT_COMMENT 
"Turn on flashing red light"
#END

STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#81
// Offset 368
STR ST1
OUT C811

// Rung MPO_Program#82
// Offset 370
#BEGIN FMT_COMMENT 
"If Reset Button (C802) is pressed and both the oven timer "
"and saw timer are over 100ms go back to stage 0 "
#END

STR C802
ANDGE D1600 100
ANDGE D1601 100
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STR C1610
COPY 0x1 "4 0x0 1 C1621 1"

// Rung SLD_Program#8
// Offset 32
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STR C1610
JMP SLD_Program.S2

// Rung SLD_Program#9
// Offset 34
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 36
SG SLD_Program.S10

// Rung SLD_Program#11
// Offset 38
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 46
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#13
// Offset 48
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#14
// Offset 50
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#15
// Offset 52
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#16
// Offset 54
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#17
// Offset 56
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#18
// Offset 61
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#19
// Offset 63
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#20
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#21
// Offset 67
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#22
// Offset 75
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#23
// Offset 81
STR ST1
COPY 0x1 "4 0x0 26000 V3205 1"

// Rung SLD_Program#24
// Offset 88
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T200.Timing
JMP SLD_Program.S3

// Rung SLD_Program#25
// Offset 91
SG SLD_Program.S3

// Rung SLD_Program#26
// Offset 93
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#27
// Offset 101
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#28
// Offset 106
#BEGIN FMT_COMMENT 
"Checks for lowest color value in color sensor."
#END

STRLE V3200 V3205
COPY 0x1 "4 0x0 V3200 V3205 1"

// Rung SLD_Program#29
// Offset 116
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3205 0x1 10000 6000 C1602

// Rung SLD_Program#30
// Offset 121
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#31
// Offset 123
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3205 0x1 20000 18000 C1619

// Rung SLD_Program#32
// Offset 128
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#33
// Offset 130
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3205 0x1 24500 21000 C1620

// Rung SLD_Program#34
// Offset 135
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#35
// Offset 137
#BEGIN FMT_COMMENT 
"Increment W counter when W is in color detection range."
#END

STRPD C1602
INC V3202

// Rung SLD_Program#36
// Offset 140
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 3, jump to S4."
#END

STR C1602
ANDLT V3202 3
JMP SLD_Program.S4

// Rung SLD_Program#37
// Offset 146
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 3, jump to S5."
#END

STR C1619
ANDLT V3203 3
JMP SLD_Program.S5

// Rung SLD_Program#38
// Offset 152
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 3, jump to S6."
#END

STR C1620
ANDLT V3204 3
JMP SLD_Program.S6

// Rung SLD_Program#39
// Offset 158
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#40
// Offset 165
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#41
// Offset 172
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#42
// Offset 179
SG SLD_Program.S4

// Rung SLD_Program#43
// Offset 181
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#44
// Offset 189
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#45
// Offset 193
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#46
// Offset 195
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#47
// Offset 200
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#48
// Offset 202
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#49
// Offset 207
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#50
// Offset 209
STRND C1604
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#51
// Offset 216
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#52
// Offset 219
SG SLD_Program.S5

// Rung SLD_Program#53
// Offset 221
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#54
// Offset 229
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#55
// Offset 233
STRN C1606
OUT Y30

// Rung SLD_Program#56
// Offset 235
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#57
// Offset 240
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#58
// Offset 242
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#59
// Offset 247
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#60
// Offset 249
STRND C1607
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#61
// Offset 256
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#62
// Offset 259
SG SLD_Program.S6

// Rung SLD_Program#63
// Offset 261
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#64
// Offset 269
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#65
// Offset 273
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#66
// Offset 275
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#67
// Offset 280
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#68
// Offset 282
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#69
// Offset 287
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#70
// Offset 289
STRND C1612
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#71
// Offset 296
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#72
// Offset 299
SG SLD_Program.S7

// Rung SLD_Program#73
// Offset 301
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#74
// Offset 309
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 8000 C1630

// Rung SLD_Program#75
// Offset 313
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#76
// Offset 315
STRND Y30
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#77
// Offset 322
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y37

// Rung SSC_Program#5
// Offset 14
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"c1202 is reset button, c1500 is execute command"
#END

STR X40
AND X41
ANDN C1202
AND C1500
JMP SSC_Program.S1

// Rung SSC_Program#7
// Offset 27
SG SSC_Program.S1

// Rung SSC_Program#8
// Offset 29
#BEGIN FMT_COMMENT 
"Look at HBW"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#9
// Offset 37
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#10
// Offset 45
STR ST1
ANDPDPF
OUT C1203

// Rung SSC_Program#11
// Offset 48
STRN CT150.Done
OUT Y38

// Rung SSC_Program#12
// Offset 50
STRN CT150.Done
AND X46
STR C1203
CNT CT150 V2400

// Rung SSC_Program#13
// Offset 55
STRN CT151.Done
OUT Y35

// Rung SSC_Program#14
// Offset 57
STRN CT151.Done
AND X44
STR C1203
CNT CT151 V2401

// Rung SSC_Program#15
// Offset 62
STR CT150.Done
AND CT151.Done
JMP SSC_Program.S2

// Rung SSC_Program#16
// Offset 65
SG SSC_Program.S2

// Rung SSC_Program#17
// Offset 67
#BEGIN FMT_COMMENT 
"Look at VGR"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#18
// Offset 75
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#19
// Offset 83
STR ST1
ANDPDPF
OUT C1204

// Rung SSC_Program#20
// Offset 86
NOP

// Rung SSC_Program#21
// Offset 87
STR C1202
JMP SSC_Program.S0

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRPD X37
DEC V3202

// Rung SLD_Storage#2
// Offset 3
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRPD X38
DEC V3203

// Rung SLD_Storage#3
// Offset 6
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRPD X39
DEC V3204

// Rung SLD_Storage#4
// Offset 9
#BEGIN FMT_COMMENT 
"Upper bound W fault state."
#END

STRGT V3202 5
OUT C1625

// Rung SLD_Storage#5
// Offset 14
#BEGIN FMT_COMMENT 
"Upper bound R fault state."
#END

STRGT V3203 5
OUT C1626

// Rung SLD_Storage#6
// Offset 19
#BEGIN FMT_COMMENT 
"Upper bound B fault state"
#END

STRGT V3204 5
OUT C1627

// Rung SLD_Storage#7
// Offset 24
STR ST1
COPY 0x1 "4 0x0 V3202 MC809 1 0x0 V3203 MC810 1 0x0 V3204 MC811 1 0x0 C1625 MC812 1 0x0 C1626 MC813 1 0x0 C1627 MC814 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

// Beginning of Code Block VGR_Movement
$TSK VGR_Movement

// Rung VGR_Movement#1
// Offset 0
NOP

// Rung VGR_Movement#2
// Offset 1
STR ST1
RANGECHECK N810 0x0 8000 0 C780
RANGECHECK N811 0x0 1000 0 C781
RANGECHECK N812 0x0 1000 0 C782

// Rung VGR_Movement#3
// Offset 14
#BEGIN FMT_COMMENT 
"Set fault state if rotation out of range"
#END

STR C780
MOVE 1 V801

// Rung VGR_Movement#4
// Offset 17
#BEGIN FMT_COMMENT 
"Set fault state if X out of range"
#END

STR C781
MOVE 2 V801

// Rung VGR_Movement#5
// Offset 20
#BEGIN FMT_COMMENT 
"Set fault state if Y out of range"
#END

STR C782
MOVE 3 V801

// Rung VGR_Movement#6
// Offset 23
#BEGIN FMT_COMMENT 
"Initiate starting values"
#END

STR ST1
MOVE 0 N813
MOVE 0 N814
MOVE 0 N815

// Rung VGR_Movement#7
// Offset 30
NOP

// Rung VGR_Movement#8
// Offset 31
#BEGIN FMT_COMMENT 
"Set Crane Rotation Direction (Encoder Values decrement on "
"CCW Rotation)"
#END

STRLE $VGR_Encoder_Rot.Acc N810
OUT C411

// Rung VGR_Movement#9
// Offset 36
#BEGIN FMT_COMMENT 
"Set Crane X Direction"
#END

STRLE $VGR_Encoder_X.Acc N811
OUT C412

// Rung VGR_Movement#10
// Offset 41
#BEGIN FMT_COMMENT 
"Set Crane Y Direction"
#END

STRLE $VGR_Encoder_Y.Acc N812
OUT C413

// Rung VGR_Movement#11
// Offset 46
REPEAT

// Rung VGR_Movement#12
// Offset 47
#BEGIN FMT_COMMENT 
"Calculate Rotation position difference"
#END

STR ST1
MATH N813 "$VGR_Encoder_Rot.Acc - N810"

// Rung VGR_Movement#13
// Offset 56
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Movement#14
// Offset 71
#BEGIN FMT_COMMENT 
"If crane needs to rotate CCW to get to target"
#END

STR C411
ANDLE N813 0
OUT Y27

// Rung VGR_Movement#15
// Offset 77
#BEGIN FMT_COMMENT 
"If crane needs to rotate CW to get to target"
#END

STRN C411
ANDGE N813 0
OUT Y26

// Rung VGR_Movement#16
// Offset 83
#BEGIN FMT_COMMENT 
"Calculate X position difference"
#END

STR ST1
MATH N814 "$VGR_Encoder_X.Acc - N811"

// Rung VGR_Movement#17
// Offset 92
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Movement#18
// Offset 107
#BEGIN FMT_COMMENT 
"If crane needs to extend X+ to get to target"
#END

STR C412
ANDLE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y25

// Rung VGR_Movement#19
// Offset 121
#BEGIN FMT_COMMENT 
"If crane needs to retract X- to get to target"
#END

STRN C412
ANDGE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y24

// Rung VGR_Movement#20
// Offset 135
#BEGIN FMT_COMMENT 
"Calculate Y position difference"
#END

STR ST1
MATH N812 "$VGR_Encoder_Y.Acc - N812"

// Rung VGR_Movement#21
// Offset 144
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Movement#22
// Offset 159
#BEGIN FMT_COMMENT 
"If crane needs to extend Y- to get to target"
#END

STR C413
ANDLE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y23

// Rung VGR_Movement#23
// Offset 173
#BEGIN FMT_COMMENT 
"If crane needs to retract Y+ to get to target"
#END

STRN C413
ANDGE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y22

// Rung VGR_Movement#24
// Offset 187
#BEGIN FMT_COMMENT 
"Exit Conditions for all movements"
#END

STRLE N813 40
ANDGE N813 -40
ANDLE N814 40
ANDGE N814 -40
ANDLE N815 40
ANDGE N815 -40
ONDTMR T50 500 C499

// Rung VGR_Movement#25
// Offset 214
UNTIL C499

// End of Code Block VGR_Movement
$TSKEND VGR_Movement

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C11","C11_Interlock","","Used to delay logic by one scan"
"C12","C12_Interlock_2","","Used to delay logic by one scan"
"C51","X_Direction","","True: Right False: left"
"C52","Z_Direction","","True: Down False: Up"
"C80","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","Fault_X_Target","","Active when X target out of range"
"C183","Fault_Z_target","","Active when Z target out of range"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"D0","MC","",""
"D140","X_Position_Diff","","Distance to target"
"D142","Y_Position_Diff","","Distance to target"
"T3","T_HBW_S6","",""
"T4","T_Conveyor_Timer","","Used to detect conveyor faults"
#END

