// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\hunte\Documents\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
fed8a1b36529c7cc49da78e541caa02aa132dee0ac7efd22ced861ada45f4a9d29efe6970e7c7cd8
f742ed6405384e55fb7fc76cc8ab02fef2980333dff9b6bdcfcd01ad87142e7e3e91888f0de89b43
3ccdd09029b105852cbc844824fa4925136b980718440a6e79b2229da6dc782430ddf0491cadd301
1a4006cc3d39c52b48375713b470fc5931c6f7afb6142be419338a67c051c0236fbda3a5b45ea725
3bf3af5d32ef818b9cb2057f8d9732fb53bdb9ef8bf0495b2571c0d3b5fd3888386bc88e82ba902e
99fe10230768bcbbb0d9102953b677ef89bdcfaacdb2ee804a2b2bac334aa5d62b95d98646418fa7
5c84b1bc4521aea3f71b043aeaa7c314da0c2ba59aa741fe7d96311fb741f5a2a495e56597936b2b
b294f1a8c9c3e1605b4def2b48fc9b6407de3196df0f32934c52140dd8ac3804faac1b6b547134f0
c3a4f08dfa338127d11ab6e6f1617197ccd6ac41e74fc78caff0fd8d141d6178b781df19a3d7732c
e15f35ead158823d441f98af38ee846e37000157320bbdae3a491c2457babcdb3192b17fe6c19809
320edecc1682944997951529288631b0e7f583565c5f147d12242e4af342291b214498974dae8af2
0b822caa90eaae018d681aeea88d27aa1a2b4b79c2b0b8f75e8f6f4b126bad754d5102b000d01b8e
866c173b883d9c1f5587fbd3f83103ce8c62d75f2d2e1130979779a06f77f9599b59d0d1cbf736a1
4956ab37789463a6d939de6cae386d0ce486fd1114cd10d67f6d2eb7f7f2ceb17317e527bf89556b
f7b3ecea3540e04483ecf40e0792aa7da0dd80a4df607c618dc915a1900f2822a2d6681b5ee701b6
1087c8383a9fcaadf04218116bc4d8e948a29b9cc3aa3ccb4b6472e8239b5c4bbdbf85a8b0d004c0
d090b8bb4c915f940ac0f4a169b6947eae7aca066e78293c71ce4a18c137374b0dfa2b8d764bc4f9
8b9822ba3ad0195173618934323acf3d51da1cf589e647fd55c75184942c9036eee4e66cbba985e3
7866938a5789dc71923059e022441b2735bc197b1c05c8d7eb129780b342973ddc116256ac213b52
e5ddca7c0f9573541b89ce244a8f4909156148c506d0d7b7a979a8418f919d985ef100993048a3a4
6a06465cde6f8b50e7a62a6af43d8aa8d1f8a3b5fcc8f56726c52ac37fb04cc053a754ab1b68fb87
51967d1abfe005155a687407bf67749738f1c2a921fb3f72871a4ddde29e7f8cbf5478c2708c06f3
f3ed0943300a6f1a3996025c7c9555485a48c8b89194313bea7deea1a45adaee9d7fa4074602fbbb
2248c0889ea1987465a95e1a4ceaec54a3f41f8a1086cbba68aba1c83093b8583e0236d5b2b39468
903baba1f3750d5188d7922da53ad45929c0d573a2d623f7a24bb60f094d84db4a0ebefe484f26a3
e94aa6a27bfcbdb19cc8649a04ae1e176a70016d5f452ac6a9ddfedcb5338f5b78dcc8587364781d
d7f68983839d07543a2eb27b401448a501699068837cd4009000ef622877b88048c56fe99bd59c2a
99211622bd01fbae6c360686e8009615b2e69b86dc383cac998eef0366f28033b83992ff1b45502d
e7fdb0ed7110ce3c7da24c6129e52e280073382bddfd0e0356958a1c37f1f7dbe4bcdb1adad15d44
3ee0281d3fabe7a0eb27f83c195e184d1272a49d9a054d74cbdcb9bb093fac921c7cfb4f2c18f690
09e56e42596cd70ce8ba66895e837a67fdf9bcf150fd47829ee9cee6deed73bf02ddbc282dcbf2e3
3cd644fb6a7750abdc05b05fa1cd0263471b37f4b3a516088f4edba4aa09c36e4de41c96c3678cf8
7720d70c90957f2371a039d51ad2511e5736d621b1c54a1dea37abae44184a9b86247ee7277823cb
263a14bc5c62c4a8644045b895528b1d6641b27c2bb6056c47236cb83023382a1c3b8a118dbaaf67
96cdcfc4d2f3aba2a366e16c48e1b9e357eccdaea9e63799e00dbbf887e1dc675c2910bfea265174
ba757d378270474a894547ae5eeb533f8a808d430d9bd1601c1bb08b6fa29ac4ad077d686e3e26d8
b775cad44e56ac2270b653aabd39935f19487426bcb925de9bc29af2ab8e9f2b75ece0c2a6893deb
649764db19ada0917bb0a49c1ff3e6aee56d33383d7d502cc80218b4bc2b394f6ce336d3e57d5395
ab7b9129681163f33fc2550e2759ad7fffd6e17b93999b9df9b4c70d505d0353715754b64a981cf5
2ee0407e7e112334470d13453bd88e0905d42e413618389555e1f7b6fd94fb9d0a27db8afc0fce34
0441fb4a69ed5fd139e83e9962d7874cf3db7d7fc8d8e6c875fab675a997bd9127410f7ef0d61e55
dcdfee1ba2aa7d3b45dc4f26462a6cfff426a8b626b650ecbc250ea8d4c08c50467fa62c251c949d
c31dca3544b999d0a1ab575a3d148995d885f7bc3e2a56f8733e67a229204f73cbd634ae2723f3d4
62997fcb05067d0e812cce456a541984a003cc9ee03f714c39c2fca9a093980409a13a070ffce8b1
7add319bba6677ba25574f124a23caebf527b17583cbcc676a04b4f8fdd1abd1b4c0af799ca323cf
92355919457ae47e54bf627198fb1391370bf3e52f097dc21ab3d8c7ca39c386840f7a76d5dcefc5
9ea9dab917139d26a842e8f4faebc7b32c74dfd47270f5e5dbf5f07e12d20e301a11cc47c888b8a0
a82d5b03ae0e90c4141b96a032f3ece8a48b3014471793f53a0d214279bb7e5c65075c881c539e6d
a6c5ee4db150e4004122d8d703694309a74d712997b69912b66946d0b1d642277909111dfbec185c
7b02019bd76ba61768567d3b5703e3e13e8046f9eb74c7b647c389193c556524bf9b7315222cb175
95904848fc2438146164d2c7dd18772223441c385a231a6247f5f9a3eead7c50bf595755c996c1a2
bc469aba575693c0df318bb0fcaeb450a314365995d6a99af41e20a291c36ce78f47109da8667adf
f794330c4d2f8fb81f403d8689a8f8b6cab4e6340ae14f0d0f55223f01e52a9946dfc0f22cc72cf2
cd09ecf47171f7e66ceba6c29ebe78fb6aaf6a0b2280a96e20cc0eba9c55dee12d90f5c1df24035b
1dc9b60d29854811163d4db54f0bcbd49a4d6efbde591bb0ab4b10f522c88af310af0d3ecca0083f
d00f839bab409787e57a70ddb28bf85ab682a51af76003bcc3aafafced8ade120b89dcb86ee0941d
be2f3bf58231c9988fcb3253bf494004068cd661c4a62898b3282069ed8f193443c4c4240bb1786a
9ccbc420e003bc89caa75bb7aefc08518c31fb6acf9cf44a7e2675dc8580d78d9e186f71b32ecdd5
d9aa81b8c53fef326d12184bdacf64de313e75d660fd58cffa9d150d4dc381be5a6e877edeb089ff
a2294d424a0895d4d6b0f0c7896bce57bbb117033d5dbd9a58fd87ae953f2a2525acee0be1f2f501
c3e5361665defca9d2628d6ca57ff02de655d6acd02a6bb1510f32357393fabc94b5a3b681ef892a
1faf59d375eede9ee54caf2443b27e9e578d02e18a7225b80b42a361e15f0a6ffd651452094106b2
3e667e28569dee0cbfe9888f7dae659487aa81b3df1887841d9c59d006e4332c96ed32e44fb57c77
c6ddb1aee2d7975e7a98fe1fd3e3c63083fabf42c91ffdaab7b93874e2b73cdeb978a779db2cb2d9
a7bdfdfbf38146dada83038ff06f7dfe5167d12ad70f67e64c4a74b77088f2ac50c585c1a39d99dd
a102560097c483d748615e81611083686cd1110ac90ef6d35d7394bd490bf20694ab91b6bf219699
322edbadf327a73ba05339ebffdad8c59d1bde0b81fc619ae9ee9c66c67a74e6a3c3cbe4d020dc89
0a66839b6bef9210a873853e782ff239d8ea7eb827243dbf5ac48561bdae18a35d85edec4147ea80
f4b5edb3db9a7d6fbb037c36db380d23a55a678fd8bd8bed934c9a319b52e5554e221d50c881f0d4
6774946441dede878705e0c32b7c99808eda05d378cdd4df6f74187fb380cc0521c3bf5ec5350038
6dbefbae8e1758233ad7d87ac60899e89c94bb8f103c418e7f575aaa4ef3a5c4c337e475d7a3fddd
4f40f402b1084d7858c18eb5aee38ec61636a2d3faf226ee20a75caf13e2f1dcdd9f76645c091a5f
e25bf82cbca409c5b3d644dcad26968de1bef3e6ed591790d65faa39063c5b532d975c96f212c878
bdbac70b9a48b04f8b80b5ee603ed95b11762fca59ca0abb3078fad8b036c445b4ee3144c0b50cf7
d69b810c505d00082a1d6f09dfd33406e954952ae16d560854ae80929bf2e229059b73ef62ee1e03
ca6cc9360e5746366008d89d9834172312ebfdabc7656614b4a4d0e3adb804ce75e5b74af930d67c
eda5181e5818715be0bb271045cbade92e44c4d19307c956d2afe3713349d6fd429307ccb05b69f2
1402005d8e1113dade10af9319607b41870998409f56190d671bda9dab6fe2d7a7f2cdd3f8ef97c2
1154f9749cc3a684e231ca22de80077e27cac65ca3061f427bb2583c9c46aec0b6dbc96e7788bbef
2cdf9092fafd07d8615a53f14791225b1eb33bd38ce9ed5b7e5e0d12162219100f8a2e740e9003cb
fe11d882833fdf6b5b2e520c002fc1479b78d99fb61db9fc084627ff132fb9a74734969e4ac88e48
5538575ae123eff390f5cb8ef3bf4579a24575f07eb56b8c050bc6ad793f4f54e9e196a4199f29fc
acc323e074de8db4a813916c3c99e137a839946eb81fb8504890235d0facc75cf214816423224a73
9a6ad8f508ca2fd72f95c2bc916f58fbdd28272ec382080f7f14daa0cedc06b766c9c66c41b67ba9
fe4153482dfcd25bf877b872c4e067a25db4e49e710598d34a5954986064f08a0630efa7ce6cc665
8ecfd8bf34d6915fe324dcd84ceecf7d7a5af4b50da793e725909a2287b7c34cbed5e20b5bcf42bf
62993dd640815f7012980058b1c3bab5e5d6de79150b5b3c234b106d6e21f7c78a4c33aba0b5db1f
efe0e2d87ebec47736f3ed10f5f2942275c2818a4dea626d6f55ab14210fa97a96d80542a044eb11
d1e92e8902c8fe9655606fa84caecfd58762cefcac151eebd11f3d41f1ec43956aceb62dda42720e
44dccb3d6a8f499e1dfa94e0d44936e0457218adcbebc19b491b6f5db56c49920bd04c94b196fdec
072c96abcef7f645ba6c395e8a0c066595a3d9c4847de163b8e6e3780079e015549b37ac7dc8c523
831881c3509d008bf9ff3f8b7774ad0cd4c0204751d1ce1f6546ee1c3441a3c3e02422e4ceb88d5b
30cd59deac64512c5656073875092c44affd79469b87522a42fcb91f25619255afe08939f0b40834
9ddc5c7005c793134476b7ef4051aecdbcdfd98218bc0b9af4b7b6c114e3343475851db7d3021a4d
1b815095634d2d0b0896e05014c20217989268dbfcb79fc379303108467eca4734b087f937cc2315
c355b0ddd7f678c8cc561914015737fe9c6d5f9b42efac3ad7b11b980ba19ef269a7f5f1a676806d
38bc3ce0497cd724886eef18d03f0f1f5c44dd3d70dbc3effe562449da0b462357f31418e226e33e
40c09fd55c6040f7d4562ff0333c0e11ec0fe6eef92976de36b017c3ce9f995d45a78d26a9db8c11
31b58dc5acca410e64431eef377b1596fc5c7d79b41cd524367969af4a4973a985a39dd8789277ef
6045dccd6c204dc9f108cc4ba02edf342e39a20c2f9a168d428ea98f9af0d37250f91ef243011cc8
b4a10308b6725377cb4b88f0244c4d8cb9de7d03b96674e28a7efcf399e39c48de8beca1ee3cc343
68564d620799fb0b7967f7767051e8e66ebf77fb7845ece1f5f80d2666c200122641ce4952cc4d1d
535cc6f25ef0a6afcdf9d5a4542772f44f11048baded8eb8b8592469f5752db906a0e14746b05b01
cbe9a2d362c4c8b52a769345c523ead868670e6cbf0429009bcaea9371931ca699e48816d4ffa4ad
138ef262fa0c46e748055b088e6f34b7f2a58ecd30ac1d8217834002e495d5f37f5ce86cab010054
d814897d1fd2c9f9a594e6c5bf1ed40ccc1a175cebb0cf83a62f2ba540ebd1aad4682d1ab4139505
0e13bb5e0a8da8fa7d0bd1e13055513efb4a8e9b38a4a56437709574c5c4161c6bf74692f5836da9
bdc5f087556810ad70ac8220e1436ce17f5ce6987f5a07a375847af040f6a85b70e7d2b07816e307
072877f57d8634297495939fb063c74953e380133656763b7efa44c0ebfc97cf1be87bc991ad048b
99ad0592d84bd498b9277abec11db4dc4f60cb634ff9bc681fa5db686e63a62c514e6bb0272c2527
44e94cf632a6f495cdb4f87d185fe0db58cdbb430411f0b2b364c8710de526db898f7bd1842949f3
90d07ffbc802c4bc9788288474823f726955fd5a7c75f66690bf309796d44b618932dc51e303a358
ae01c221006c66131be3722bb781affa8bc0d93b1c5ed33903adef652e4c22207ac415eac9952cc9
2811270d183205e4e345180302d8904519479a1028514ba954fe68a5465136f302b71fcd010042dd
30cdce92bd29e496310eb9188f6eb93688bb39c899ab79eb1fec727eb86388bcacae4e58340901f8
b26fbf66f0f2593c60d99f2701b75d74f9e902e2bc7374a70e08dab10519ad895205a7a932fb0fa3
c1e85d496401e90197f51ea87d5bf61c0141f94e0c07034b6d9e0b12b6c6482a30aecd4cc7e93917
37911496296baa6d3f43e6db61ade08ad2c6f9182f5ad15c726ee48d0f8885fb4b05b05c22fe1ec1
7f9667cc7fb85ade96df5422998c8288b9cd02eb82c404084145c25f37017debbeba2869bd0e1982
d5453a51902d55a55909c238b99322acefc0e6351f74d527e2995c8934e5c550bb01ab3f2f2dbb5e
057c8415b29cc02cdb2bb69c37eaf90040b0208984e2521edb186303334a1f5aacc5a9fafce5b813
e421c47aab8bca2d17a43020e2749142e708b87411e707e05400b17cd124aaeb4147f5e5c0924aba
017960367a25d574f74a3bf71211ffe8506185a0f41d605e2fb9f6f2600df3415c84021745cfc26e
538406ca7b9331ee7c9337c5669d8119095880aa02a5b972054256ec269e3e0c338408f36492afa4
0ae7b67de84a9bb364f41e6a8223aa928f2849c397dc8785bb2f465b3074a29d31ff4c0ab77ef0e2
6b98510399072278b971528aebf306046cf9ceea976915a93a62a36ec27edde897ee0b446d9c673b
fd0929bcd3581ccfa1abac9286d67897e7431cbb4e95a603c24d6fb9b68455e582e2a047837a12e3
4ec8d8449692f4ef25188ddac029e514875c1609825a5e2f0f26dba79da575b16dc22d76b7154fcf
3fa9d395145ad9f6a3d9872061f7fb562f62c4b14c60bac36338628f506650349e78a4d722190290
9190e8911c19114b844e233954aac85afe904124b14641e3c5c06f5e16bb95a830ce410dd164ab8d
f210265be6f649daa9a9115596837fae9bfc1c4420bc2846972f700defc836fe0066355297c42bf6
13c5c3cb03fb49ed67f87ee684dc6dc3bac77f50c1a0f90f407bd1f88c57095cec576eda9c3e3f29
36e5f02e69004e8f56f0ac2f81ad2b143145b5457e191335a83c18586327c5f8dad49f4a681cce45
e38b88cbcdcad5e18f6bf669f0be90a7637ada6b8fe210012ed162878c82ad1e443c70eacde298bf
ebb700aed32ac75fd3a2160e40b8f0ed12ff6df255409ffc3fe234544c3bb65c5d817b5686e6d931
af3faed54a998fad563516d439211469694d5ea63116d85a0ddef99c2674b8d9977c7629362970f5
a02e5f007388afcea37edbac1200af20bf90b0992447d295ce707d6a85019b18231d6f1fdf2611bd
5660fd2b1b6919baa628120e13fbfc771ae110b8fbd9a16c710f0fbdd3fa00d91d9b7916d90f6033
1e519363f7a048931128d66213051b7650b1e35cd5ad0ba3710953b0459f90d2f036f44a24308017
3572e53e58a8a85cde9963588dd1122e4bc24a7c7cd4aefefed5fad8b7359b529bed83c75d2b978e
8f494c503747dd3791bbc1ddd311a4919416ce30e4b3ad89bc82b7543a32b6f583176e018c381ac0
81d091b33fcce3e790956168e4022f211d975ecfb03bc1031b05a0f313235d8c25982c1b7a3da36f
52d37ab4da6970002869b613585533aee81d7723e7a6838ba0f28790c43616191fc537e46b084239
f8bb88f2aca1bafc559f7e2523695eca73b0d169e73207c596ddeea0540b54c8642b3e18144100c4
0948283097e3ec4fc369310f7e21e55172bd11f21166bcd2bfce68814f2e564ffa1811f68455143e
f244f70510cd2782290a1491e45e90bbe68d858a7eecc38c1ef76d88fd595eda034524a140029b89
9813598ada20a9aa7c190773bfba36522c388c2cb72e9d27d178f64db0f092c5eca35a35d2dfe959
33fdc23718beb2c9569a5bc5f362cff2d45e04704984b5c578c64c7b16a04ba3f06769b6cb953370
dc85ff90d093f9ca6b943e83588e4e898e94616a2fce56e199e775081e7731a4087492b2f4eb0e8d
644396f45154fd1308b6a888feb04c4cf14d8a2f49d0ff436fa58ab913c4084851a88e88ebca1b0c
33fd18a0d11e32ef2395b86a24e71fd435569882764f555cc2f9ebdc31c94cab399a99f79be807a3
e27176b4c2f058a8fc11f5e99423f22827fd1b01f6e627a9ebc9fe87be4d082a4dce3ff4cca5a6c2
fb904a81410864c942da1a32dd854edbd96d66f4b3655e7f2bf30f228d80f7af7fa96531a224e125
46d104b9e78d3cc2991db65cfb9282e91fb3b56f9b75045d46d8241c65e2e5138ac6a6b4c8720a94
eebb5cc01e65e5367fc4c6d4a2cb92e97415b1a2b0b2206c53aa30c14194d5b12e409427903ba373
927d8fa48b9b824f7c487b4c8fac52c34085f1af0820e5cb8fdb835e4dc8ff797c475c32ffc79538
aaaedc3640e2fde941ebef248a1823ee335c69633b2686a806238bff4ba10bf63dd2c654cf35352f
c9db433194b569fa6244bd0a44f65efc04f53f044021f14e79a7c86809ca7c95294f4541de483bc2
1b06f930e3dabd60a128144f723c0749c28758ff5176a797fa004a161453df9fcdc5f3bec350ca99
72a7183b8e79132e113f10969b76d6516309cb3dde0f966572cae7472736be7a45783537e67fbe38
573b48673ec130db3e3cf6ded9db986750c80677e003a3543a2f630797f67feaf9742dc3a3ccc7e7
e6c8b3415102786561c38e9d4fe0df762ca4d173a7479d3c1c1c6862dec7584376f7654f6e20dd93
d7044419d2f742f797fac6afdaf6b7b471dfbd9d9afcca6344a31c36b89de2277ed814156eff9a4b
c5899afa9fdab71d7d593411476d05e3abc13ad2d1c1138b9245b9c8dbdab80a7acf744e659bae12
669f0932571e349300731f12a6e1dfeec5050a9e16f105a76467fd016ffcc8d95613de4698e860a7
4d2b66b484cbc8cd72eb7336aa334045730331b1f54b4ac544344f399898fe6391e9642d9191776a
d9e4801654bdb3db457df2ce88654873f3640a0bc8e5261d7d9f6494ed07bcc7c06b1b1dc6ac7d5f
bbc59225660164fb3fd471b100e6e995c5f750af966ea902ea3775a7423132a19df350cf2a9921b3
e797e2003595023f9781ccec8f277b84b83a466320c3c3a08dcaba31ab80d78f651eb72a43f0aa62
02a62b2561fbdc76ac17c355b649287ccaae819c5c3c04842e2abf12b7ee2237bc5c936bdc2984fe
78dd62e8c30d46d15f9e23ff003c1a50902588786529158b92b552045b1d0167bc825e5d4704d933
c0f13ea3fa5b3ff356bd83097f3854fbdf183a71144d166412f0d5310942fd01a5e4a0d1b5e2c448
694a4691a3b124eeb3b520b118db20c82057e82307e7b2441f720f199465a967cc0c9698cd13f408
7a0f91c381785287e343814b87ca0b79ffd1207f030e459643e35e2b60625abd2cd20997afccec1a
75f885883fb994f90f43eeb0d1b20046f1360fd1d1cc1edaa1a5b79a6c515c6ff33f1b6dc8fc66c6
48322943127c32c78b558a337a49fa8dd827bff10f96e5c6a0502de1433a1504a9fe1c51e6b56726
1a7471a4d621d2ac6c06b24e35503b989be4018acb9710ae82744bedb1147ff6b618a2ead14ee4e0
99b2cf5cc5225bfbc46e4a85828b9d55c756c7b94eb3cd6b35d205859bca99fbfc1e839e636c2ddc
b2bc3e5500c072afee9e9ba799f352d69c896d1e9d9ad0c9a09383a815c0f961201f14b3f3d62f97
7c9b32b4016e98e7221524c60f8cba82aef5d1072b29f330e77e214bfc4ad6672c62ec33646c50e6
1e2214b94e3ab8e25f191186f49ddbdde27b67335f0d77dbed5957851217e0e3a4ed641d8318e665
46baa67fc8ac964405438e325c8918f75d73947e5531816cf586d331576cfec41438e7e95d5718c9
e0d658bd80b5c260703e97f3b546844e01ce196f89e36f5c594b2785dccfda68127274ac3e5eaacc
2aef9ea1dd8826d4d9412d2680fc3d7b470bef8275f84abfde04df01c655bc56f48f99e55ed5a03f
3b192c3a0ba1769cacf41dbf4e890ee3863de7d68236b81bf639c7e2d89b222c97ff7ba8e073080e
25812ab7b6ac94ec575226d3bbb5c62278b2218988e99b79faa5239467bfb2e6782c17ca05cc41e4
8cc95226e104b4ca1fdfe9c46b9a6f0d690966209f3f6a8cac5012065681b7e612dbdf4605553f68
60a0b8cd848bb80c1b2623b9fc7187a808c9ecc9b458fade23c0fb2f5a10344c1a9455e927686f29
193d4764ba6d10f456fd13f2414205d14e9734588f8e3fec3f4b658ee1298bc484612f3b6d78425a
4606065ec6ccfe5902cb806b64d995f91b5c8899472adf4fde00e28917556f371883a3b8c09a6873
ae29713c638ef45b1fb95e9874b4294c13e5c867f965938c95cb2a08eb69dedbf22018568234f9b9
bc29f799cda5114c1effb26607ba9dcfe724733e5792c62e0f07a239a4adef41fb9ca07591b2b678
0d62e65414a3d2e053ae40fad78435c0fd645fed9745c93053e1b0b4fb15b90307619cc2746bcdb7
d6a21d879b4d8953465417c24cb9429f79ed56cfbb65098a104f9cdb9bf8afd26e231209fe37808f
30a011d3f284cc7139a8de7166ded1ac042ba5ae4e7b482716f46e3ce10b5b5c95b6067f9cc05636
a13cf91161cc2e858542e8bca1d075f8374b6f47d9c4afa66e9d0cdb875569c6d96d8d2d540512e3
a15a8fba74fdb9dbb8c386b0762accbcca3e9fbdee1dcfdd89d7dea26f1266952f05132347c43582
b92a8452f8471b59f33ee4c21b01b9799306f271ec88ab188b8a7a567cfae8a66340a32ab63815e1
af6f5697ff3b6fbb7d15a9e77e647c910259b5e08c63ce60d2af6d3f85fa2c72558e4c422fc77af1
2e56e494019f29cc9ca616eb20fcde52160d9c658564817336b2ed9fa365708f02045bc975bfc979
74ed429c2d7763169d8911fc51f94cc8f02f656e2d8af4ae04c93d069acde29ebae91e1b02e6b4d1
484fe03713de6119f31ffec82d0db200a9e1691cdf2a7a5ad9ad75918371828e6285932355d8f50c
7b8793f2993790f71ccf15c455216c38f436bd5035bfb6ee13446fc23df1e526f273b3e6a91f6043
5fe38abbe1bcffbf678b3311086490c0fcb6bbb0055438a8f74bf96027c59334cdc03532d0f30a78
29961c7beb5ed90803359962de1f271dd4fdeac310186020273e6d42a0e0e9243617a6891d18dc75
ca99a9f52bb2e3e5bdebfc49792f46b335f9d82411776032c9bc71228c68f65392c0b4ed9b6595b3
ae92dfd71cae3cc310c156df3b7f6dd1f4b889ea51a7a12588483ad43e7d24fda5e0ca6f079a4dee
ee9ec23fcdb816b04010ea37fd5fe83a536273fcfb4a8c7edf40e5c71e431f8f7d5cd126d41d287c
43ee03747e146d05b980d9561263d7059c1ad30ba261ca9eded909dbcd899e8598f24e5a48e40b72
0fd12c7bcd39e51a1b782811012f7e3f5c6f4b4ba3dd4a865d4bca007c0bc95437ec4ed2a07ef069
96a38340c8f2186ca495c4b8c083fa8c774e4bcd424574172d83266f85258fe616be2e7af4668b16
d69cbd3792de0e02c4bec741d8a8d4a1ef6337e42a7550c8895a19505a8b9372fc1de05284b0e9d5
cb18f2549c089b3eff8d1f5318b41eb1c721ca953d36f504c994b932e026075d85e661594e6fdfd3
509bcadf3d20a98f13cf34761d8074d94c448ee5fac915d4b2de385780c52c88bd4f125d2d341631
44e3c763f27ec90cf13f91f702d7514882f713034f78a15ef9ed2aaee811c1adc2fa03657b8b0717
76e7bb1722a06fb79ec52f93f0e3ff13f431533240f3e20c8491542cdb5d65ce7aa553e00e2ef00a
1994db3443251a7b72c06050d4587a9f42f3f2424cd2eb05af24abd6279f576db3519899b8dfcb1f
5ab7fd95d60a6c695ef905e81b907c20ccb0cb6a8c7ef814e950c931e45c0904eb65fcd5d4f62357
2ea223a050e6ac0d97ab780c28509c768bc66edec0fe6dfab9f96b78b498eb397e402aeff4747ffb
c8e2c7e5b0b0c2d5704ccb7ea1ca3102f196a7e5f885c893af744b34fa33cf09efbf1cb9dbc698f1
76157d2a1ea544e90db01db29428819c287bee0d012ae5caf3b9d163809bad1bb7e7a85a403c26
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
 HBW_SetTarget_XZ <Virtual>  0
 PID_10 PID  0
 VGR_Movement TASK  0 -1
 SSC_Check_InOut <Virtual>  0
 PID_11 PID  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 V801 MHR799 1 0x0 C797 MC397 1 0x0 MC250 C799 1 0x0 MHR420 V820 1"

// Rung VGR_Copy_State#2
// Offset 43
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 C810 MI502 1 0x0 C811 MI503 1 0x0 Y16 MI500 1 0x0 Y43 MI501 1 0x0 MHR800 D1600 1 0x0 MHR801 D1601 1 0x0 X24 MI504 1 0x0 X14 MI505 1"

// Rung MPO_Copy_State#2
// Offset 41
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 MC808 C1621 1 0x0 C1621 MI808 1 0x0 C1633 MI818 1"

// Rung SLD_Copy_State#2
// Offset 29
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 C1200 MI600 1 0x0 C1201 MI601 1 0x0 MC600 C1202 1 0x0 MHR1200 V2400 1 0x0 MHR1201 V2401 1 0x0 MC601 C1500 1 0x0 MHR1202 V2402 1 0x0 MHR1203 V2403 1 0x0 MHR1204 V2404 1 0x0 MHR1205 V2405 1"

// Rung SSC_Copy_State#2
// Offset 25
NOP

// Rung SSC_Copy_State#3
// Offset 26
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_SetTarget_XZ
$LGCMOD HBW_SetTarget_XZ

// Rung HBW_SetTarget_XZ#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5280 V140
POPBOOL
ANDE V105 3
MOVE 2990 V140

// Rung HBW_SetTarget_XZ#2
// Offset 23
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
ANDE V106 3
MOVE 3240 V142

// Rung HBW_SetTarget_XZ#3
// Offset 46
RET

// End of Code Block HBW_SetTarget_XZ
$LGCEND HBW_SetTarget_XZ

// Beginning of Code Block SSC_Check_InOut
$LGCMOD SSC_Check_InOut

// Rung SSC_Check_InOut#1
// Offset 0
STRN X42
OUT C1200

// Rung SSC_Check_InOut#2
// Offset 2
STRN X43
OUT C1201

// Rung SSC_Check_InOut#3
// Offset 4
RET

// End of Code Block SSC_Check_InOut
$LGCEND SSC_Check_InOut

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE $HBW_Encoder_X.Acc D140
MOVE $HBW_Encoder_Z.Acc D142

// Rung HBW_Move_XZ#5
// Offset 19
NOP

// Rung HBW_Move_XZ#6
// Offset 20
#BEGIN FMT_COMMENT 
"Loop Start"
#END

REPEAT

// Rung HBW_Move_XZ#7
// Offset 21
#BEGIN FMT_COMMENT 
"Enable/Disable PID control<br>"
"Set this to ST2 to disable PID for XZ<br> <br>"
"When PID is disabled V118 & V120 are used for PWM %25"
#END

STR ST2
OUT C90

// Rung HBW_Move_XZ#8
// Offset 23
#BEGIN FMT_COMMENT 
"Set XY direction<br>"
"Based on starting position compared to target<br>Needs to "
"be inside loop to keep outputs active"
#END

STR ST1
DUPBOOL
ANDLT D140 V140
OUT C51
POPBOOL
ANDLE D142 V142
OUT C52

// Rung HBW_Move_XZ#9
// Offset 36
#BEGIN FMT_COMMENT 
"PID Controller for X<br>& PID constants"
#END

STR C90
PID PID_10 0x60 $HBW_Encoder_X.Acc 0 8200 0.0 8200 """""" 20 100 WY0 DST511
PIDINIT PID_10 1000 0.01 0.01 0
MOVE V140 PID_10.SP
NOT
MOVE V118 PID_10.Output

// Rung HBW_Move_XZ#10
// Offset 61
#BEGIN FMT_COMMENT 
"PID Update current X value"
#END

STR ST1
MOVE $HBW_Encoder_X.Acc PID_10.PV

// Rung HBW_Move_XZ#11
// Offset 64
#BEGIN FMT_COMMENT 
"PID Controller for Z<br>& PID constants"
#END

STR C90
PID PID_11 0x40 DST511 DST511 DST511 DST511 DST511 """""" 35 100 WY1 DST511
PIDINIT PID_11 1000 0.01 0.01 0
NOT
MOVE V120 PID_11.Output

// Rung HBW_Move_XZ#12
// Offset 80
#BEGIN FMT_COMMENT 
"PID Update current Z value"
#END

STR ST1
MOVE $HBW_Encoder_Z.Acc PID_11.PV

// Rung HBW_Move_XZ#13
// Offset 83
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 88

// Rung HBW_Move_XZ#14
// Offset 98
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE $HBW_Encoder_X.Acc V140
OUT Y50

// Rung HBW_Move_XZ#15
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE $HBW_Encoder_X.Acc V140
OUT Y51

// Rung HBW_Move_XZ#16
// Offset 110
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 WY1

// Rung HBW_Move_XZ#17
// Offset 125
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Move_XZ#18
// Offset 131
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Move_XZ#19
// Offset 137
STR ST1
STR C51
ANDGE $HBW_Encoder_X.Acc V140
STRN C51
ANDLE $HBW_Encoder_X.Acc V140
ORSTR
ANDSTR
ANDN C150
STR C52
ANDGE $HBW_Encoder_Z.Acc V142
STRN C52
ANDLE $HBW_Encoder_Z.Acc V142
ORSTR
ANDSTR
OUT C150

// Rung HBW_Move_XZ#20
// Offset 164
#BEGIN FMT_COMMENT 
"Loop End"
#END

UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Test slot X & Y target value for out of range<br>"
"if X value greater than 4, fault code 105<br>"
"if Y value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#9
// Offset 38
#BEGIN FMT_COMMENT 
"Task Send<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if conveyor light barriers broken suggesting a pallot "
"is still there."
#END

STR C101
ANDN C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
AND X1
AND X2
JMP HBW_Program.S7
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
STRN X1
ORN X2
ANDSTR
JMP HBW_Program.S2
MOVE 107 V181

// Rung HBW_Program#10
// Offset 73
#BEGIN FMT_COMMENT 
"Task Recieve<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if outer conveyor light barrier no broken suggesting "
"no pallot is there."
#END

STR C102
ANDN C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
ANDN X2
JMP HBW_Program.S13
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
AND X2
JMP HBW_Program.S2
MOVE 108 V181

// Rung HBW_Program#11
// Offset 105
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#12
// Offset 107
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#13
// Offset 109
#BEGIN FMT_COMMENT 
"Task Send - Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 111
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#15
// Offset 114
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"

// Rung HBW_Program#16
// Offset 123
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1
OUT C12

// Rung HBW_Program#17
// Offset 129
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
AND C12
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 133
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 136
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 138
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 140
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 143
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 149
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 152
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 154
#BEGIN FMT_COMMENT 
"Task Send - Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 156
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 159
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 164
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 169
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 172
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 175
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 177
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 179
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 182
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 188
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 191
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 193
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 195
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 198
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 214
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 3000 C80

// Rung HBW_Program#41
// Offset 218
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#42
// Offset 222
NOP

// Rung HBW_Program#43
// Offset 223
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 225
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 227
#BEGIN FMT_COMMENT 
"Reserved Stage<br>"
"Just incase I need an extra stage for Task Send"
#END

SG HBW_Program.S12

// Rung HBW_Program#46
// Offset 229
#BEGIN FMT_COMMENT 
"Fault<br>Should never hit this reserve stage"
#END

STR ST1
JMP HBW_Program.S2

// Rung HBW_Program#47
// Offset 231
#BEGIN FMT_COMMENT 
"Task Receive - Conveyor In<br>& Move XZ to Conveyor"
#END

SG HBW_Program.S13

// Rung HBW_Program#48
// Offset 233
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 10 V131

// Rung HBW_Program#49
// Offset 236
#BEGIN FMT_COMMENT 
"Conveyor Out In"
#END

STR X1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 45
OUT Y49

// Rung HBW_Program#50
// Offset 252
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x1 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
AND X1
ONDTMR T4 3000 C80

// Rung HBW_Program#51
// Offset 257
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#52
// Offset 261
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2750 V142

// Rung HBW_Program#53
// Offset 266
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#54
// Offset 271
#BEGIN FMT_COMMENT 
"Movements completed<br>"
"Conveyor inner beam broken and XZ move complete"
#END

STR HBW_Move_XZ.Done
ANDN X1
JMP HBW_Program.S14
HALT HBW_Move_XZ

// Rung HBW_Program#55
// Offset 275
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#56
// Offset 278
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 280
#BEGIN FMT_COMMENT 
"Task Receive - Pick"
#END

SG HBW_Program.S14

// Rung HBW_Program#58
// Offset 282
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#59
// Offset 285
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#60
// Offset 291
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S15

// Rung HBW_Program#61
// Offset 294
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#62
// Offset 296
#BEGIN FMT_COMMENT 
"Task Receive - Move to Storage"
#END

SG HBW_Program.S15

// Rung HBW_Program#63
// Offset 298
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#64
// Offset 301
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"
OUT C12

// Rung HBW_Program#65
// Offset 311
#BEGIN FMT_COMMENT 
"Math calculate Y target for placement"
#END

STRPD C12
MATH V142 "V142 - 100"

// Rung HBW_Program#66
// Offset 321
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#67
// Offset 326
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S16
HALT HBW_Move_XZ

// Rung HBW_Program#68
// Offset 329
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#69
// Offset 332
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#70
// Offset 334
#BEGIN FMT_COMMENT 
"Task Receive - Place<br>Place onto storage shelf"
#END

SG HBW_Program.S16

// Rung HBW_Program#71
// Offset 336
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#72
// Offset 339
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#73
// Offset 345
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S17

// Rung HBW_Program#74
// Offset 348
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#75
// Offset 350
#BEGIN FMT_COMMENT 
"Task Receive - Move to Idle"
#END

SG HBW_Program.S17

// Rung HBW_Program#76
// Offset 352
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#77
// Offset 355
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 4300 V140
MOVE 1400 V142

// Rung HBW_Program#78
// Offset 360
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#79
// Offset 365
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S1
HALT HBW_Move_XZ

// Rung HBW_Program#80
// Offset 368
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#81
// Offset 371
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#82
// Offset 373
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#83
// Offset 375
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#84
// Offset 377
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#85
// Offset 380
#BEGIN FMT_COMMENT 
"Force Ready<br>Jump to ready state without resetting<br>"
"Reset Fault code"
#END

STR ST1
MOVE MC105 C105
AND C105
JMP HBW_Program.S1
MOVE 0 V181

// Rung HBW_Program#86
// Offset 387
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#87
// Offset 389
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#88
// Offset 391
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#89
// Offset 394
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#90
// Offset 409
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
ANDLE $HBW_Encoder_X.Acc 8050
OUT Y50

// Rung HBW_Program#91
// Offset 415
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#92
// Offset 418
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#93
// Offset 433
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#94
// Offset 436
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#95
// Offset 439
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#96
// Offset 454
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#97
// Offset 457
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
ANDLE $HBW_Encoder_Z.Acc 3500
OUT Y4

// Rung HBW_Program#98
// Offset 463
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#99
// Offset 478
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#100
// Offset 480
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#101
// Offset 482
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#102
// Offset 484
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#103
// Offset 486
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#104
// Offset 488
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#105
// Offset 491
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#106
// Offset 494
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 40 MHR120 1"

// Rung HBW_Program#107
// Offset 510
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick
HALT HBW_Place

// Rung HBW_Program#108
// Offset 514
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#109
// Offset 531
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 100
OUT Y7

// Rung HBW_Program#110
// Offset 547
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#111
// Offset 564
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#112
// Offset 580
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#113
// Offset 584
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#114
// Offset 586
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#115
// Offset 589
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#116
// Offset 593
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#117
// Offset 596
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"Reset Stage"
#END

SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Reset VGR Fault Code"
#END

STR ST1
MOVE 0 V801

// Rung VGR_Program#7
// Offset 25
#BEGIN FMT_COMMENT 
"Stop VGR Movement Task"
#END

STR ST1
HALT VGR_Movement

// Rung VGR_Program#8
// Offset 27
STR ST1
COPY 0x0 "4 0x0 0 N810 1 0x0 0 N811 1 0x0 0 N812 1"

// Rung VGR_Program#9
// Offset 39
STR ST1
OUT Y28

// Rung VGR_Program#10
// Offset 41
STR ST1
RST Y29

// Rung VGR_Program#11
// Offset 43
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
AND X26
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100
OUT Y26

// Rung VGR_Program#12
// Offset 61
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
AND X25
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100
OUT Y24

// Rung VGR_Program#13
// Offset 79
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100
OUT Y22

// Rung VGR_Program#14
// Offset 96
STR X25
AND X26
AND X27
ONDTMR T54 100 C798

// Rung VGR_Program#15
// Offset 102
STR C798
OUT $VGR_Encoder_Rot.ResetEdge
OUT $VGR_Encoder_X.ResetEdge
OUT $VGR_Encoder_Y.ResetEdge

// Rung VGR_Program#16
// Offset 106
STR C798
JMP VGR_Program.S2

// Rung VGR_Program#17
// Offset 108
#BEGIN FMT_COMMENT 
"Ready State"
#END

SG VGR_Program.S2

// Rung VGR_Program#18
// Offset 110
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 118
STR ST1
OUT C797

// Rung VGR_Program#20
// Offset 120
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 122
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#22
// Offset 124
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S8

// Rung VGR_Program#23
// Offset 126
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S13

// Rung VGR_Program#24
// Offset 128
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S22

// Rung VGR_Program#25
// Offset 130
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S20

// Rung VGR_Program#26
// Offset 132
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

SG VGR_Program.S3

// Rung VGR_Program#27
// Offset 134
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#28
// Offset 142
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 5360 N810

// Rung VGR_Program#29
// Offset 145
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 800 N811

// Rung VGR_Program#30
// Offset 148
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 620 N812

// Rung VGR_Program#31
// Offset 151
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C414

// Rung VGR_Program#32
// Offset 157
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
AND C414
JMP VGR_Program.S4
HALT VGR_Movement

// Rung VGR_Program#33
// Offset 161
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#34
// Offset 165
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#35
// Offset 167
#BEGIN FMT_COMMENT 
"Pick up disk from HBW"
#END

SG VGR_Program.S4

// Rung VGR_Program#36
// Offset 169
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#37
// Offset 177
STR ST1
SET Y28

// Rung VGR_Program#38
// Offset 179
STR Y28
SET Y29

// Rung VGR_Program#39
// Offset 181
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#40
// Offset 196
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 199
STR X25
JMP VGR_Program.S5

// Rung VGR_Program#42
// Offset 201
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#43
// Offset 203
#BEGIN FMT_COMMENT 
"Move crane from HBW to MPO"
#END

SG VGR_Program.S5

// Rung VGR_Program#44
// Offset 205
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#45
// Offset 213
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 3550 N810

// Rung VGR_Program#46
// Offset 216
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 800 N811

// Rung VGR_Program#47
// Offset 219
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#48
// Offset 222
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C415

// Rung VGR_Program#49
// Offset 228
STR VGR_Movement.DoneThisScan
AND C415
JMP VGR_Program.S10
HALT VGR_Movement

// Rung VGR_Program#50
// Offset 232
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#51
// Offset 236
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#52
// Offset 238
#BEGIN FMT_COMMENT 
"Assign new values for next VGR location"
#END

SG VGR_Program.S10

// Rung VGR_Program#53
// Offset 240
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#54
// Offset 248
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 3528 N810

// Rung VGR_Program#55
// Offset 251
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 3400 N811

// Rung VGR_Program#56
// Offset 254
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 2000 N812

// Rung VGR_Program#57
// Offset 257
STR ST1
TMR T51 100

// Rung VGR_Program#58
// Offset 260
STR T51.Done
JMP VGR_Program.S6

// Rung VGR_Program#59
// Offset 262
#BEGIN FMT_COMMENT 
"Position Crane to drop disk onto MPO"
#END

SG VGR_Program.S6

// Rung VGR_Program#60
// Offset 264
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#61
// Offset 272
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C416

// Rung VGR_Program#62
// Offset 278
STR VGR_Movement.DoneThisScan
AND C416
JMP VGR_Program.S7
HALT VGR_Movement

// Rung VGR_Program#63
// Offset 282
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#64
// Offset 286
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#65
// Offset 288
#BEGIN FMT_COMMENT 
"Release vacuum and turn off compressor"
#END

SG VGR_Program.S7

// Rung VGR_Program#66
// Offset 290
STR ST1
RST Y29

// Rung VGR_Program#67
// Offset 292
STR ST1
ONDTMR T53 100 C416

// Rung VGR_Program#68
// Offset 296
STR C416
RST Y28

// Rung VGR_Program#69
// Offset 298
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C416
JMP VGR_Program.S1

// Rung VGR_Program#70
// Offset 300
#BEGIN FMT_COMMENT 
"VGR.T2 - Move Disk from SLD to Loading Bay"
#END

SG VGR_Program.S8

// Rung VGR_Program#71
// Offset 302
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#72
// Offset 310
#BEGIN FMT_COMMENT 
"Get assign location values based on color input as number"
#END

STR ST1
RANGECHECK V820 0x0 3 1 C555

// Rung VGR_Program#73
// Offset 315
#BEGIN FMT_COMMENT 
"If N820 == 0, no color passed, enter fault"
#END

STR C555
JMP VGR_Program.S30
MOVE 4 V801

// Rung VGR_Program#74
// Offset 319
#BEGIN FMT_COMMENT 
"If N820 == 1, White disk needs to be picked up<br>"
#END

STRE V820 1
COPY 0x1 "4 0x0 1790 N810 1 0x0 1485 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#75
// Offset 333
#BEGIN FMT_COMMENT 
"If N820 == 2, Red disk needs to be picked up"
#END

STRE V820 2
COPY 0x1 "4 0x0 1470 N810 1 0x0 1715 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#76
// Offset 347
#BEGIN FMT_COMMENT 
"If N820 == 3, Blue disk needs to be picked up"
#END

STRE V820 3
COPY 0x1 "4 0x0 1205 N810 1 0x0 2315 N811 1 0x0 3220 N812 1"

// Rung VGR_Program#77
// Offset 361
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1

// Rung VGR_Program#78
// Offset 366
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
JMP VGR_Program.S9
HALT VGR_Movement

// Rung VGR_Program#79
// Offset 369
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#80
// Offset 373
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#81
// Offset 375
#BEGIN FMT_COMMENT 
"Vacuum on to pick up disk at SLD"
#END

SG VGR_Program.S9

// Rung VGR_Program#82
// Offset 377
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#83
// Offset 385
STR ST1
SET Y28

// Rung VGR_Program#84
// Offset 387
STR Y28
SET Y29

// Rung VGR_Program#85
// Offset 389
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#86
// Offset 404
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#87
// Offset 407
STR X25
JMP VGR_Program.S11

// Rung VGR_Program#88
// Offset 409
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#89
// Offset 411
#BEGIN FMT_COMMENT 
"Move VGR from SLD to Loading Bay"
#END

SG VGR_Program.S11

// Rung VGR_Program#90
// Offset 413
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#91
// Offset 421
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 990 N810

// Rung VGR_Program#92
// Offset 424
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 2275 N811

// Rung VGR_Program#93
// Offset 427
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#94
// Offset 430
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C423

// Rung VGR_Program#95
// Offset 436
STR VGR_Movement.DoneThisScan
AND C423
JMP VGR_Program.S17
HALT VGR_Movement

// Rung VGR_Program#96
// Offset 440
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#97
// Offset 444
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#98
// Offset 446
#BEGIN FMT_COMMENT 
"Assign new Values for next VGR location"
#END

SG VGR_Program.S17

// Rung VGR_Program#99
// Offset 448
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#100
// Offset 456
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 990 N810

// Rung VGR_Program#101
// Offset 459
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 2275 N811

// Rung VGR_Program#102
// Offset 462
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 1650 N812

// Rung VGR_Program#103
// Offset 465
#BEGIN FMT_COMMENT 
"Delay to reset Done for VGR_Movement"
#END

STR ST1
TMR T52 100

// Rung VGR_Program#104
// Offset 468
STR T52.Done
JMP VGR_Program.S18

// Rung VGR_Program#105
// Offset 470
#BEGIN FMT_COMMENT 
"Position Crane to drop disk into Loading Bay"
#END

SG VGR_Program.S18

// Rung VGR_Program#106
// Offset 472
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#107
// Offset 480
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#108
// Offset 488
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C424

// Rung VGR_Program#109
// Offset 494
STR VGR_Movement.DoneThisScan
AND C424
JMP VGR_Program.S12
HALT VGR_Movement

// Rung VGR_Program#110
// Offset 498
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#111
// Offset 502
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#112
// Offset 504
#BEGIN FMT_COMMENT 
"Release vacuum and drop disk"
#END

SG VGR_Program.S12

// Rung VGR_Program#113
// Offset 506
STR ST1
RST Y29

// Rung VGR_Program#114
// Offset 508
STR ST1
ONDTMR T54 100 C418

// Rung VGR_Program#115
// Offset 512
STR C418
RST Y28

// Rung VGR_Program#116
// Offset 514
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C418
JMP VGR_Program.S1

// Rung VGR_Program#117
// Offset 516
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

SG VGR_Program.S13

// Rung VGR_Program#118
// Offset 518
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#119
// Offset 526
#BEGIN FMT_COMMENT 
"Assign Rotation Value"
#END

STR ST1
MOVE 40 N810

// Rung VGR_Program#120
// Offset 529
#BEGIN FMT_COMMENT 
"Assign X Value"
#END

STR ST1
MOVE 140 N811

// Rung VGR_Program#121
// Offset 532
#BEGIN FMT_COMMENT 
"Assign Y Value"
#END

STR ST1
MOVE 3085 N812

// Rung VGR_Program#122
// Offset 535
#BEGIN FMT_COMMENT 
"Call Movement Task"
#END

STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C419

// Rung VGR_Program#123
// Offset 541
#BEGIN FMT_COMMENT 
"Move to next stage of task if movement successfully completed."
#END

STR VGR_Movement.DoneThisScan
AND C419
JMP VGR_Program.S14
HALT VGR_Movement

// Rung VGR_Program#124
// Offset 545
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#125
// Offset 549
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#126
// Offset 551
#BEGIN FMT_COMMENT 
"Vacuum on to pick up disk at Loading Bay"
#END

SG VGR_Program.S14

// Rung VGR_Program#127
// Offset 553
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#128
// Offset 561
STR ST1
SET Y28

// Rung VGR_Program#129
// Offset 563
STR Y28
SET Y29

// Rung VGR_Program#130
// Offset 565
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#131
// Offset 580
STR Y29
ANDN X25
OUT Y22

// Rung VGR_Program#132
// Offset 583
STR X25
JMP VGR_Program.S15

// Rung VGR_Program#133
// Offset 585
STR C799
JMP VGR_Program.S1

// Rung VGR_Program#134
// Offset 587
#BEGIN FMT_COMMENT 
"Move Crane from Loading Bay to HBW"
#END

SG VGR_Program.S15

// Rung VGR_Program#135
// Offset 589
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#136
// Offset 597
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 5395 N810

// Rung VGR_Program#137
// Offset 600
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 763 N811

// Rung VGR_Program#138
// Offset 603
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 0 N812

// Rung VGR_Program#139
// Offset 606
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C421

// Rung VGR_Program#140
// Offset 612
STR VGR_Movement.DoneThisScan
AND C421
JMP VGR_Program.S19
HALT VGR_Movement

// Rung VGR_Program#141
// Offset 616
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#142
// Offset 620
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#143
// Offset 622
SG VGR_Program.S19

// Rung VGR_Program#144
// Offset 624
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#145
// Offset 632
#BEGIN FMT_COMMENT 
"Set Rotation Value"
#END

STR ST1
MOVE 5405 N810

// Rung VGR_Program#146
// Offset 635
#BEGIN FMT_COMMENT 
"Set X Value"
#END

STR ST1
MOVE 763 N811

// Rung VGR_Program#147
// Offset 638
#BEGIN FMT_COMMENT 
"Set Y Value"
#END

STR ST1
MOVE 685 N812

// Rung VGR_Program#148
// Offset 641
#BEGIN FMT_COMMENT 
"Delay to reset Done for VGR_Movement"
#END

STR ST1
TMR T56 100

// Rung VGR_Program#149
// Offset 644
STR T56.Done
JMP VGR_Program.S21

// Rung VGR_Program#150
// Offset 646
SG VGR_Program.S21

// Rung VGR_Program#151
// Offset 648
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#152
// Offset 656
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#153
// Offset 664
STR ST1
ENTASK VGR_Movement 0x1 0 0x1
OUT C426

// Rung VGR_Program#154
// Offset 670
STR VGR_Movement.DoneThisScan
AND C426
JMP VGR_Program.S16
HALT VGR_Movement

// Rung VGR_Program#155
// Offset 674
#BEGIN FMT_COMMENT 
"Jump to Fault state"
#END

STR C780
OR C781
OR C782
JMP VGR_Program.S30

// Rung VGR_Program#156
// Offset 678
#BEGIN FMT_COMMENT 
"Reset State if reset is called"
#END

STR C799
JMP VGR_Program.S1

// Rung VGR_Program#157
// Offset 680
#BEGIN FMT_COMMENT 
"Release Vacuum, Drop Disk"
#END

SG VGR_Program.S16

// Rung VGR_Program#158
// Offset 682
STR ST1
RST Y29

// Rung VGR_Program#159
// Offset 684
STR ST1
ONDTMR T55 100 C422

// Rung VGR_Program#160
// Offset 688
STR C422
RST Y28

// Rung VGR_Program#161
// Offset 690
#BEGIN FMT_COMMENT 
"VGR.T1 Complete, Reset to 0 state"
#END

STR C422
JMP VGR_Program.S1

// Rung VGR_Program#162
// Offset 692
#BEGIN FMT_COMMENT 
"VGR.T4 - Move Disk from Loading Bay to Shipping Truck"
#END

SG VGR_Program.S22

// Rung VGR_Program#163
// Offset 694
STR ST1
JMP VGR_Program.S2

// Rung VGR_Program#164
// Offset 696
#BEGIN FMT_COMMENT 
"Manual Control"
#END

SG VGR_Program.S20

// Rung VGR_Program#165
// Offset 698
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#166
// Offset 706
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100

// Rung VGR_Program#167
// Offset 721
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#168
// Offset 724
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#169
// Offset 726
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100

// Rung VGR_Program#170
// Offset 741
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#171
// Offset 743
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#172
// Offset 746
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Program#173
// Offset 761
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#174
// Offset 763
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#175
// Offset 766
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#176
// Offset 768
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#177
// Offset 770
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#178
// Offset 772
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#179
// Offset 774
STRN C500
JMP VGR_Program.S1

// Rung VGR_Program#180
// Offset 776
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG VGR_Program.S30

// Rung VGR_Program#181
// Offset 778
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#182
// Offset 786
STR ST1
HALT VGR_Movement

// Rung VGR_Program#183
// Offset 788
STR C799
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
#BEGIN FMT_COMMENT 
"If we are not outside the oven, turn on the compressor"
#END

STRN X18
OUT Y17

// Rung MPO_Program#4
// Offset 12
#BEGIN FMT_COMMENT 
"If the compressor is on, open the door"
#END

STR Y17
OUT Y20

// Rung MPO_Program#5
// Offset 14
STR Y20
OUT Y52

// Rung MPO_Program#6
// Offset 16
#BEGIN FMT_COMMENT 
"If the crane is not at turntable position, move towards it"
#END

STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#7
// Offset 32
#BEGIN FMT_COMMENT 
"Turn off the conveyor belt when reseting"
#END

STR ST1
RST Y47

// Rung MPO_Program#8
// Offset 34
#BEGIN FMT_COMMENT 
"Reset our bit that said its detected something"
#END

STR ST1
RST C1000

// Rung MPO_Program#9
// Offset 36
STR ST1
RST Y18

// Rung MPO_Program#10
// Offset 38
#BEGIN FMT_COMMENT 
"Reset end of coveryor belt detection bit"
#END

STR ST1
RST C1001

// Rung MPO_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Reset the turntable plunger"
#END

STR ST1
RST Y21

// Rung MPO_Program#12
// Offset 42
#BEGIN FMT_COMMENT 
"Reset turntable to crane position"
#END

STRN X12
OUT Y46

// Rung MPO_Program#13
// Offset 44
#BEGIN FMT_COMMENT 
"Jump to manual control mode"
#END

STR C801
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 46
#BEGIN FMT_COMMENT 
"Make sure the crane is at the turntable, the turntable is "
"facing the crane, we are not wanting to control manually, "
"and the loading tray is outside the oven before beginning "
"stage 1"
#END

STR X16
AND X12
ANDN C801
AND X18
ANDN C802
JMP MPO_Program.S1

// Rung MPO_Program#15
// Offset 52
SG MPO_Program.S1

// Rung MPO_Program#16
// Offset 54
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#17
// Offset 62
#BEGIN FMT_COMMENT 
"If our oven timer is less than 100, fault out"
#END

STRLE D1600 100
JMP MPO_Program.S8

// Rung MPO_Program#18
// Offset 67
#BEGIN FMT_COMMENT 
"If our saw timer is less than 100, fault out"
#END

STRLE D1601 100
JMP MPO_Program.S8

// Rung MPO_Program#19
// Offset 72
#BEGIN FMT_COMMENT 
"C810 is the ready status bit"
#END

STR ST1
ANDN Y17
ANDN Y16
OUT C810

// Rung MPO_Program#20
// Offset 76
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#21
// Offset 79
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#22
// Offset 83
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#23
// Offset 86
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
OUT Y44

// Rung MPO_Program#24
// Offset 89
STR Y20
AND X17
RST Y20

// Rung MPO_Program#25
// Offset 92
#BEGIN FMT_COMMENT 
"Once inside, turn off the compressor, which will shut the door"
#END

STRND Y20
AND X17
RST Y17

// Rung MPO_Program#26
// Offset 96
#BEGIN FMT_COMMENT 
"Once inside and door is closed turn on oven"
#END

STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#27
// Offset 102
#BEGIN FMT_COMMENT 
"When done timing move to next stage"
#END

STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#28
// Offset 106
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#29
// Offset 108
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#30
// Offset 110
SG MPO_Program.S2

// Rung MPO_Program#31
// Offset 112
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#32
// Offset 120
#BEGIN FMT_COMMENT 
"If we are inside the oven, turn on the compressor"
#END

STR X17
SET Y17

// Rung MPO_Program#33
// Offset 122
#BEGIN FMT_COMMENT 
"If we are inside the oven and the door is not open, then "
"open the door"
#END

STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#34
// Offset 125
#BEGIN FMT_COMMENT 
"If the door is open and we are not outside of the oven, "
"then move the tray out."
#END

STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#35
// Offset 128
STR X18
RST Y17

// Rung MPO_Program#36
// Offset 130
STR X18
RST Y20

// Rung MPO_Program#37
// Offset 132
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#38
// Offset 134
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#39
// Offset 136
SG MPO_Program.S3

// Rung MPO_Program#40
// Offset 138
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#41
// Offset 146
STRN X19
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#42
// Offset 163
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#43
// Offset 166
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#44
// Offset 171
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#45
// Offset 177
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#46
// Offset 181
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#47
// Offset 183
SG MPO_Program.S4

// Rung MPO_Program#48
// Offset 185
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#49
// Offset 193
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#50
// Offset 210
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#51
// Offset 215
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#52
// Offset 221
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#53
// Offset 225
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 227
SG MPO_Program.S5

// Rung MPO_Program#55
// Offset 229
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 237
#BEGIN FMT_COMMENT 
"Turn turntable until at position to saw"
#END

STRN X15
OUT Y45

// Rung MPO_Program#57
// Offset 239
#BEGIN FMT_COMMENT 
"Once you reach saw position, activate the saw"
#END

STRPD X15
OFFDTMR T103 D1601 Y43

// Rung MPO_Program#58
// Offset 244
#BEGIN FMT_COMMENT 
"Once done sawing, move to the next stage"
#END

STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#59
// Offset 249
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#60
// Offset 251
SG MPO_Program.S6

// Rung MPO_Program#61
// Offset 253
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#62
// Offset 261
#BEGIN FMT_COMMENT 
"Keep rotating until we are at plunger position"
#END

STRN X13
OUT Y45

// Rung MPO_Program#63
// Offset 263
STRPD X13
SET Y18

// Rung MPO_Program#64
// Offset 266
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#65
// Offset 271
STRPD X13
OFFDTMR T104 3000 Y47

// Rung MPO_Program#66
// Offset 276
#BEGIN FMT_COMMENT 
"If the light barrier gets broken, set c1001 true"
#END

STRN X14
SET C1001

// Rung MPO_Program#67
// Offset 278
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#68
// Offset 280
STRND T104.Timing
AND C1001
JMP MPO_Program.S0

// Rung MPO_Program#69
// Offset 284
STRND T104.Timing
ANDN C1001
JMP MPO_Program.S8

// Rung MPO_Program#70
// Offset 288
SG MPO_Program.S7

// Rung MPO_Program#71
// Offset 290
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#72
// Offset 298
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#73
// Offset 303
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#74
// Offset 308
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#75
// Offset 313
#BEGIN FMT_COMMENT 
"Manually move crane towards oven"
#END

STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#76
// Offset 330
#BEGIN FMT_COMMENT 
"Manually move crane to turn table"
#END

STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#77
// Offset 347
STRN C801
JMP MPO_Program.S0

// Rung MPO_Program#78
// Offset 349
SG MPO_Program.S8

// Rung MPO_Program#79
// Offset 351
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#80
// Offset 359
#BEGIN FMT_COMMENT 
"Turn on flashing red light"
#END

STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#81
// Offset 364
STR ST1
OUT C811

// Rung MPO_Program#82
// Offset 366
#BEGIN FMT_COMMENT 
"If Reset Button (C802) is pressed and both the oven timer "
"and saw timer are over 100ms go back to stage 0"
#END

STR C802
ANDGE D1600 100
ANDGE D1601 100
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STR C1610
COPY 0x1 "4 0x0 1 C1621 1"

// Rung SLD_Program#8
// Offset 32
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STR C1610
JMP SLD_Program.S2

// Rung SLD_Program#9
// Offset 34
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 36
SG SLD_Program.S10

// Rung SLD_Program#11
// Offset 38
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 46
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#13
// Offset 48
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#14
// Offset 50
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#15
// Offset 52
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#16
// Offset 54
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#17
// Offset 56
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#18
// Offset 61
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#19
// Offset 63
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#20
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#21
// Offset 67
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#22
// Offset 75
#BEGIN FMT_COMMENT 
"Start timer for start fault. If light barrier isn't broken "
"by timer end, FAULT."
#END

STR ST1
ONDTMR T212 2000 C1632

// Rung SLD_Program#23
// Offset 79
#BEGIN FMT_COMMENT 
"While bit is on, if light barrier isn't triggered, FAULT."
#END

STR C1632
AND X35
OUT C1633

// Rung SLD_Program#24
// Offset 82
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#25
// Offset 88
STR ST1
COPY 0x1 "4 0x0 26000 V3205 1"

// Rung SLD_Program#26
// Offset 95
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T200.Timing
JMP SLD_Program.S3

// Rung SLD_Program#27
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#28
// Offset 100
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#29
// Offset 108
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#30
// Offset 113
#BEGIN FMT_COMMENT 
"Checks for lowest color value in color sensor."
#END

STRLE V3200 V3205
COPY 0x1 "4 0x0 V3200 V3205 1"

// Rung SLD_Program#31
// Offset 123
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3205 0x1 10000 6000 C1602

// Rung SLD_Program#32
// Offset 128
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#33
// Offset 130
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3205 0x1 20000 18000 C1619

// Rung SLD_Program#34
// Offset 135
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#35
// Offset 137
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3205 0x1 24500 21000 C1620

// Rung SLD_Program#36
// Offset 142
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#37
// Offset 144
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 4, jump to S4."
#END

STR C1602
ANDLT V3202 4
JMP SLD_Program.S4

// Rung SLD_Program#38
// Offset 150
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 4, jump to S5."
#END

STR C1619
ANDLT V3203 4
JMP SLD_Program.S5

// Rung SLD_Program#39
// Offset 156
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 4, jump to S6."
#END

STR C1620
ANDLT V3204 4
JMP SLD_Program.S6

// Rung SLD_Program#40
// Offset 162
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#41
// Offset 169
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#42
// Offset 176
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#43
// Offset 183
SG SLD_Program.S4

// Rung SLD_Program#44
// Offset 185
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#45
// Offset 193
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#46
// Offset 197
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#47
// Offset 199
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#48
// Offset 204
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#49
// Offset 206
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#50
// Offset 211
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#51
// Offset 213
STRND C1604
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#52
// Offset 220
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#53
// Offset 223
SG SLD_Program.S5

// Rung SLD_Program#54
// Offset 225
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#55
// Offset 233
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#56
// Offset 237
STRN C1606
OUT Y30

// Rung SLD_Program#57
// Offset 239
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#58
// Offset 244
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#59
// Offset 246
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#60
// Offset 251
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#61
// Offset 253
STRND C1607
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#62
// Offset 260
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#63
// Offset 263
SG SLD_Program.S6

// Rung SLD_Program#64
// Offset 265
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#65
// Offset 273
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#66
// Offset 277
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#67
// Offset 279
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#68
// Offset 284
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#69
// Offset 286
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#70
// Offset 291
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#71
// Offset 293
STRND C1612
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#72
// Offset 300
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#73
// Offset 303
SG SLD_Program.S7

// Rung SLD_Program#74
// Offset 305
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#75
// Offset 313
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 8000 C1630

// Rung SLD_Program#76
// Offset 317
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#77
// Offset 319
STRND Y30
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#78
// Offset 326
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y37

// Rung SSC_Program#5
// Offset 14
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"c1202 is reset button, c1500 is execute command"
#END

STR X40
AND X41
ANDN C1202
AND C1500
JMP SSC_Program.S1

// Rung SSC_Program#7
// Offset 27
SG SSC_Program.S1

// Rung SSC_Program#8
// Offset 29
#BEGIN FMT_COMMENT 
"Look at HBW"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#9
// Offset 37
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#10
// Offset 45
STR ST1
ANDPDPF
OUT C1203

// Rung SSC_Program#11
// Offset 48
STRN CT150.Done
OUT Y38

// Rung SSC_Program#12
// Offset 50
STRN CT150.Done
AND X46
STR C1203
CNT CT150 V2400

// Rung SSC_Program#13
// Offset 55
STRN CT151.Done
OUT Y35

// Rung SSC_Program#14
// Offset 57
STRN CT151.Done
AND X44
STR C1203
CNT CT151 V2401

// Rung SSC_Program#15
// Offset 62
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#16
// Offset 64
STR CT150.Done
AND CT151.Done
JMP SSC_Program.S2

// Rung SSC_Program#17
// Offset 67
SG SSC_Program.S2

// Rung SSC_Program#18
// Offset 69
#BEGIN FMT_COMMENT 
"Look at VGR"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#19
// Offset 77
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#20
// Offset 85
STR ST1
ANDPDPF
OUT C1204

// Rung SSC_Program#21
// Offset 88
STRN CT152.Done
OUT Y37

// Rung SSC_Program#22
// Offset 90
STRN CT152.Done
AND X47
STR C1204
CNT CT152 V2402

// Rung SSC_Program#23
// Offset 95
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#24
// Offset 97
STR CT152.Done
JMP SSC_Program.S3

// Rung SSC_Program#25
// Offset 99
SG SSC_Program.S3

// Rung SSC_Program#26
// Offset 101
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#27
// Offset 109
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#28
// Offset 117
STR ST1
ANDPDPF
OUT C1205

// Rung SSC_Program#29
// Offset 120
STRN CT153.Done
OUT Y36

// Rung SSC_Program#30
// Offset 122
STRN CT153.Done
AND X45
STR C1205
CNT CT153 V2403

// Rung SSC_Program#31
// Offset 127
STR C1202
JMP SSC_Program.S0

// Rung SSC_Program#32
// Offset 129
STR CT153.Done
JMP SSC_Program.S4

// Rung SSC_Program#33
// Offset 131
SG SSC_Program.S4

// Rung SSC_Program#34
// Offset 133
STR ST1
CALL SSC_Check_InOut 0x1 DST511 "3" "3"

// Rung SSC_Program#35
// Offset 141
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#36
// Offset 149
STR ST1
ANDPDPF
OUT C1206

// Rung SSC_Program#37
// Offset 152
STRN CT155.Done
OUT Y37

// Rung SSC_Program#38
// Offset 154
STRN CT155.Done
AND X47
STR C1206
CNT CT155 V2405

// Rung SSC_Program#39
// Offset 159
STRN CT154.Done
OUT Y35

// Rung SSC_Program#40
// Offset 161
STRN CT154.Done
AND X44
STR C1206
CNT CT154 V2404

// Rung SSC_Program#41
// Offset 166
STR C1202
JMP SSC_Program.S0

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRPD X37
DEC V3202

// Rung SLD_Storage#2
// Offset 3
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRPD X38
DEC V3203

// Rung SLD_Storage#3
// Offset 6
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRPD X39
DEC V3204

// Rung SLD_Storage#4
// Offset 9
STRE V3202 3
OUT C1628

// Rung SLD_Storage#5
// Offset 14
STRE V3203 3
OUT C1629

// Rung SLD_Storage#6
// Offset 19
STRE V3204 3
OUT C1631

// Rung SLD_Storage#7
// Offset 24
#BEGIN FMT_COMMENT 
"Upper bound W fault state."
#END

STRGT V3202 3
OUT C1625

// Rung SLD_Storage#8
// Offset 29
#BEGIN FMT_COMMENT 
"Upper bound R fault state."
#END

STRGT V3203 3
OUT C1626

// Rung SLD_Storage#9
// Offset 34
#BEGIN FMT_COMMENT 
"Upper bound B fault state"
#END

STRGT V3204 3
OUT C1627

// Rung SLD_Storage#10
// Offset 39
STR ST1
COPY 0x1 "4 0x0 V3202 MC809 1 0x0 V3203 MC810 1 0x0 V3204 MC811 1 0x0 C1625 MC812 1 0x0 C1626 MC813 1 0x0 C1627 MC814 1 0x0 C1628 MI815 1 0x0 C1629 MI816 1 0x0 C1631 MI817 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

// Beginning of Code Block VGR_Movement
$TSK VGR_Movement

// Rung VGR_Movement#1
// Offset 0
NOP

// Rung VGR_Movement#2
// Offset 1
STR ST1
RANGECHECK N810 0x0 8000 0 C780
RANGECHECK N811 0x0 3500 0 C781
RANGECHECK N812 0x0 3300 0 C782

// Rung VGR_Movement#3
// Offset 14
#BEGIN FMT_COMMENT 
"Set fault state if rotation out of range"
#END

STR C780
MOVE 1 V801

// Rung VGR_Movement#4
// Offset 17
#BEGIN FMT_COMMENT 
"Set fault state if X out of range"
#END

STR C781
MOVE 2 V801

// Rung VGR_Movement#5
// Offset 20
#BEGIN FMT_COMMENT 
"Set fault state if Y out of range"
#END

STR C782
MOVE 3 V801

// Rung VGR_Movement#6
// Offset 23
#BEGIN FMT_COMMENT 
"Initiate starting values"
#END

STR ST1
MOVE 0 N813
MOVE 0 N814
MOVE 0 N815

// Rung VGR_Movement#7
// Offset 30
NOP

// Rung VGR_Movement#8
// Offset 31
#BEGIN FMT_COMMENT 
"Set Crane Rotation Direction (Encoder Values decrement on "
"CCW Rotation)"
#END

STRLE $VGR_Encoder_Rot.Acc N810
OUT C411

// Rung VGR_Movement#9
// Offset 36
#BEGIN FMT_COMMENT 
"Set Crane X Direction"
#END

STRLE $VGR_Encoder_X.Acc N811
OUT C412

// Rung VGR_Movement#10
// Offset 41
#BEGIN FMT_COMMENT 
"Set Crane Y Direction"
#END

STRLE $VGR_Encoder_Y.Acc N812
OUT C413

// Rung VGR_Movement#11
// Offset 46
REPEAT

// Rung VGR_Movement#12
// Offset 47
#BEGIN FMT_COMMENT 
"Calculate Rotation position difference"
#END

STR ST1
MATH N813 "$VGR_Encoder_Rot.Acc - N810"

// Rung VGR_Movement#13
// Offset 56
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 100

// Rung VGR_Movement#14
// Offset 71
#BEGIN FMT_COMMENT 
"If crane needs to rotate CCW to get to target"
#END

STR C411
ANDLE N813 0
OUT Y27

// Rung VGR_Movement#15
// Offset 77
#BEGIN FMT_COMMENT 
"If crane needs to rotate CW to get to target"
#END

STRN C411
ANDGE N813 0
OUT Y26

// Rung VGR_Movement#16
// Offset 83
#BEGIN FMT_COMMENT 
"Calculate X position difference"
#END

STR ST1
MATH N814 "$VGR_Encoder_X.Acc - N811"

// Rung VGR_Movement#17
// Offset 92
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 100

// Rung VGR_Movement#18
// Offset 107
#BEGIN FMT_COMMENT 
"If crane needs to extend X+ to get to target"
#END

STR C412
ANDLE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y25

// Rung VGR_Movement#19
// Offset 121
#BEGIN FMT_COMMENT 
"If crane needs to retract X- to get to target"
#END

STRN C412
ANDGE N814 0
ANDLE N813 40
ANDGE N813 -40
OUT Y24

// Rung VGR_Movement#20
// Offset 135
#BEGIN FMT_COMMENT 
"Calculate Y position difference"
#END

STR ST1
MATH N815 "$VGR_Encoder_Y.Acc - N812"

// Rung VGR_Movement#21
// Offset 144
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 100

// Rung VGR_Movement#22
// Offset 159
#BEGIN FMT_COMMENT 
"If crane needs to extend Y- to get to target"
#END

STR C413
ANDLE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y23

// Rung VGR_Movement#23
// Offset 173
#BEGIN FMT_COMMENT 
"If crane needs to retract Y+ to get to target"
#END

STRN C413
ANDGE N815 0
ANDLE N814 40
ANDGE N814 -40
OUT Y22

// Rung VGR_Movement#24
// Offset 187
#BEGIN FMT_COMMENT 
"Exit Conditions for all movements"
#END

STRLE N813 40
ANDGE N813 -40
ANDLE N814 40
ANDGE N814 -40
ANDLE N815 40
ANDGE N815 -40
ONDTMR T50 500 C499

// Rung VGR_Movement#25
// Offset 214
UNTIL C499

// End of Code Block VGR_Movement
$TSKEND VGR_Movement

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C11","C11_Interlock","","Used to delay logic by one scan"
"C12","C12_Interlock_2","","Used to delay logic by one scan"
"C51","X_Direction","","True: Left False: Right"
"C52","Z_Direction","","True: Down False: Up"
"C80","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","Fault_X_Target","","Active when X target out of range"
"C183","Fault_Z_target","","Active when Z target out of range"
"C400","VGR_T0","",""
"C410","VGR_T1","",""
"C420","VGR_T2","",""
"C430","VGR_T3","",""
"C440","VGR_T4","",""
"C500","VGR_Man_Control","",""
"C799","VGR_RESET","",""
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","VGR_Fault_Code","",""
"N810","VGR_Rot_Target","",""
"N811","VGR_X_Target","",""
"N812","VGR_Y_Target","",""
"D0","MC","",""
"D140","X_Start_Position","","Distance to target"
"D142","Y_Start_Position","","Distance to target"
"T3","T_HBW_S6","",""
"T4","T_Conveyor_Timer","","Used to detect conveyor faults"
#END

