// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Nick\Documents\GitHub\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
a412e9d82a30e6aa444fc1bf8b82d739f45fd4e57569671386a1f783076cf7a4b7099b0d1ae7b4d4
fc59b6d9f818f92646666c849e1f8687451a544f68dabf243576ab92c054f72a95b2e8ab251594b4
9983780c6d112c80737d4dfe0a2d2963b8a998062df9c52b7a1eb7128842247af1753efa57588dc7
bc67ddd5e9894d625263d4c884c2459257ae406f6dada3bc9817c154d14cb1a410253de56d43d634
0323f21a498f5835f2bec4ec6aae99eaec283beec1feee5c995449afc4d29752a284aff126c705b3
0d6ba9ea28c14b463f9eeffb77d4502d5b865056d2e11fb0347c9731f9f1b06f906c1902bd4660e7
a91e865178004cf14df40335ef9998e906344aec4b8964043cfd713473dd0d6439d3c1bfb3ee7f04
c3a16801afc97ce6465e9a7e22dd42ee3ffd1970ed226a15cce07dcec4f42479ef1847f995cda71a
851e8a11c20928e04d5596f1e9fc57e6c16283089099ae4869c78eca77d4292774d71281d0eebd2d
11e6416230dc9f208107ddd34ffad68dbf3ff7ca2f605638ddad4af99141dd901cac05fb4420659e
bb68460016704857193d6b9b53a0ccffe10410f66e7b8076b5452c2f7ce94c123de183fd67231eb8
07b9ee6c93a00fc1f22f4a06ca567974271c46cddd976a08a19e81cdb39542db138dec4990126751
10c3f0b9127eea175ddb7df84cacf48465fc397b3271cf85fcfb9f3e2eb97247a226063f5b5f3f88
3fdae2964b147293575efc142817aa7b02eeb369f90cbdbca50282dfec7f2d7c8d8ca44bf510a27c
61239f60eb32196403a359848587e0bb2f62482165b57ae4c075f6e6e4bd5211fc1b232363a11395
a15cec481880aae85a5b796a05b55623f2081a2ac6a360c3823d08c31bdbce47514d63bfdde7c2f7
789a64953656a3052aea2f595727c8b62ba3b05a69cfd4de467088752d122831a905567248f30745
3c911e4bbc84059925620712a4b743a04b78ff9313f904a7edf7bdb5186cae45e055ebc064f8eca2
87f663d7d00893e6493a5e764db68565fcfa2e91292a47edb7e7af924f861922eb8ca0d86805b802
9c6ce8fd3dae5bc2a7842f396746e80d7a7c3aabd413a8c0cd21af173d7f20fa61c44a1bf2d88230
3f66409acdb0722fa8bbfa74f8d6360ca9e2a39ef0bd3ba370f9f69f16b83a9db109c2b54788f84a
bd0bea6ac8a35003508441e5e65626a85e89640d6f57be34105f27207df0703f66c062cd803249d7
424361e25574f125d34940de829789855afeefd1100c0e65c53cbcdbcbae953bca0d3327b2cb3518
3e68f9bdf6215dfc7fecf4c16e13b8de682ad5428959bcabe17091c3963ea2ccec34390e93a4f632
c2031f5ff875cb18d64295ad5382a1a5f223ace04c0e39272874d5d28373a66915748a7cbc13ee40
0313eb8e55bd769ec5c45e55e0df0314295d28b1361013b9a4f1a0e5deb8f94b123abcd188d50dcd
823f873916b1da7a65a76c747c065cd2936749d6c9598e6179cb12ee73c05072e9cf702ce04505dc
1697be9aafdaa1a61ab30598d79959e77d18befdcc86ad1b8e75a4032ea75174e83fb632d05fa575
1af11fbe7066c2127ad785f6091942b17e723432ad51b7440d1a40a3d814407ff994b7cad0f500c2
b4ce8d6cf852f65ccec5e44e295b7181769e259494cb755eb4aae27fe55a61821ffcd30ee54686b1
ee4b441ab7bcc683f6bddf55af788b49a449dc2758eb3688c9e14dba20a297f45f0339b9e13e3316
bed8b291d478b9d976be0d8126aecb7e5c7ee0109bb5f7f192755a776618b7a0507077c5802f2468
1c7729d40cdffd5d5caebf9b87aa936b13f50bd2e2bc56cb05224f3fce4b9586d250e5fda323840c
710b22c9b6190ede5645a81dada2066c10de181b272ad0ff6e3e34970b0bd6d19b3840c6f1e5cbde
c2b506c51a80fc502b06797a4e6973ebd7f991458d8d9a90c0fac49b387446939ea606905485464d
737252df9a4bafb84498ee54ef9f32796c139080273d7f8a6bc832dab2fa2b5dc7924d915da37041
9f8b9365306db95528108be3a35334cba3fc948d42161c3ed1ede719dc8a77df982eb1c73fb70355
b0f0c14e7aaf4a093c1187e0ea4870f9b59e5f004b2c306cc216517a12287038bca32addbe64125d
2a710edaa5da1caf1606835c56bc95b3d38fdac210668806d7262376cc774ede2ee1164453610620
9c2333a05bcd1bdee282620595ff001727b5041be03474f33bb1bd2f9f5b8babe8133b6e9525ca31
f44828cb6cbad12e3d1d8fc8dc27d313945cdad644076bdd8ae446431a9e7ac5ba60f092702dc282
246299e7be4c6da1155b6bd54f053792895120e5f00d854a98a6bcbcbd2df1ed77b2e929e6de3713
813c2864ee6c561295bfed9286b33d70f74648d2d9d545c18cd01baddadabb291b3550c12c12429e
6b1d5ce0b5785d40d9c7ec60ad63a47b937002dc215928566c36a67a0c9c43b87138bc75893cfe04
5052c3449be0ad12732897997160b8fd765f67efe48a386ef702f4788d3e39fe797cf27dad736f15
cedc70c6bd78f8ffff7a62cce2135fb3201b22cbf1d87dbfbd544811fecd464721d0fc8817cf67cc
d2dc61067e20f0f09c01e7df5bc6e0331ba2e78220afffa1a6a8e500f0147438fb63683dc13aa27b
440427b91f8f6a5133c7afbfe21dafa347ebf882b9c56c315f64562fb83431348020dbde9ef99f08
c8df83bedb9721e92d017acbb16bd732e15f097dec5aee71c6c1cbd1bcf096a6023cc17d0b4048c5
a4ee3b286413bce114adc9ab995a93e510ed82d50bf27b0ee7ac093c0a3dc89099d8b79193664b00
ba7165dd6e9e1eb9b67006076720f65382e2bd14f8d8544efeb248226ca6a06adeb8a9ece06e069f
4c40e0d732ffc15ac924d994d96085a976ee99b5dbb34f234ddedc3aa46ca7cc83b074436e7e13d7
1bc315fcfada798f86275730c3d4f22691c5a79422d41c30e3be043f9b6560ee378bd4a1fb5e7a84
ade00dda926dddf958f360add3912bac4ad5badb0b7a8b47134736b1154f949b95eb786c4f470a57
c8aed4c6b313018419d2167af881f632b6d81cc959985ebf57f8c52220502a450789092257a135d6
289ddeebac5cff1420af48e8a62ec0ab813b6bb6a95762b9378aed90f5dde9209444dc9b92b534b1
a550af5a68553371703992a55fc20dc534c674fb9aeba1352b38e5175f00daceecedee3c1e3dd872
894a13b497b66952bf93866c881cd315000d2ecfdf33c6ee27e725d2536fa0772d83ae97f03268e6
0015dea1cb0680738403c4114e0ef2c8f9d2473a7b43c50e35abcf5a66007a2e524a80e9e91cbe48
495cbeedf28d86c5e70d995690057ae97d4217b5ae984fafdcbb98b835f5c28ae7fc80d2d48910d8
e753049ee58dc5d7d4e0c8150e5a5909224cea497ccc3a6417a057bd4ac7f56597acd9180ebf9ead
9271ca85c13bb9add7087e138e73da415a0e0d5d8aa4796f23ff3455674b8d1211088eab937b2cc9
c8c6ac2091493851173d1cebafe3bb3528d5ebbf36aad2beaf9b10f84e41eaf60177bac7f4d13dce
bc459511c214832c163c74f88356a2dab6a7931971f6aa5ea10bbbf665c384b62e8046f49eea2b64
521455b2a048b12d1161f6ddd4e7efdec06e842ea367601d293b4f75004514de4ae3407901dee7de
97004e6c153a0f824983e7cf5566a2a5d81486e4876d72fa2ab0155260b8173f19da1de5f07e88c9
2e3cf8c22b2182775f0c333b5428d418df277741143b439e557446aa6df2f1981f3703ebbc594846
173d427c2b029f81d514074dd55e43be80c841881b241eb9b28c94a5bb15c3693cb42e9eaf3daf9b
eeabfa26b27ca2d4fd09ab5226b48bb1969d33b0ca57fc0b6729fd7de112e10f3b79200b4beee6aa
a6dc03926b171c19b8343f815cb97ecc37c179570355fc0f5131dbc4cc1963c1a7be43fd96778da6
adcf503b9982c2c4b44647b45e6b45c93613fbacc9e553e814cca4a50e483f812cb1e751cbd62b15
69e01b630f1e42892a30707626d3bf3b83e4db98b9cd416caf6890c0f694735aaed28b1e8cb38956
dc8450b572c037c100c4c3beb220722a220d39d925445e0876cdba750cd270874dc60e8cf66bc036
5ab30a89a0df630a30cd1dfd0488a8b1bfc4d2a200d4d8dfec033ef8474cc3f8c6fd3da0313b8830
63be9d0cfbf0c0a0f3325ef25a5f1c8ea6e1bf86b2a9fe850cf9a7cecc17102231a5fd5cc4c60e41
f9e32a8c29ee56899bebbdd5191ddb77546051584e6804a6a5d7372795e55606ab28e378f91c596c
d1cab7f0b8a9aa9eb6f3ce6f786d123cad8a5654fde118ae5d89019d6e9dd37ff78050ded50c78a5
06623c193350473f6a793c8120f616213f1f220d320cc7aea0d012c53d40ce4ac7f28237080c1f08
7025eaee809b03f56c009fd3c6698c8571936a0e1015b58984ed2d061f50ebf05d459b5df60cc53a
0a5e9d6e2123fbfc06d9605b52c472a417c6c2f4657666caa0b8356b1f464cb0a6c55bf059d79a7f
ab5b3b912ca1c4f20d836bba51869cd1f2413d0890235dceed30e07bc631109d1490aadbc45b0734
c3d4d336843c41fa244a2a5df556a1ad47e65522035737da52e43db5b508855db507877fee0c6c6d
6a872f87e7d3ca807ce14da60d3d5c40d88bca919c877cab4519b70579a054a1e9e45137e37eaa96
9ca27da7c6742b57e94eb01ea8e9f4eb9c8279a5c9828a89e90536fcb7ee92932c5797b45cb961fd
68e9a1540d11e3c24b50c2dd9e4b23b01a93a01f4d46055541ccc1e2942a69947c55b3d203d346be
db6be6e8104054d954aad6e62ea77d0a7d6ce764d421ec1952c3a341854194706bf7e15720dcba0f
eba3cab65d1bf4ac82c8e42bbaedc3476f18275219744cdfcbf1a17c73454520ab87755dff92f8f2
321df4f46d3b0e2112bd823385620db0482681ec860c39e1cef7006961ebdb3117436ab91ea55d03
f2d396c95f2f87d03389cab5adadea8395f2781a5d1589f3e67fdda331641ef398cf41288536d477
ffdc04ddfcef6e781cc7e317cad6fd224e00dd74064d61d9b18ce0bbdd3eaf3c03bd3908336b7ce8
774effc074b4e54774563a29f6da576eef26336ad137cf7e2925f463da0bf1a10a246751e6b34974
800013cf352769b9564e8fa437087d9f09962d09b40ba238485e05d6a0ed0cdde3bd965988c432ed
0d6f426479ff11b5dd91e6c06aeec88415e85732b9bcd12845237c6aaef66317475cf977155bc207
444bcd135a1eaf1625cfd0f13f71b9daec79a3047913b89e781bf064b7bd79adece699ce47363900
184d063df89cd0d46b1231e5cfb8c75a018145bea5cdbd0514f43f63f99ea9b7e1a78a1d53e7a316
9b6ef83160e613bc612fc818bbf050038db125b5126fe21d97bedfd7f65b527c6af79fe95d3d6ee9
8acdb4afcb9806750aa583c3c1cbe11d0378d465b7d99be78c2c8ac580b4943df6cfe91c19241e47
c95fcf9ee9c11d3b00707eb6b2ce628f06381031a61c6c47d5c14aaf1f501641f2b95a7ed8c3268f
07b8d6041bc284b4574fefdc336185152314988c17a7df908ab54e6dbedc37fa66bbd73003f2920a
ce6794226d13a8100c7b01a75851fb228872c28eb0e3e11a89f1a58dd04575644aada561b7651280
213498682f1e753f9c6d13ee34fa23e4b058ed967981b443043114252d4a5aaea2725ae357ac52e3
b4ed0689c70e677b383c1b27d84cd86bf07c9ebaf05517beea17e3518be1b9489600d6d4dc6f9a44
7620541cb28464d0896dfbcce808d4fe0255abece7a0c937dc17a316bc646077ce2c501a2b841421
7954e71dc07b9e2b4ca26be7a8f0a2e4fced83acafa53d3d0b86ab5c6e050029bb6507ab970f16cd
7eb27f2ee35b29a790dc298d8d36cfbb20595cdcc8d1fa51598742fb47f92d1caf567b2b0c108401
eb34702bea01079e06194815c155f4aecad387bea843232a82f8c6e683667240da88dce6793c3ac2
ae9080c790d48de463b971d39ba2f401b876f368d0077120781a129577ca60b25bfcc19c0787e038
b92ee30d991ccaf538b1cc90004832b727d81237e4fb75376a232a4977daffbd9620725845db66c7
cd01c3f174434680bec65f12a76763664bacebe71ae36b2fc244fef2a9a0cf1ee2d2a59057b74bd5
e206dcf01d6b2fce430218c737efc39582eef0639a3aa100dd3f64e47e83e4af633bf2709397944c
f40d74e14ee65ee0a05e8fb5b26f991067cc5402986616724898f60fffddcbb67eb688c4eb1353b4
b613cb76689926a78630b9ed41c5c8e623cf1cd7af40959a2e3c92ad4aea19efb338acc221b062d7
8d0252fa90491c6ca7b1537537fa106a24cb4936ea15c1628a5fe58d41328bdb6a3b3a8a9b21e614
90f8f0ff295a213321f99c4525d5ebb064ce2f1e66fa677fa734204da23efe13633dc91d1f586aae
899ccd5ac0e33d30f68d0a50d4feab2fd2c651cfaead7c467589939215ab571f3b1417b0bcb55d58
671772883c2d5cab89be140241df851ac1cba27a7623f4699894b12595bb63eb55ce0d1b3ecd9cc2
7111791fe84599463df5d4ad3a4a23c1c6ff2e118fbddcaa60668abd17c77647db6ae3c7bcf22045
8c5bdc4aed4ff484a8fddaf195a773e1a576140cc2682c9cd6888dd73ba0e35b04eec52e24f8b3ad
915f99ff194faeb2446611bfa32f3217e497197980ec6ce5a92b52298a5b75cf3c7e0ccac14b6f20
180a77ab6036bfe33990cea3665476e161c7f14bba9715166fdb95e2b726dc354091fae4134528be
824edcee2b1971e740c93faa604fa5f63d99f5a5192004331e9d14390c3229a61d135ff86e8b9ceb
271e71f8e74f66a8ba31595a0e69b441b767f26329d2ea7ae7db27c43db9588b839accacc74b9131
5444bca13b7e28d4595d080afa1c9c0153ecb6589a22ab3a4fb4e72001c4d12cfdbd847a567a9def
ca7dd31ff1f03f1771089205104d1081e88a498cccc89dc9a58fab145f35ce11a82b007160e93fdc
115f8f578b2d9069edf03d7c3387aec940560cbac22e3093a08b8a2a5ad969b6a6ddf51815553ac1
246d14c276b5b7f69dc44805fc684d50489ca5f97207ff251a6dc3bd66d18f5394dbe23d216f5422
bf35fae1b47616e8272c681589789428fcffffdfcf19c67a11b0727d7af1c9746c40e935e95764d4
1f68ba293957804c816934a6d60626a39f841e954afc889d00ef73fe33e6a9de744c31b23bc0a7ef
4dfa3f2c5ea8d8a114d8cd198bdcda3f7525f1fcce3708b19ad60a8978eaa4c3dd1c1102b0cfd65c
44e23b7ce7debc61e5b1b3feba5ce4cf3304743ca2192eb77f62591b087d1e5cb28df232e1ded2ef
9e6063222e1a1804adc5d98d32df8b5ff9df67ea2a8b1dde3da1f16863b7182da101df914f2162c1
5b42d9fe138cba241117002465389ea063f01ecc33b0057ef40c3919fbaf4c317dd7806db3023d4d
a3e8507bd9a75f899d68a65a3f3b8bbfdb40267baeec646e42dddd2eb44f71355ecd23c74d339c5b
6556953778d8bff38d0576c1df7c864b95eaa664e0a40f8b18a6ab20af9950ade7cbdee0710f02ca
fc6af746ecc044a5123b0248d06b5aa174a3dbf465e2aafa55f3693c48b7facb9e6b0e58f958b0a7
17be2c17bd56925c663107660d6802f67bffaa1cbeeb4374ba1c7b78fa908620e4cde3a0e1a1e66c
2431a46284e526777332deb23933ed2ac30c91a5d80b76bfa5623d88910b143c89216145e651408c
b55f76c30be1d92d6b0d648392067aeac1deb7710b98b1527d109ba6c22c2632044ffecf101c07b5
885be3810aa11e62db91a4c3a0505e6873a3612877b9a8319741f5d438516dc4f0b7436ad7fbefd8
2bb86b806ce5e18dbf2da6dde36d37a36c337b6cb71ee4fee9ff5523d581506a600e09f03c3aa0de
7f52405cd7ae355950f09feef0b0b122d9f86844ea9f1981c13e411942666b233b27bd7c4289b717
295e72eb67c5273e5b54571edb457111eeb904de37d2a49853934340e08dc7fda20303b9fc7f9a79
48b0134fb9f2b34c14b840fae34f363fb25d7b28543c7f7298b5e48546ea44b7e11ca700faa006dd
7e3f2d44cfc6431925e268d5f7d797ee6ef7bc0dd728d32e027b0c5c618c820e5233c6067f48ca64
160e9fb31fe15abff76b23d6b526005447d1c504646c3f3a2bb440a601f38a5d4a509d0289f1425e
f8c9ce33f07f292f518b2f0cfafc1c8e9357cb941bb87aa8a0ba4a4a8f7d6b094f8f5ccf2478e197
3cebcb0e46cffe507fba9e9798df60bcd9e8b9771fbad836fdd623ba3ad83bac03d889296167f6dd
a471394b83727a405af4e0b3f0bb69c0790ba0797c50c857716beb293c83fd910a4add8e607b3f86
05b4cd05e88ca05637c7becf956db4c5109693a06760b88de02755ef7a10249e88453e70d18654d9
bb6b2c42adfc7007b61c0b634a3acbc295d94209f272ae5773d37cf390aff78ee677071d31a1a143
ae665b84a156d8a7aadc7e806c0c06846a8dd31566a7f7faf6d712775f885ab4b098fac70aab91b2
19ebdcf98b80f20d5b4c18e795e7e6147c74bd867fd257dd59e0937ed19a9ac2d0d156fdf934bc0b
39641f2d5957024bcc94b9ba0909eff698190a5e5edf9fcbc928dbff99ae01d3faee9bb6099313f5
3a8c9d39b1f12442b7782fee5721e73452c1e70877f0b0a8b0767f41cb6b37fbdf0baf76d45a6a85
fbd1572f8a9b4e850943f9452ba8e7756dc085a5d5ad84150adf99f9f1faf5e4df4789a71f04f243
4cf808c1c6999786e7addc23aa4c4a288fa88a1bf075d3b4027405a7221521a47f5aa70b5ada089f
63862dc601aea45e22a9223d48863b0ff34db875a62f4e3e51f3c75f34dc6856f51ea701edf9b01c
14360b8d9254019cffce2fcee6f5d84c73bb8775baee209cc1689490f0fc88ad2a80b4b84f7277df
d291c594d7f784af4a4691920ca9ea01f5a7eafeeb1c2087bec961cf965c1a418b307437fd435a19
e3c46b7258d1ba6a4a1b0162867d2845ab7dcac346d4738539930caf5b7c47a65da0aa17469f5dfd
d81089db8d14ffb8cb398d03bbc93e6136bafbb7870b323f1f6396ce197bb39a72102e8cf86c8655
a2ee607eec01bf7852129a723db8f6f1d967c2997170ceb33a998ec41b8c8f90ea6dce070890c48d
c9111514c326ab3c0cced33d94a1e74553e4c7ff2dfc8f5179be24cfae6e1dc66cb62379ca9ce4b7
6055cef09ce917cecba6b85ce37da88fd2487fa0b6d19afa18fa9dbf7ef4cd35e2829d97027124ca
57f53b0003243aa0bd56077c13b9a99049aee54043c06f2a38ada55f3f66f3ce4f84f2128e0e1cc6
fb9e0d90231ccf56979bb5e82f3adba7cdf2d423f585057c6f3eb2c93104fc49a117a30780a02fff
89d3e7881dd330b12f3350e8834e4283d2bfde845d262f83ff750fea48640ad6b4528fd981d6536d
2f9fbe683918a088ddb010b1f47c873962356db7cc7958e45f09e755f4b990a17a78c7e7aa92ef21
65263df51c3783bb49fe69322c02bca28ffaf069fa85d627139b7038c30fcfc8014f450e406b37c3
6b9dacb3d5a4693e856a6efa616988c7f0125156f242a3a0ca3632a95de70b2c51e6224ff74a8383
ac5052b2f61414dd74a9adb0ec62bf11343b784540535dd9e8c4ca08205cc7146037460314b63f13
4864c9734bf7eb37cedc0f80bf635bd659283ce6d9cf3ce112fb2aa82dc097c680f0f91e6aba9871
76314bbab921bc7b5b957ed6f3b108144f1c9490654225857f925f63c7ee90eeaf54ef79d52979b9
af6a5ed98ccbe9a0004eb4a7a2cc59bc734adb98a72fdbf691b0872fc0859363af24899e3bf68b2e
a23003dfd44a9c0944528e85a8fde3627dc6b0dccdb107e6d9f2d45bfa45ef21d2255a92e43c3da5
64232813b4089670e0698d11490832a98d98e55af83432aca4f0f617a09ddaa070ecb338cb017989
43bdba0e888d1a8b2147b354ab66e1ab1aaf90d666ee0822e7b8f95563640f2a463c8d0b664bea32
4406ea2d31205b3f81492265318befeded2d7dcf62a62077d826720efb8d563858b025f5a5b37540
9171f9c1a0192578b74e4a1e4276915a4ac4f951cec695adca418c1501afae010ad9c0754459605e
6c69b534113b646ffe30d9b9bb25cae85f98231bcb486a6a8433a9957852ccbbd397f1adec5b13a8
a40a6143a924de4629ae3a5a14273216aeb183e9f3ab8a1948ff9cdcdd96e7ec28f0bfa812467da8
c78199d4e5f861851c491d7039d40955de77db24cd9e49acdce1d9762f1b69651324403b557861d2
1741affd02e5efebd785499f1bdde36429a40bbe131649737037096540b18e6c7115af2c59c6a280
b4a29339ee042271f85c2fdbad319a49e3a170e6a680e7af0f931024558cdd2ef2717463bf75099c
94fac46bb59aa8a1e517bb0c942b5d695deb2b968dbe6fe6a29a37fe408386463062e620ee4393aa
3b718208a9353eec0d382f3ecb6c064cd3a2e7aaa91c0cff5eb26728fbb7e884b5f1344612a0c701
131d21d372c3c4fda72aa2bd6ee7349f49a790026ea58cb796d8b31674221aa736f70a8db61cc4a4
6b1ff03621dd55cd8ea7ff3dd93e70f7d66f9ca02619676a21bea5c54edfa65ba15de17b382d7a1a
4f5b6b4e1eb5b9ea7c0cfe556270805c9a14b6e95b96fac91ffb35a27e9cbd5f7b3531ccd8a5120e
801a26c8ec6be48f813bb47f3a888586d2483d578437b481e441f80fd0885e4d2e76d99c12a9b56c
7621202f531b50564b60ca92c693f4131d013d7f0267cef1cb550f0bb4059738ee5a1b6f04eb509d
3c918acedfe5f3c546c5b3ba464a01d935c443c15cb399be40bc7c67b54d93e90126a736c58e0af2
f5ae42bb13cd92388cbee71472688cb3e025515970f048e6619f14e311b47f3bf418dbfd8e67f419
8ba1df3598f8da3169b6d2378c405ed83bda9f0cdd0084eca9b06896235362b2f52d5f492b804a43
7e8112f920e8c39f92d21ad83255cfb3914e4d6201577645e32789ec128fbd73140d1465cd3bf019
85af1a12c128bd5480a78b602a8107e24a6396ee107c37f477466e84859ddfc38168f7891be7d6ff
c7dd92d62f07e45d44ad10593625fe2f088e40a941df843fb540ece0b89104b444a5910be671fde8
e9daec32fe4e5a240a788d48f649492d3dd3f68d22355d84b356807d740e2662c742c275162807ab
57758c567d438803181d9bf7610e6c489891665f85f7588a71825c29905febf15f4ceb61279c9e13
2e5ea231861bdc6653f0d75cabecc6c3118e0803eff454bcaf028f72843bb554946e536378e056c9
763f5108c3fa7f4cb07cb7322398efbd8c17f359121ed62ad4489365e05236f4430983654f020172
e9f56361ff7bdd1cde2bab2d1f5526e1ea7d4d5f5c6f7438a96610d94d7c07f7d5386c34b867778c
2ad85844ccd14fb061543d9b2b39631bf047b9bf3f698012378b97f3459248c8c518dafb2c840a6c
a7597cd578c4924b4bda8e02b3e51033f1480dc094c66ab0be5addaded929eedbc00a127e1fc2706
d27cf2ac12e43dc46a7a7d94e13fcf37599c59df84ee8a65911fba6042c3edd3014cfa3157e3733c
957a6d4e19cfd9d20f7f1e627b0b71005ad68251dfa4811a5b8873303aeb23d7d923c674ae9ac37f
b98aa0467d0aa93ed02e1249a4bf0017f188d6090ccd67ded8f5ab1c642d5a10a8ded5796406d1f7
dc74a70ccffa60c4ee80c824f258e8c97e27b2b89124428e94a2048351c4e72f641e6df4377c7d84
fda089fed4874c261136b1b4848d3a16c2a249fcdc0784de810ae5db40d4e9e1c4669e3935529e1a
a017045bb92c5b4155b91f924412c0f5ac141870c4a6a0e62bd85d568fb19c388be023d047837d6a
df753ef1bde75d933fc06d3e033281785660b48e3cf7a33dd13b58d55d8f749038c55cb044f1a5a9
c0be8a43a4758349dd6f534cb27b571b786e1487e31cdecd1d4477e577739c30061c32725d766301
f1fafea14cd097e970036699c891658fc136180c95e6fa4002d256d3781be4238058bda5395ca4c0
d56e79666fbef7fcfccb1731866b49d484ed6a54f503e9db9a3568543c13a1f60569db3a2204ab3c
84cd3f25fd25
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 1345 V810 1 0x0 180 V811 1 0x0 175 V812 1 0x0 860 V813 1 0x0 200 V814 1 0x0 400 V820 1 0x0 420 V821 1 0x0 440 V822 1"

// Rung VGR_Copy_State#2
// Offset 51
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1"

// Rung MPO_Copy_State#2
// Offset 31
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 V3201 MHR1601 1"

// Rung SLD_Copy_State#2
// Offset 23
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
#BEGIN FMT_COMMENT 
"Deadband for X position difference"
#END

STR ST1
DEADBAND D140 5 D1

// Rung HBW_Move_XZ#10
// Offset 48
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#11
// Offset 63
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D1 0
OUT Y50

// Rung HBW_Move_XZ#12
// Offset 69
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D1 0
OUT Y51

// Rung HBW_Move_XZ#13
// Offset 75
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"Deadband for Z position difference"
#END

STR ST1
DEADBAND D142 5 D2

// Rung HBW_Move_XZ#15
// Offset 89
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V120

// Rung HBW_Move_XZ#16
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D2 0
OUT Y4

// Rung HBW_Move_XZ#17
// Offset 110
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D2 0
OUT Y5

// Rung HBW_Move_XZ#18
// Offset 116
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D1 -40
ANDLE D1 40
ANDGE D2 -40
ANDLE D2 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#19
// Offset 135
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5310 V140
POPBOOL
DUPBOOL
ANDE V105 3
MOVE 2990 V140
POPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181

// Rung HBW_Program#9
// Offset 53
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
DUPBOOL
ANDE V106 3
MOVE 3240 V142
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#10
// Offset 85
#BEGIN FMT_COMMENT 
"Task Send<br>Validate X and Y input are not 0 (unselected)"
#END

STR C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S7
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#11
// Offset 109
#BEGIN FMT_COMMENT 
"Task Recieve<br>Validate X and Y input are not 0 (unselected)"
#END

STR C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S1
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#12
// Offset 133
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#13
// Offset 135
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#14
// Offset 137
#BEGIN FMT_COMMENT 
"Task Send - Move<br>Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#15
// Offset 139
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#16
// Offset 142
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#17
// Offset 147
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 150
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 153
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 155
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 157
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 160
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 166
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 169
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 171
#BEGIN FMT_COMMENT 
"Task Send - Move<br>Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 173
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 176
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 100 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 181
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 186
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 189
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 192
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 194
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 196
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 199
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 205
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S1

// Rung HBW_Program#36
// Offset 208
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 210
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#38
// Offset 212
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#39
// Offset 214
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#40
// Offset 217
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#41
// Offset 219
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#42
// Offset 221
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#43
// Offset 224
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#44
// Offset 239
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#45
// Offset 241
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#46
// Offset 244
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#47
// Offset 259
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#48
// Offset 262
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#49
// Offset 265
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#50
// Offset 280
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#51
// Offset 283
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#52
// Offset 285
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#53
// Offset 300
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#54
// Offset 302
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#55
// Offset 304
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#56
// Offset 306
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 308
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#58
// Offset 310
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#59
// Offset 313
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#60
// Offset 316
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 100 MHR120 1"

// Rung HBW_Program#61
// Offset 332
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#62
// Offset 335
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#63
// Offset 352
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#64
// Offset 368
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#65
// Offset 385
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#66
// Offset 401
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#67
// Offset 405
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#68
// Offset 407
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#69
// Offset 409
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#70
// Offset 412
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#71
// Offset 416
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#72
// Offset 419
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#8
// Offset 56
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#9
// Offset 73
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#10
// Offset 77
SG VGR_Program.S2

// Rung VGR_Program#11
// Offset 79
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 87
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S2

// Rung VGR_Program#13
// Offset 89
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#14
// Offset 91
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#15
// Offset 93
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#16
// Offset 95
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#17
// Offset 97
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S7

// Rung VGR_Program#18
// Offset 99
SG VGR_Program.S3

// Rung VGR_Program#19
// Offset 101
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 109
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 111
SG VGR_Program.S4

// Rung VGR_Program#22
// Offset 113
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 121
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#24
// Offset 123
SG VGR_Program.S5

// Rung VGR_Program#25
// Offset 125
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#26
// Offset 133
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#27
// Offset 135
SG VGR_Program.S6

// Rung VGR_Program#28
// Offset 137
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#29
// Offset 145
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#30
// Offset 147
SG VGR_Program.S7

// Rung VGR_Program#31
// Offset 149
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#32
// Offset 157
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#33
// Offset 172
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#34
// Offset 175
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#35
// Offset 177
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#36
// Offset 192
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#37
// Offset 194
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#38
// Offset 197
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#39
// Offset 212
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#40
// Offset 214
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 217
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#42
// Offset 219
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#43
// Offset 221
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#44
// Offset 223
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#45
// Offset 225
STRN C500
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#19
// Offset 56
STR Y20
AND X17
RST Y20

// Rung MPO_Program#20
// Offset 59
STRND Y20
AND X17
RST Y17

// Rung MPO_Program#21
// Offset 63
STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#22
// Offset 69
STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#23
// Offset 73
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 75
SG MPO_Program.S2

// Rung MPO_Program#25
// Offset 77
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#26
// Offset 85
STR X17
SET Y17

// Rung MPO_Program#27
// Offset 87
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#28
// Offset 90
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#29
// Offset 93
STR X18
RST Y17

// Rung MPO_Program#30
// Offset 95
STR X18
RST Y20

// Rung MPO_Program#31
// Offset 97
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 99
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#33
// Offset 101
SG MPO_Program.S3

// Rung MPO_Program#34
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#35
// Offset 111
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#36
// Offset 129
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#37
// Offset 132
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#38
// Offset 137
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#39
// Offset 143
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#40
// Offset 147
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#41
// Offset 149
SG MPO_Program.S4

// Rung MPO_Program#42
// Offset 151
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#43
// Offset 159
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#44
// Offset 176
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#45
// Offset 181
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#46
// Offset 187
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#47
// Offset 191
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 193
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 195
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 203
STRN X15
AND C800
OUT Y45

// Rung MPO_Program#51
// Offset 206
STRPD X15
OFFDTMR T103 3000 Y43

// Rung MPO_Program#52
// Offset 211
STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#53
// Offset 216
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 218
SG MPO_Program.S6

// Rung MPO_Program#55
// Offset 220
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 228
STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#57
// Offset 231
STRPD X13
SET Y18

// Rung MPO_Program#58
// Offset 234
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#59
// Offset 239
STRPD X13
SET Y47

// Rung MPO_Program#60
// Offset 242
STRPD X14
RST Y47

// Rung MPO_Program#61
// Offset 245
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#62
// Offset 247
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 249
NOP

// Rung MPO_Program#64
// Offset 250
SG MPO_Program.S7

// Rung MPO_Program#65
// Offset 252
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#66
// Offset 260
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#67
// Offset 265
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#68
// Offset 270
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#69
// Offset 275
STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#70
// Offset 292
STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#71
// Offset 309
STRN C801
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: Listen for Doug's instruction to start module."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
NOP

// Rung SLD_Program#3
// Offset 3
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#4
// Offset 11
#BEGIN FMT_COMMENT 
"Wait for Doug Start Command"
#END

STR C1610
JMP SLD_Program.S1

// Rung SLD_Program#5
// Offset 13
#BEGIN FMT_COMMENT 
"Enter manual mode S10"
#END

STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#6
// Offset 15
#BEGIN FMT_COMMENT 
"Stage 10 has manual controls for SLD"
#END

SG SLD_Program.S10

// Rung SLD_Program#7
// Offset 17
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#8
// Offset 25
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#9
// Offset 27
#BEGIN FMT_COMMENT 
"Manual Compressor Control"
#END

STR C1652
OUT Y31

// Rung SLD_Program#10
// Offset 29
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#11
// Offset 31
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#12
// Offset 33
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#13
// Offset 35
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#14
// Offset 40
#BEGIN FMT_COMMENT 
"Manual Auto Run"
#END

STR C1611
JMP SLD_Program.S1

// Rung SLD_Program#15
// Offset 42
STRN C1650
JMP SLD_Program.S0

// Rung SLD_Program#16
// Offset 44
SG SLD_Program.S1

// Rung SLD_Program#17
// Offset 46
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 3000 C1600

// Rung SLD_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"C1600 is set to true when timer is running so the conveyor moves"
#END

STR C1600
OUT Y30

// Rung SLD_Program#19
// Offset 54
#BEGIN FMT_COMMENT 
"When the timer is done, move to stage 2."
#END

STR T200.Done
JMP SLD_Program.S2

// Rung SLD_Program#20
// Offset 56
NOP

// Rung SLD_Program#21
// Offset 57
SG SLD_Program.S2

// Rung SLD_Program#22
// Offset 59
#BEGIN FMT_COMMENT 
"State 2 is where color is determined by checking if the "
"analog value is within a range, and conveyor timer distance "
"is set based on color.<br> <br>"
"Need to integrate a counter here still."
#END

NOP

// Rung SLD_Program#23
// Offset 60
#BEGIN FMT_COMMENT 
"Subscrib is to get value from color sensor and convert it "
"to something the HMI understands.<br> <br>Need help with HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#24
// Offset 65
#BEGIN FMT_COMMENT 
"The disk should now be in the center of the color sensor. "
"This function checks if the color of the disk is in the "
"blue range. If so, sets boolean value C1601 to true."
#END

STR ST1
RANGECHECK V3200 0x1 23000 22000 C1601

// Rung SLD_Program#25
// Offset 70
STR ST1
RANGECHECK V3200 0x1 20500 19500 C1602

// Rung SLD_Program#26
// Offset 75
STR ST1
RANGECHECK V3200 0x1 16000 15000 C1603

// Rung SLD_Program#27
// Offset 80
#BEGIN FMT_COMMENT 
"If C1601 is true, Off Delay timer starts output is set to "
"C1604 which when true runs Y30 for timer length."
#END

STR C1601
OFFDTMR T201 3000 C1604

// Rung SLD_Program#28
// Offset 84
#BEGIN FMT_COMMENT 
"When C1604 is true, turn on conveyor."
#END

STR C1604
OUT Y30

// Rung SLD_Program#29
// Offset 86
STR C1602
OFFDTMR T202 2000 C1605

// Rung SLD_Program#30
// Offset 90
STR C1605
OUT Y30

// Rung SLD_Program#31
// Offset 92
STR C1603
OFFDTMR T203 1000 C1606

// Rung SLD_Program#32
// Offset 96
STR C1606
OUT Y30

// Rung SLD_Program#33
// Offset 98
STR T201.Done
JMP SLD_Program.S3

// Rung SLD_Program#34
// Offset 100
NOP

// Rung SLD_Program#35
// Offset 101
SG SLD_Program.S3

// Rung SLD_Program#36
// Offset 103
NOP

// Rung SLD_Program#37
// Offset 104
STRND X36
OFFDTMR T204 5000 C1611

// Rung SLD_Program#38
// Offset 109
STR C1611
OUT Y34

// Rung SLD_Program#39
// Offset 111
STR T204.Done
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"T3","T_HBW_S6","",""
#END

