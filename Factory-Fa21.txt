// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Nick\Documents\gitRepos\Factory-4.0-Fa21\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
8630cbfa0812c488666de39da9a0f51bd67df6c7574b4531a483d5a1254ed586952bb92f38c596f6
de7b94fbda3adb0464444ea6bc3da4a56738766d4af89d06175489b0e276d508b790ca890737b696
bba15a2e4f330ea2515f6fdc280f0b419a8bba240fdbe709583c9530aa600658d3571cd8757aafe5
9e45fff7cbab6f407041f6eaa6e067b0758c624d4f8f819eba35e376f36e938632071fc74f61f416
2101d0386bad7a17d09ce6ce488cbbc8ce0a19cce3dccc7ebb766b8de6f0b57080a68dd304e52791
2f498bc80ae369641dbccdd955f6720f79a47274f0c33d92165eb513dbd3924db24e3b209f6442c5
8b3ca4735a226ed36fd62117cdbbbacb241668ce69ab46261edf531651ff2f461bf1e39d91cc5d26
e1834a238deb5ec4647cb85c00ff60cc1ddf3b52cf004837eec25fece6d6065bcd3a65dbb7ef8538
a73ca833e02b0ac26f77b4d3cbde75c4e340a12ab2bb8c6a4be5ace855f60b0556f530a3f2cc9f0f
33c4634012febd02a325fff16dd8f4af9d1dd5e80d42741aff8f68dbb363ffb23e8e27d9660247bc
994a642234526a753b1f49b97182eeddc32632d44c59a25497670e0d5ecb6e301fc3a1df45013c9a
259bcc4eb1822de3d00d6824e8745b56053e64efffb5482a83bca3ef91b760f931afce6bb2304573
32e1d29b305cc8357ff95fda6e8ed6a647de1b591053eda7ded9bd1c0c9b50658004241d797d1daa
1df8c0b4693650b1757cde360a35885920cc914bdb2e9f9e8720a0fdce5d0f5eafae8669d732805e
4301bd42c9103b4621817ba6a7a5c2990d406a03479758c6e257d4c4c69f7033de390101418331b7
837ece6a3aa288ca78795b4827977401d02a3808e48142e1a01f2ae139f9ec65736f419dffc5e0d5
5ab846b71474812708c80d7b7505ea94098192784bedf6fc6452aa570f300a138b2774506ad12567
1eb33c699ea627bb0740253086956182695addb131db2685cfd59f973a4e8c67c277c9e246dace80
a5d441f5f22ab1c46b187c546f94a747ded80cb30b0865cf95c58db06da43b00c9ae82fa4a279a20
be4ecadf1f8c79e085a60d1b4564ca2f585e1889f6318ae2ef038d351f5d02d843e66839d0faa012
1d4462b8ef92500d8a99d856daf4142e8bc081bcd29f198152dbd4bd349a18bf932be09765aada68
9f29c848ea81722172a663c7c474048a7cab462f4d759c16327d05025fd2521d44e240efa2106bf5
606143c07756d307f16b62fca0b5aba778dccdf3322e2c47e71e9ef9e98cb719e82f110590e9173a
1c4adb9fd4037fde5dced6e34c319afc4a08f760ab7b9e89c352b3e1b41c80eece161b2cb186d410
e0213d7dda57e93af460b78f71a08387d0018ec26e2c1b050a56f7f0a151844b3756a85e9e31cc62
2131c9ac779f54bce7e67c77c2fd21360b7f0a931432319b86d382c7fc9adb6930189ef3aaf72fef
a01da51b3493f85847854e565e247ef0b1456bf4eb7bac435be930cc51e27250cbed520ec26727fe
34b59cb88df88384389127baf5bb7bc55f3a9cdfeea48f39ac5786210c857356ca1d9410f27d8757
38d33d9c5244e03058f5a7d42b3b60935c5016108f7395662f386281fa36625ddbb695e8f2d722e0
96ecaf4eda70d47eece7c66c0b7953a354bc07b6b6e9577c9688c05dc77843a03ddef12cc764a493
cc696638959ee4a1d49ffd778d5aa96b866bfe057ac914aaebc36f980280b5d67d211b9bc31c1134
9cfa90b3f65a9bfb549c2fa3048ce95c7e5cc232b997d5d3b0577855443a9582725255e7a20d064a
3e550bf62efddf7f7e8c9db9a588b14931d729f0c09e74e927006d1dec69b7a4f072c7df8101a62e
532900eb943b2cfc74678a3f8f80244e32fc3a390508f2dd4c1c16b52929f4f3b91a62e4d3c7e9fc
e09724e738a2de7209245b586c4b51c9f5dbb367afafb8b2e2d8e6b91a5664b1bc8424b276a7646f
515070fdb8698d9a66bacc76cdbd105b4e31b2a2051f5da849ea10f890d8097fe5b06fb37f815263
bda9b147124f9b770a32a9c1817116e981deb6af60343e1cf3cfc53bfea855fdba0c93e51d952177
92d2e36c588d682b1e33a5c2c86a52db97bc7d22690e124ee0347358300a521a9e8108ff9c46307f
08532cf887f83e8d3424a17e749eb791f1adf8e03244aa24f5040154ee556cfc0cc3346671432402
be01118279ef39fcc0a04027b7dd223505972639c21656d119939f0dbd79a989ca31194cb707e813
d66a0ae94e98f30c1f3fadeafe05f131b67ef8f4662549ffa8c6646138bc58e79842d2b0520fe0a0
0640bbc59c6e4f83377949f76d2715b0ab7302c7d22fa768ba849e9e9f0fd3cf5590cb0bc4fc1531
a31e0a46cc4e7430b79dcfb0a4911f52d5646af0fbf767e3aef2398ff8f8990b391772e30e3060bc
493f7ec2975a7f62fbe5ce428f418659b15220fe037b0a744e1484582ebe619a531a9e57ab1edc26
7270e166b9c28f30510ab5bb53429adf547d45cdc6a81a4cd520d65aaf1c1bdc5b5ed05f8f514d37
ecfe52e49f5adadddd5840eec0317d91023900e9d3fa5f9d9f766a33dcef646503f2deaa35ed45ee
f0fe43245c02d2d2be23c5fd79e4c2113980c5a0028ddd83848ac722d236561ad9414a1fe3188059
6626059b3dad487311e58d9dc03f8d8165c9daa09be74e137d46740d9a161316a202f9fcbcdbbd2a
eafda19cf9b503cb0f2358e99349f510c37d2b5fce78cc53e4e3e9f39ed2b484201ee35f29626ae7
86cc190a46319ec3368feb89bb78b1c732cfa0f729d0592cc58e2b1e281feab2bbfa95b3b1446922
985347ff4cbc3c9b945224254502d471a0c09f36dafa766cdc906a004e848248fc9a8bcec24c24bd
6e62c2f510dde378eb06fbb6fb42a78b54ccbb97f9916d016ffcfe18864e85eea19256614c5c31f5
39e137ded8f85bada4057512e1f6d004b3e785b600f63e12c19c261db94742cc15a9f683d97c58a6
8fc22ff8b04fffdb7ad1428ff1b3098e68f798f92958a96531651493376db6b9b7c95a4e6d652875
ea8cf6e4913123a63bf03458daa3d41094fa3eeb7bba7c9d75dae7000272086725ab2b00758317f4
0abffcc98e7edd36028d6aca840ce289a31949948b75409b15a8cfb2d7ffcb02b666feb9b0971693
87728d784a771153521bb0877de02fe716e456d9b8c98317091ac7357d22f8eccecfcc1e3c1ffa50
ab683196b5944b709db1a44eaa3ef137222f0cedfd11e4cc05c507f0714d82550fa18cb5d2104ac4
2237fc83e924a251a621e6336c2cd0eadbf065185961e72c1789ed784422580c7068a2cbcb3e9c6a
6b7e9ccfd0afa4e7c52fbb74b22758cb5f6035978cba6d8dfe99ba9a17d7e0a8c5dea2f0f6ab32fa
c57126bcc7afe7f5f6c2ea372c787b2b006ec86b5eee18463582759f68e5d747b58efb3a2c9dbc8f
b053e8a7e3199b8ff52a5c31ac51f863782c2f7fa8865b4d01dd16774569af30332aac89b1590eeb
eae48e02b36b1a73351f3ec98dc199170af7c99d1488f09c8db932da6c63c8d4235598e5d6f31fec
9e67b733e036a10e341e56daa17480f89485b13b53d4887c832999d447e1a6940ca264d6bcc80946
70367790826a930f3343d4fff6c5cdfce24ca60c8145423f0b196d57226736fc68c1625b23fcc5fc
b5226c4e37182da06ba1c5ed77448087fa36a4c6a54f50d808923770429a351d3bf83fc7d25caaeb
0c1edae00903a0557d2e1119760af63afd055563361961bc775664884fd0d3ba3d1521c99e7b6a64
351f605e0920bda3f736256ff77c619ca2ea63aa39063c9b90aeb6879937e14b1e960cbc8d1f8db9
cc89d804905e80f6df2b89700496a993b4bf1192e875de29450bdf5fc330c32d195b022969ccc488
84fe21b049353e3b9a161da37e9b5cee15e35b752177de2d7313f9e6ee3b41e3859c61dfb455af84
8fed7219bba0e0e6966465967c4967eb1431d98eebc771ca36ee86872c6a1da30e93c573e9f40937
4bc239412d3c60ab0812525404f19d19a1c6f9ba9bef634e8d4ab2e2d4b651788cf0a93cae91ab74
fea6729750e215e322e6e19c90025008002f1bfb07667c2a54ef98572ef052a56fe42caed449e214
789128ab82fd412812ef3fdf26aa8a939de6f08022f6fafdce211cda656ee1dae4df1f821319aa12
419cbf2ed9d2e282d1107cd0787d3eac84c39da4908bdca72edb85ecee3532001387df7ee6e42c63
dbc108ae0bcc74abb9c99ff73b3ff9557642737a6c4a268487f51505b7c77424890ac15adb3e7b4e
f3e895d29a8b88bc94d1ec4d5a4f301e8fa87476dfc33a8c7fab23bf4cbff15dd5a272fcf72e5a87
24401e3b1172651d485b1ea302d434031d3d002f102ee58c82f230e71f62ec68e5d0a0152a2e3d2a
5207c8cca2b921d74e22bdf1e44baea753b1482c323797aba6cf0f243d72c9d27f67b97fd42ee718
287cbf4c0301d9de24fb427970e6508635e4e0d6475444e8829a17493d646e9284e779d27bf5b85d
897919b30e83e6d02fa1499873a4bef3d0631f2ab2017feccf12c259e41332bf36b288f9e6792516
e1f6f114a61e63d80668087fd774838f65c47700217515f870c61f97972aa77f9725a55dcc2e4e4f
48a50da5c5f1e8a25ec36f842f1f7e62faa9e8b3bea55e89673b95275b827683cbc67315c15c88b4
be805f85e4560975cb6c923c8acbd6c9bea05b87eba0a8abcb2714de95ccb0b10e75b5967e9b43df
4acb83762f33c1e06972e0ffbc69019238b1823d6f64277763eee3c0b6084bb65e7791f021f1649c
f949c4ca326276fb7688f4c40c855f285f4ec546f603ce3b70e18163a763b65249d5c37502fe982d
c981e8947f39d68ea0eac60998cfe1654d3a05703b566efde9d3835e5167670289a5577fddb0dad0
103fd6d64f192c03309fa011a7402f926a04a3cea42e1bc3ecd5224b43c9f9133561489b3c877f21
d0f1b4eb7d0da5f211abe8978f8fc8a1b7d05a387f37abd1c45dff8113463cd1baed630aa714f655
ddfe26ffdecd4c5a3ee5c135e8f4df006c22ff56246f43fb93aec299ff1c8d1e219f1b2a11495eca
556cdde25696c7655674180bd4f8754ccd041148f315ed5c0b07d641f829d38328064573c4916b56
a22231ed17054b9b746cad86152a5fbd2bb40f2b9629801a6a7c27f482cf2effc19fb47baae610cf
2f4d60465bdd3397ffb3c4e248cceaa637ca75109b9ef30a67015e488cd44135657edb553779e025
6669ef31783c8d3407edf2d31d539bf8ce5b81265b319abc5a39d246959f5b8fcec4bbec65141b22
3a6f241fdabef2f6493013c7ed9ae57823a3679c87ef9f2736d61d41dbbc8b95c385a83f71c58134
b94cda1342c4319e430dea3a99d27221af930797304dc03fb59cfdf5d479705e48d5bdcb7f1f4ccb
a8ef968de9ba24572887a1e1e3e9c33f215af64795fbb9c5ae0ea8e7a296b61fd4edcb3e3b063c65
eb7dedbccbe33f1922525c9490ec40ad241a3213843e4e65f7e3688d3d723463d09b785cfae104ad
259af42639e0a696756dcdfe1143a7370136baae3585fdb2a8976c4f9cfe15d84499f51221d0b028
ec45b6004f318a322e5923857a73d900aa50e0ac92c1c338abd387aff2675746688f8743954730a2
0316ba4a0d3c571dbe4f31cc16d801c6927acfb45ba39661261336070f68788c805078c1758e70c1
96cf24abe52c45591a1e3905fa6efa49d25ebc98d277359cc835c173a9c39b6ab422f4f6fe4db866
5402763e90a646f2ab4fd9eeca2af6dc207789cec582eb15fe3581349e464255ec0e723809a63603
5b76c53fe259bc096e8049c58ad280c6decfa18e8d871f1f29a4897e4c27220b99472589b52d34ef
5c905d0cc1790b85b2fe0bafaf14ed99027b7efeeaf3d8737ba560d965db0f3e8d7459092e32a623
c9165209c82325bc243b6a37e377d68ce8f1a59c8a610108a0dae4c4a1445062f8aafec45b1e18e0
8cb2a2e5b2f6afc6419b53f1b980d6239a54d14af22553025a3830b755e8429079dee3be25a5c21a
9b0cc12fbb3ee8d71a93eeb2226a109505fa3015c6d957154801086b55f8dd9fb402507a67f944e5
ef23e1d3566164a29ce47d3085454144698ec9c538c1490de066dcd08b82ed3cc0f087b2759569f7
c024fed23f490dec61203ae515cde1b7a0ccd241b8188322ff1d46c65ca1c68d4119d052b1b5b66e
d62f56c36cc47cc2827cad97904dbb3245ee7620ba4434506abad42dddffe9945c94aae6c9317196
9431e9544abb0485a4129bcf63e7eac401ed3ef58d62b7b80c1eb08f68c83bcd911a8ee0039240f5
af2070d8b26b3e4e8593715715d8324806e96b14c837e340a87dc7af6310a9f9481918a8b903c436
b2dad2dd0b78031103dbbe6707f7c99246ec0d3c44d8455d8516026f801cdc31411feb3f3d7a488c
abbeef78e2c11f12d4af2872f6dc890df0e473ed8c8f5e6457abb1b03789753d193635929e977f7a
453550aa1e0f7e89ab9c362063fda738e3e980585401d64bbab69307b79941c977ec2f391cefbee0
53335b3dca67bb641fd7f68f186801e3e4dd0c33ad9ffe884244a89f35e55465f948c1e59ed00267
ae79fe68cf6dd6a68adff8d3b78551c38754362ee04a0ebef4aaaff51982c17926cce70c06da918f
b37dbbdd3b6d8c906644339d810d1035c6b53b5ba2ce4ec78b09700ba87957ed1e5c2ee8e3694d02
3a28558942149dc11bb2ec81447654c343e5d36998b537344df9b7c09504fe1762b3d8c631670a9c
a06cfecc093b53c562eb1d88426d87d41fbbd7873b0226113cbf361b2e100b843f317dda4ca9bec9
053c53dac56d448a98137b782c4b96639545d0410bf0c858c5f905e61f9b7aa9a1b8ee8ee569b313
76669e83195c0af67b7f2a28d83ebe2371ce947ab80089186d96c50223e6f30edf9fa6587458bfcd
e85ff13dd3d21d35532ab027326f32a3caa86baeeeeabfeb87ad89367d17ec338a09225342cb1dfe
337dad75a90fb24bcfd21f5e11a58ceb62742e98e00c12b182a9a80878fb4b9484ffd73a377718e3
064f36e0549795d4bfe66a27de4a6f726abe87db5025dd07384fe19f44f3ad71b6f9c01f034d7600
9d17d8c3965434ca050e4a37ab5ab60adeddddfded3be4583392505f58d3eb564e62cb17cb7546f6
3d4a980b1b75a26ea34b1684f4240481bda63cb768deaabf22cd51dc11c48bfc566e139019e285cd
6fd81d0e7c8afa8336faef3ba9fef81d5707d3deec152a93b8f428ab5ac886e1ff3e332092edf47e
66c0195ec5fc9e43c79391dc987ec6ed1126561e803b0c955d407b392a5f3c7e90afd010c3fcf0cd
bc4241000c383a268fe7fbaf10fda97ddbfd45c808a93ffc1f83d34a41953a0f8323fdb36d0340e3
7960fbdc31ae980633352206471abc8241d23cee1192275cd62e1b3bd98d6e135ff5a24f91201f6f
81ca7259fb857dabbf4a84781d19a99df96204598cce464c60ffff0c966d53177cef01e56f11be79
4774b7155afa9dd1af2754e3fd5ea469b7c88446c2862da93a8489028dbb728fc5e9fcc2532d20e8
de48d564cee266873019206af24978835681f9d647c088d877d14b1e6a95d8e9bc492c7adb7a9285
359c0e359f74b07e441325442f4a20d459dd883e9cc96156983e595ad8b2a402c6efc182c383c44e
06138640a6c704555110fc901b11cf08e12eb387fa29549d87401faab329361eab034367c47362ae
977d54e129c3fb0f492f46a1b02458c8e3fc955329ba93705f32b984e00e0410266ddced323e2597
aa79c1a328833c40f9b386e182727c4a5181430a559b8a13b563d7f61a734fe6d2956148f5d9cdfa
099a49a24ec7c3af9d0f84ffc14f15814e11594e953cc6dccbdd7701f7a37248422c2bd21e1882fc
5d70627ef58c177b72d2bdccd2929300fbda4a66c8bd3ba3e31c633b6044490119059f5e60ab9535
0b7c50c945e7051c7976753cf9675333cc9b26fc15f086ba71b16162c2afe5df8021219bde5db85b
6a92316d9bd0916e369a62d8c16d141d907f590a761e5d50ba97c6a764c86695c33e8522d88224ff
5c1d0f66ede4613b07c04af7d5f5b5cc4cd59e2ff50af10c20592e7e43aea02c7011e4245d6ae846
342cbd913dc3789dd54901f49704227665f3e726464e1d180996628423d1a87f6872bf20abd3607c
daebec11d25d0b0d73a90d2ed8de3eacb175e9b6399a588a82986868ad5f492b6dad7eed065ac3b5
1ec9e92c64eddc725d98bcb5bafd429efbca9b553d98fa14dff4019818fa198e21faab0b4345d4ff
86531b69a150586278d6c291d2994be25b29825b5e72ea755349c90b1ea1dfb32868ffac42591da4
2796ef27caae827415e59cedb74f96e732b4b18245429aafc20577cd583206bcaa671c52f3a476fb
99490e608fde5225943e29416818e9e0b7fb602bd0508c7551f15ed1b28dd5acc455253f13838361
8c4479a68374fa8588fe5ca24e2e24a648aff1374485d5d8d4f530557daa789692bad8e52889b390
3bc9fedba9a2d02f796e3ac5b7c5c4365e569fa45df075ff7bc2b15cf3b8b8e0f2f374dfdb169e29
1b463d0f7b752069eeb69b982b2bcdd4ba3b287c7cfdbde9eb0af9ddbb8c23f1d8ccb9942bb131d7
18aebf1b93d30660955a0dcc7503c51670e3c52a55d2928a92545d63e94915d9fd298d54f67848a7
d9f3750da8b96ca72b61db67098ac5574fe2a787f78fa63728fdbbdbd3d8d7c6fd65ab853d26d061
6eda2ae3e4bbb5a4c58ffe01886e680aad8aa839d257f19620562785003703865d78852978f82abd
41a40fe4238c867c008b001f6aa4192dd16f9a57840d6c1c73d1e57d16fe4a74d73c8523cfdb923e
361429afb07623beddec0decc4d7fa6e5199a55798cc02bee34ab6b2d2deaa8f08a2969a6d5055fd
f0b3e7b6f5d5a68d6864b3b02e8bc823d785c8dcc93e02a59ceb43edb47e3863a9125615df61783b
c1e649507af3984868392340a45f0a67895fe8e164f651a71bb12e8d795e65847f82883564bd7fdf
fa32abf9af36dd9ae91baf2199eb1c431498d995a529101d3d41b4ec3b5991b850320caeda4ea477
80cc425cce239d5a7030b8501f9ad4d3fb45e0bb5352ec9118bbace639aeadb2c84fec252ab2e6af
eb333736e104891e2eecf11fb683c56771c6e5dd0fdead735b9c06ed8c4c3fe44e94015be8bec695
4277ecd2becb35ece9849a7ec15f8aadf06a5d8294f3b8d83ad8bf9d5cd6ef17c0a0bfb5205306e8
75d71922210618829f74255e319b8bb26b8cc76261e24d081a8f877d1d44d1ec6da6d030ac2c3ee4
d9bc2fb2013eed74b5b997ca0d18f985efd0f601d7a7275e4d1c90eb1326de6b83358125a2820ddd
abf1c5aa3ff112930d1172caa16c60a1f09dfca67f040da1dd572dc86a4628f49670adfba3f4714f
0dbd9c4a1b3a82aaff923293d65ea51b40174f95ee5b7ac67d2bc577d69bb283585ae5c588b0cd03
47041fd73e15a1996bdc4b100e209e80add8d24bd8a7f40531b9521ae12dedea236d672c624915e1
49bf8e91f7864b1ca7484cd8434baae5d2307374d0608182e814108b7fc5290e73c4006dd568a1a1
8e727090d43636ff568b8f92ce409d3316195a6762717ffbcae6e82a027ee5364215642136941d31
6a46eb5169d5c915ecfe2da29d4179f47b0a1ec4fbed1ec330d9088a0fe2b5e4a2d2db3c4898ba53
541369989b039e5979b75cf4d1932a366d3eb6b2476007a75db07d41e5ccb2cc8d76cd5bf70b5b9b
8d487cfbaee9cb82226c968580ee7b9e5168f9ba850df9d4b392a50de2a7b1418d06abbc19d4a90c
801221fdf668be2b6670aca78adfc1405fe492feef9325c4fbd0f679d867cd03f00778b0c61e1f87
46010a31962ab452c24baf336b2a108bafbac778da16108e86d2d43582bff88252ce911ae9235bab
619f982caaaf38a9036591768944c389388db2f444cc2a00c59adb7741462d08641eaf294469c810
6624c80f1302791da36b004713a9cdcfcf0f5fed40840255fa04502cd9af741a7a9207d787915762
b353dbe3823b075a956c683c6054b37868e6db73ece4b78fe863ae37238d8c2328fbe257667b427c
4e4b97163319464ddc12fb9b9907e8ca7dba0139e96a4848a6118bb75a70ee99f1b5d38fce79318a
862843618b06fc640b8c1878360510348c93a1cbd189a83b6addbefeffb4c5ce0ad29d8a30645f8a
e5a3bbf6c7da43a73e6b3f521bf62b77fc55f906efbc6b8efec3fb540d394b4731066219775a43f0
35638ddf20c7cdc9f5a76bbd39ffc1460b86299c31346b5152152b476293ac4e53378d0e7be480a2
9680b11bcc260053da7e0df98f13b86bc18352c484a2c58d2db1320677aeff0cd05356419d572bbe
b6d8e64997b88a83c735992eb6097f4b7fc909b4af9c4dc480b815dc62a1a4641240c402cc61b188
1953a02a8b171cce2f1a0d1ce94e246ef180c5888b3e2edd7c90450ad995caa697d316643082e523
313f03f150e1e6df8508809f4cc516bd6b85b2204c87ae95b4fa91345600388514d528af943ee686
493dd21403ff77efac85dd1ffb1c52d5f44dbe82043b4548039c87e76cfd8479837fc3591a0f5838
6d79496c3c979bc85e2edc774052a27eb83694cb79b4d8eb3dd917805cbe9f7d591713eefa87302c
a23804eace49c6ada319965d18aaa7a4f06a1f75a61596a3c663da2df2aa7c6f0c54fbbe308b974e
5403020d713972746942e8b0e4b1d6313f231f5d2045ecd3e9772d299627b51acc78394d26c972bf
1eb3a8ecfdc7d1e764e79198646823fb17e661e37e91bb9c629e5e45976fb1cb23048514e7ac28d0
d78c609931efb01aae9cc536504aae91c207737b52d26ac443bd36c133965d19d63af9dfac45d63b
a983fd17badaf8134b94f015ae627cfa19f8bd2eff22a6ce8b924ab401714090d70f7d6b09a26861
5ca330db02cae1bdb0f038fa1077ed91b36c6f4023755467c105abce30ad9f51362f3647ef19d23b
a78d3830e30a9f76a285a94208a325c06841b4cc325e15d655644ca6a7bffde1a34ad5ab39c5f4dd
e5ffb0f40d25c67f668f327b1407dc0d2aac628b63fda61d9762cec29ab326966687b329c453dfca
cbf8ce10dc6c7806285aaf6ad46b6b0f1ff1d4af00177fa69174a25f562c0440e560e057340a2589
7557ae745f61aa213a3fb9d5432c4e6abab3447da7d57aa853a07e0bb27dc9d37d6ec94305bebc31
0c7c8013a439fe4471d2f57e89cee4e133ac2a21cdd6769e8d20ad50a6199776b64c71415ac274eb
541d732ae1d85d6e925e951001bacd9fae35d17b303cf408f66ab147c27014d6612ba1476d202350
cbd74143dd59ff3efc09890f3d7704c3c85f6f7d7e4d561a8b4432fb6f5e25d5f71a4e169a4555ae
08fa7a66eef36d9243761fb9091b4139d2659b9d1d4ba23015a9b5d167b06aeae73af8d90ea6284e
857b5ef75ae6b06969f8ac2091c73211d36a2fe2b6e448929c78ff8fcfb0bccf9e228305c3de0524
f05ed08e30c61fe648585fb6c31ded157bbe7bfda6cca847b33d984260e1cff1236ed81375c1511e
b7584f6c3bedfbf02d5d3c405929532278f4a073fd86a33879aa511218c901f5fb01e4568cb8e15d
9ba882645f288b1cf20c306b869d2235d3aaf42b2eef45fcfad7893e460f78328afcf75b4624f3d5
fe56852eedd842e6cca2ea06d07acaeb5c05909ab30660acb68026a173e6c50d463c4fd6155e5fa6
df82abdcf6a56e0433149396a6af1834e0806bdefe25a6fca328c7f962f6cbc3e644bc1b1770bc38
823526799b0e7963779b3db06630e2d78e363a52e68482c409fa7f74ad93be1aa9c201f265a15f48
fd571cd39fc57fb11de24f1c2110a35a744296ac1ed5811ff3197af77fad56b21ae77e9266d3878b
e29ca8618657a16bff4d716e905975395a4c36a5c13efcef3f6655c75551be12243e10507f544123
d3d8dc836ef2b5cb522144bbeab347ade3143a2eb7c4d86220f074f15a39c601a27a9f871b7e86e2
f74c5b444d9cd5dedee93513a4496bf6a6cf4876d721cbf9b8174a761e3183d4274bf9180026891e
a6ef1d07df07
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 1345 V810 1 0x0 180 V811 1 0x0 175 V812 1 0x0 860 V813 1 0x0 200 V814 1 0x0 400 V820 1 0x0 420 V821 1 0x0 440 V822 1"

// Rung VGR_Copy_State#2
// Offset 51
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1"

// Rung MPO_Copy_State#2
// Offset 31
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1"

// Rung SLD_Copy_State#2
// Offset 21
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
#BEGIN FMT_COMMENT 
"Deadband for X position difference"
#END

STR ST1
DEADBAND D140 5 D1

// Rung HBW_Move_XZ#10
// Offset 48
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#11
// Offset 63
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D1 0
OUT Y50

// Rung HBW_Move_XZ#12
// Offset 69
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D1 0
OUT Y51

// Rung HBW_Move_XZ#13
// Offset 75
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"Deadband for Z position difference"
#END

STR ST1
DEADBAND D142 5 D2

// Rung HBW_Move_XZ#15
// Offset 89
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V120

// Rung HBW_Move_XZ#16
// Offset 104
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D2 0
OUT Y4

// Rung HBW_Move_XZ#17
// Offset 110
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D2 0
OUT Y5

// Rung HBW_Move_XZ#18
// Offset 116
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D1 -40
ANDLE D1 40
ANDGE D2 -40
ANDLE D2 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#19
// Offset 135
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5310 V140
POPBOOL
DUPBOOL
ANDE V105 3
MOVE 2990 V140
POPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181

// Rung HBW_Program#9
// Offset 53
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
DUPBOOL
ANDE V106 3
MOVE 3240 V142
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#10
// Offset 85
#BEGIN FMT_COMMENT 
"Task Send<br>Validate X and Y input are not 0 (unselected)"
#END

STR C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S7
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#11
// Offset 109
#BEGIN FMT_COMMENT 
"Task Recieve<br>Validate X and Y input are not 0 (unselected)"
#END

STR C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
JMP HBW_Program.S1
POPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181

// Rung HBW_Program#12
// Offset 133
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#13
// Offset 135
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#14
// Offset 137
#BEGIN FMT_COMMENT 
"Task Send - Move<br>Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#15
// Offset 139
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#16
// Offset 142
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#17
// Offset 147
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 150
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 153
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 155
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 157
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 160
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 166
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 169
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 171
#BEGIN FMT_COMMENT 
"Task Send - Move<br>Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 173
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 176
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 100 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 181
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 186
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 189
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 192
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 194
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 196
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 199
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 205
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 208
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 210
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 212
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 215
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 231
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 2000 C99

// Rung HBW_Program#41
// Offset 235
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C99
JMP HBW_Program.S2
MOVE 99 V181

// Rung HBW_Program#42
// Offset 239
NOP

// Rung HBW_Program#43
// Offset 240
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 242
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 244
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#46
// Offset 246
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#47
// Offset 248
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#48
// Offset 251
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#49
// Offset 253
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#50
// Offset 255
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#51
// Offset 258
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#52
// Offset 273
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#53
// Offset 275
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#54
// Offset 278
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#55
// Offset 293
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#56
// Offset 296
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#57
// Offset 299
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#58
// Offset 314
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#59
// Offset 317
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#60
// Offset 319
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#61
// Offset 334
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#62
// Offset 336
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#63
// Offset 338
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#64
// Offset 340
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#65
// Offset 342
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#66
// Offset 344
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#67
// Offset 347
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#68
// Offset 350
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 100 MHR120 1"

// Rung HBW_Program#69
// Offset 366
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#70
// Offset 369
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#71
// Offset 386
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#72
// Offset 402
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#73
// Offset 419
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#74
// Offset 435
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#75
// Offset 439
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#76
// Offset 441
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#77
// Offset 443
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#78
// Offset 446
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#79
// Offset 450
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#80
// Offset 453
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#8
// Offset 56
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#9
// Offset 73
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#10
// Offset 77
SG VGR_Program.S2

// Rung VGR_Program#11
// Offset 79
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 87
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S2

// Rung VGR_Program#13
// Offset 89
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#14
// Offset 91
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S4

// Rung VGR_Program#15
// Offset 93
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S5

// Rung VGR_Program#16
// Offset 95
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S6

// Rung VGR_Program#17
// Offset 97
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S7

// Rung VGR_Program#18
// Offset 99
SG VGR_Program.S3

// Rung VGR_Program#19
// Offset 101
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 109
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#21
// Offset 111
SG VGR_Program.S4

// Rung VGR_Program#22
// Offset 113
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 121
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#24
// Offset 123
SG VGR_Program.S5

// Rung VGR_Program#25
// Offset 125
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#26
// Offset 133
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#27
// Offset 135
SG VGR_Program.S6

// Rung VGR_Program#28
// Offset 137
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#29
// Offset 145
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#30
// Offset 147
SG VGR_Program.S7

// Rung VGR_Program#31
// Offset 149
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#32
// Offset 157
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#33
// Offset 172
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#34
// Offset 175
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#35
// Offset 177
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#36
// Offset 192
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#37
// Offset 194
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#38
// Offset 197
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#39
// Offset 212
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#40
// Offset 214
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#41
// Offset 217
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#42
// Offset 219
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#43
// Offset 221
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#44
// Offset 223
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#45
// Offset 225
STRN C500
JMP VGR_Program.S1

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#19
// Offset 56
STR Y20
AND X17
RST Y20

// Rung MPO_Program#20
// Offset 59
STRND Y20
AND X17
RST Y17

// Rung MPO_Program#21
// Offset 63
STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#22
// Offset 69
STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#23
// Offset 73
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 75
SG MPO_Program.S2

// Rung MPO_Program#25
// Offset 77
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#26
// Offset 85
STR X17
SET Y17

// Rung MPO_Program#27
// Offset 87
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#28
// Offset 90
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#29
// Offset 93
STR X18
RST Y17

// Rung MPO_Program#30
// Offset 95
STR X18
RST Y20

// Rung MPO_Program#31
// Offset 97
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 99
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#33
// Offset 101
SG MPO_Program.S3

// Rung MPO_Program#34
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#35
// Offset 111
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#36
// Offset 129
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#37
// Offset 132
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#38
// Offset 137
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#39
// Offset 143
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#40
// Offset 147
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#41
// Offset 149
SG MPO_Program.S4

// Rung MPO_Program#42
// Offset 151
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#43
// Offset 159
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#44
// Offset 176
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#45
// Offset 181
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#46
// Offset 187
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#47
// Offset 191
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 193
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 195
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 203
STRN X15
AND C800
OUT Y45

// Rung MPO_Program#51
// Offset 206
STRPD X15
OFFDTMR T103 3000 Y43

// Rung MPO_Program#52
// Offset 211
STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#53
// Offset 216
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 218
SG MPO_Program.S6

// Rung MPO_Program#55
// Offset 220
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 228
STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#57
// Offset 231
STRPD X13
SET Y18

// Rung MPO_Program#58
// Offset 234
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#59
// Offset 239
STRPD X13
SET Y47

// Rung MPO_Program#60
// Offset 242
STRPD X14
RST Y47

// Rung MPO_Program#61
// Offset 245
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#62
// Offset 247
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 249
NOP

// Rung MPO_Program#64
// Offset 250
SG MPO_Program.S7

// Rung MPO_Program#65
// Offset 252
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#66
// Offset 260
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#67
// Offset 265
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#68
// Offset 270
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#69
// Offset 275
STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#70
// Offset 292
STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#71
// Offset 309
STRN C801
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command."
#END

STR C1610
JMP SLD_Program.S2

// Rung SLD_Program#8
// Offset 28
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#9
// Offset 30
#BEGIN FMT_COMMENT 
"Check White temp storage status"
#END

NOP

// Rung SLD_Program#10
// Offset 31
#BEGIN FMT_COMMENT 
"Check Red temp storage status"
#END

NOP

// Rung SLD_Program#11
// Offset 32
#BEGIN FMT_COMMENT 
"Check Blue temp storage status"
#END

NOP

// Rung SLD_Program#12
// Offset 33
SG SLD_Program.S10

// Rung SLD_Program#13
// Offset 35
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#14
// Offset 43
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#15
// Offset 45
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#16
// Offset 47
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#18
// Offset 51
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#19
// Offset 53
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#20
// Offset 58
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#21
// Offset 60
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#22
// Offset 62
#BEGIN FMT_COMMENT 
"Check White temp storage status"
#END

NOP

// Rung SLD_Program#23
// Offset 63
#BEGIN FMT_COMMENT 
"Check Red temp storage status"
#END

NOP

// Rung SLD_Program#24
// Offset 64
#BEGIN FMT_COMMENT 
"Check Blue temp storage status"
#END

NOP

// Rung SLD_Program#25
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#26
// Offset 67
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#27
// Offset 75
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#28
// Offset 81
#BEGIN FMT_COMMENT 
"This timer gives a delay for the color detection to get "
"correct color."
#END

STRND T200.Timing
OFFDTMR T201 2000 C1601

// Rung SLD_Program#29
// Offset 86
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T201.Timing
JMP SLD_Program.S3

// Rung SLD_Program#30
// Offset 89
#BEGIN FMT_COMMENT 
"Check W temp storage status"
#END

NOP

// Rung SLD_Program#31
// Offset 90
#BEGIN FMT_COMMENT 
"Check R temp storage status"
#END

NOP

// Rung SLD_Program#32
// Offset 91
#BEGIN FMT_COMMENT 
"Check B temp storage status"
#END

NOP

// Rung SLD_Program#33
// Offset 92
SG SLD_Program.S3

// Rung SLD_Program#34
// Offset 94
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#35
// Offset 102
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#36
// Offset 107
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3200 0x1 10000 8000 C1602

// Rung SLD_Program#37
// Offset 112
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3200 0x1 20000 18000 C1619

// Rung SLD_Program#38
// Offset 117
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3200 0x1 24500 21000 C1620

// Rung SLD_Program#39
// Offset 122
#BEGIN FMT_COMMENT 
"Increment W counter when W is in color detection range."
#END

STRPD C1602
INC V3202

// Rung SLD_Program#40
// Offset 125
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 3, jump to S4."
#END

STR C1602
ANDLT V3202 3
JMP SLD_Program.S4

// Rung SLD_Program#41
// Offset 131
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 3, jump to S5."
#END

STR C1619
ANDLT V3203 3
JMP SLD_Program.S5

// Rung SLD_Program#42
// Offset 137
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 3, jump to S6."
#END

STR C1620
ANDLT V3204 3
JMP SLD_Program.S6

// Rung SLD_Program#43
// Offset 143
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#44
// Offset 150
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#45
// Offset 157
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#46
// Offset 164
#BEGIN FMT_COMMENT 
"Check W temp storage status"
#END

NOP

// Rung SLD_Program#47
// Offset 165
#BEGIN FMT_COMMENT 
"Check R temp storage status"
#END

NOP

// Rung SLD_Program#48
// Offset 166
#BEGIN FMT_COMMENT 
"Check B temp storage status"
#END

NOP

// Rung SLD_Program#49
// Offset 167
SG SLD_Program.S4

// Rung SLD_Program#50
// Offset 169
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#51
// Offset 177
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#52
// Offset 181
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#53
// Offset 183
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#54
// Offset 188
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#55
// Offset 190
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#56
// Offset 195
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#57
// Offset 197
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#58
// Offset 200
#BEGIN FMT_COMMENT 
"Check W temp storage status"
#END

NOP

// Rung SLD_Program#59
// Offset 201
#BEGIN FMT_COMMENT 
"Check R temp storage status"
#END

NOP

// Rung SLD_Program#60
// Offset 202
#BEGIN FMT_COMMENT 
"Check B temp storage status"
#END

NOP

// Rung SLD_Program#61
// Offset 203
SG SLD_Program.S5

// Rung SLD_Program#62
// Offset 205
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#63
// Offset 213
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#64
// Offset 217
STRN C1606
OUT Y30

// Rung SLD_Program#65
// Offset 219
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#66
// Offset 224
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#67
// Offset 226
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#68
// Offset 231
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#69
// Offset 233
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#70
// Offset 236
NOP

// Rung SLD_Program#71
// Offset 237
NOP

// Rung SLD_Program#72
// Offset 238
SG SLD_Program.S6

// Rung SLD_Program#73
// Offset 240
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#74
// Offset 248
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#75
// Offset 252
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#76
// Offset 254
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#77
// Offset 259
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#78
// Offset 261
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
ONDTMR T210 5000 C1613

// Rung SLD_Program#79
// Offset 266
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#80
// Offset 268
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#81
// Offset 271
NOP

// Rung SLD_Program#82
// Offset 272
NOP

// Rung SLD_Program#83
// Offset 273
NOP

// Rung SLD_Program#84
// Offset 274
NOP

// Rung SLD_Program#85
// Offset 275
SG SLD_Program.S7

// Rung SLD_Program#86
// Offset 277
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#87
// Offset 285
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 10000 C1630

// Rung SLD_Program#88
// Offset 289
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#89
// Offset 291
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"T3","T_HBW_S6","",""
#END

