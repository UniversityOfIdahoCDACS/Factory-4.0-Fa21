// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\keepe\Desktop\F40-control\Factory-Fa21.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
9f72e33d719f9411822b5084eb8832625b2d6f2311f85c738c44ac2c75d731c02632fb07ffbc1ba6
479fd248c374ffcf11c5123354771bb0291cbd18cba408ee55ff88aa92c9def7957b5cbdc65c86c6
04a0af06aeaf322bf3a5ffa3e93ae360c675b185f5cb1848ed5434ecd4eb2722c3a85d6d1ddb739b
155cbddf0cd2e210e9a5b059bfa24f770c0132d4eba5d42b27c650f7d0cf71174e30cfdc99d37e17
af97887a5d9c5bb994445373ddbecf28a6d870114ae5f11748dbc5cf838a299d4013f8d9d8a77944
c73dfb477ef815a5b9220a38213b48aac193c9f48a33126537ac34b041ce95eabe50540e55ea4d47
eb24b163a6e31a0eb1aa964de9d04933d723b8a5d3b24e0a4d0141cd027eacd981de7c5375ab1385
a9217694aec716f4f55cd5e271a79e9f497c5c5824bc1872bcb4d1ed8444ecccf86fba9672cc27eb
cf4173b16971273ab8afa246f1b2061f93d64bae93e31da956d3c5c8b65c956003246f2b25a5c73c
aedf92e5aa169df95ca7a9a2545dda74f3b0658a6dfad941964e949f8a8b052174dae5f3d1c23381
b146b1824f2221b2776c530d73962102289fd3b7a989d7e7af2ed67c0a24ddd03a22a7f9e7655aa1
0b24b8fa8aa5c0ee8dcba9e69f7a182247fef6021cc99ced817c643f286451fe6a39bb19f8442c39
a055607239b7e1798d0baddea37bb3fee260e53c208f7869374f16527180ffd91cabd9e75e205d51
a54b348e26d12fff1437e3705734a8cab11158e49e77dce1c37bc64f27af28e222013d7a2d7d760e
6bdd9dac4bac692c5893a8735dcdb130806bca944de914e8a0589655983e5d8c8e575ed792d87629
7c5610b2414a33da34bd7025486a3aec11f1d7ff81b1e509e4ec7e278c60ae765d326588441ddb9e
9d9d7accf12ee8e64e7be7f9c4d99452e72ac0af4014db5545cfa945a8041796b107900698caaa69
f870c636ca1089819d24d178b3a0f76e83bacdcfa6405b4c008e3a3054f46a9377aec524cdaf0604
59e7725be22aacbb8d3ea82998ca60eb60c736cf76c301767497a313f4006c50c80fb8f112e9f7ce
479af93ea2461fc0181662a0022a651e45f5934a2809cfcb89ab3f80515dfb8740fafb1dddcda585
506ae6c4c08568af5a911adf1146d5c2be271bf62d8e30ae92980aa94fe0ce696c1a70ccf511008e
addb490c735adfafa413f575e328576134c4d82804f25bb295092adefcbb893b9d22ce7d189d3818
84029333d907329b11a339cb7791cc65319a8a2aa055cdbe416d952889473d3c629238352b90abd0
607068e5f436cf3beaf74029e6a5eab7c998ecad11e9ef54199fad7dbaa424834f73df3eb9c9a8d5
0f6f561af5cbd8d2a5545616b1bec7f771661d40ae6cf1a99cc4f48d902c0d4f4d43220ac6081644
9784b2fd89b878ad0d83673b58f7737872366eb12ef4ec9ebcc85d71843716df5da5cff5bbd9a62b
8d62a4649008b7cdb9680f2c0a8f8249c472b3703f977187addac27ddc67b21f165852808f1e53d0
7dd65cc1e07c9d400eedf280e37e3c20fee04cfb75994c581b23af2f5bbea5ca59ae8877fd8bc689
dabaff52e4a697bac8bcdb68fdc3dc3b34d891bfe09e838ef2b4bdc6f3fa3140a7d3c4d6bcc7c9dd
2c39804483f5089f2394bb28abd9aff0a41f9ede41f66d8785269dc16e28edcb74b9b96c7495089a
0547fe088bd6ae91dbecc1eef7916ac63a5f39d149ecef41faf5b7659cdb039935b5faa75ce16639
74be7c3627b6b6a0b23206a3d2d1a8379de2d9be04b7bcc6afe0b39999d3ceff4906f79c496e6d7d
1038e90c0067b784d4965bfbc290d9c7db6a523d468ca2e0e68dcc3c902463b8b3c560d3e7425364
3a81acace67bea0e3d0d19dc7b034f62a419c3737c15aaff043573ac6adf701a2ecc058782c26f01
66df47faf35569e10adab88e61feda992ead3324a53ed4baa50f795c47ae8db18373e6469f4ba472
4f6fb84f76a8bf1a3ac4f88726d53264ee4b01908f88b2291e3f3690323fadec23edcaec91fd02a6
103373b458ffd58640658b9cf81263a316ae20d96708626a557fd584acbd0957cec2c6f2f215944a
3dbbee5d1ce82a4cb933c7fdb516c3a05f37c8e88d202bd34b01776512e14d27df7256b8846f4933
1cf01b3b90f59431f3764a302aa6fb38c7218e83c1ed79030089d296f750448048d131ed2c045e27
82180d41c76d8ad7e4d1571a319542d8a3cbfa1bb228ed08c19e8e217628f6b195261d258cb51ff8
a798ad703813a730aa094c7d1cb52de835fca37f73befdf5d647c4036a824e9bcc1c28f5cf2b8660
9ab36bb6ec661fa284aa3b061d344ef28738e8fb02c79bb26773aa588074fb3bcfd9346ada946e32
e334cb3ac705853baee11a4956b7518068bd8774863e8f19e2c2eb38015c4b417fb2e3ce75131670
210de97666f547c675971c33f13c35bd913e32c6d19568d526fea204acd8e81db183adc86b07b36e
d1d87426072713d2a87503bfc80d992b1684003f119d03c2cb458795398f17e608cd9831ff03b34a
500d04c73f36e44d3b5e56388cda4356a5d385357cc46546b200469e60db57cfcfb54fcabfea977d
34be8249a22473d0b145873cb223327ced9fc40154ff5f736641283c58bd4b3dc128cdff2ee29a45
1e9d1080ab5085e6ef29ba99a98ccec09aaff0aa881976645b6e8caa61c7bdb8b1708b216a8a9c1e
c41b0fd9d60703623b4e9339059339f3fa6161d48df83dfa11f4a07f747c5c1574ea85a5d286365c
7de27e4c4e7968928b248e1c53193aac0909ce3ccf5a9ac41237ff9c8e7c0abefd455501e6c6ce28
bb4766da5469e8509f4ef5fb75e7535ea513fe803b54e1bbd5bb436ca67ea14e7e633df18ccc910b
a367948043a6f6a3c7a13775e15b1625a27d35fd1f847f9d53d81a6280e7178c5167772cffe9b3c9
4683b549d81481328285a22480207a573c616bec974ded885b7ad35faa6198420390c8e33ac3f546
9913692f913f3f9e8b9eb119feff67a15e542d2bd96479ee58dfc2a07bf90188c9d6fb865281f0c5
2a31e00927ba65859a776555660cf03f29b5b18439360dfa6e8d21907fb88e7772d2f33944e321b2
138032b1528759fa7d4f6698d501537e73e0c48f15fc36e355bf68a37be8f545bf3f4c9f97476bba
9f8b29fc715bda933306a89d5a299bb01ee8e5944398b69548e219da8324c8493062efc3d63dd94d
82441161c2a6fba0b5dc70d656e83f892a1aa17deb276f950bcc19460a8822698f77b229862ea13b
5f1d7797a0c0f7b1574289b7e907055d086c1e068ce5074a5777925f04dee69efb8936a73b8f7c5c
357031fc9b3f14ce68e85681a18110d0c5eeb8094cc224c5655104bc3bf19abdd53fd784bbc28018
2efddd0a3078db4e336691baa1dd0f07ee58c07d74baab11489751e4cb7fd78414942357d23211b3
5918866df154780bc47525fc8fee0b203b47757a494c19c725120a6aa8debba9223bbe43c5646ae6
3e25730db6c14e2daf17cc269d5502df14097a15d04f4c9516e97332d60a398f98fe1cef359f3447
f954c983b588876d194727b578bf2023fa718e9c445a9c40c4554736d1f80c44cd22fc5ea95f947f
ccc36894620efb86b590032014a0eda47a2cbd1750627ade421d8d2da6082613d2a45097e515d72c
a43e8e2f3d6101ebf43cec8c256250882b03a4cebafb83dd886f46b2f0090193ac96b1b8d6626dc6
5ab57721c5e0de9ddca8ecb36985ba808f44b7778354b6819bfb304623b131409d60e647c945c5ed
ce860a7c29f4dfd4b66ed52d7aa76c91e225bdbde4a42368dc68256c5205a46dc09ea80ca49c0cac
2739171a363b45d87387ab39396020a36840a8ff9aacca052f506e49e3a8b59ddc877ad8e45e8164
a39164085a8e0e1294df2735b6194ff9c23ee68e7fd71caec4b0f1a5fb93c297d7d1592a3df86764
7dff1a2fc790f5eb8dd05ced35345d6bdbc0ac135cc4f84c0285dc8514ca689fd55fcfd595936391
90618bbe901ee1ca2275107ccaa10b9f52a2278c78c5cdc86945cfd76669c23ecca0ec38b8a43279
ed59145d1f093b54c72c2899596f8e477c52bf4fc260144a029035ababf2b2357ef3b2568ad96fd4
68bc1f2e780a9f291f6bd834d35a7859d7e5a794207d6e7297d7bae82bf62ce6c837c153a03ae80e
567d7defcca0ac7a2708b18e85d87c2d2688082ab234c667fe46431c5ab91bb37707b4e44996fd6d
3fc27138d1137955117b8609f8ddd4f3d9337e3c110cf544aa97d3e9a78177a2215ef6472a1bf133
cf9bf0df2dfc96f7466c6f13c1c9e05a09cd6ec1697f690567946ec0c629c687f939a2ddab3f9330
e5d54e055af8404edc99550c6423b995647ab393b1c411746a6fcf333b484b82680c92e8217edc64
aa2554e39f12563334d80ba93e44d8738529d7038b17a457f18a153e01d2728d47f6ded32226fe7c
cc17f54e841d12bba75ea82de36419f5615ecc792e4c5b2ecb0378da14228219b2a113f4704f9bbf
8ad829cde60b2aa3ab6b23aa3a594637d1d90b6f12b8e06f3b87cd075ddb57c2cfdd5b3090e028aa
18266a6f4f59345b67aed2ee9a2e613005cc9b76e38b1a6a8b4f8788a71709d6099974791dce298a
fbfc6a60b63442d2b6e35b4b7217aa56f913c17b6c264f812c3b7bb4e0d025eb286e82e96627a5da
61dca07ed09c71327a6b36d774f33893c2a5cb54df543354605fa0789c440a4eb8d0a6cabe1ff4e6
1a7db0466938e79e04c7df5746a18c4d55421fe05104880e9299a6897c9eeff57923d43dede8a993
b25a0750dc5ac6bbafb87d73eb8940d856f2b786674b73e49b468829d4c048ee4f808cc04f47870e
2c3a41a13b8a8eb2de50bd643aecb57e513841297a9c4946d05e7e74c949b9b9dbff9cfcae904240
f02ef8481a415b1c051374fe9cdb93afd5b5e7d9dd00ab92fcf157988cdf53d1c991d38fc73b0150
bfd55e2194d7ebaa23398e757e09ef6793ab1cba2c10becd95d28f045f4068d23d60c2dee972bd81
4babd349b6fbb969ee63a64f64ff9a583a4f3b026e7c740651ea48d247b45e7bdbb7dc7bf06b0236
4fa5a898757b520c471db3b595ae189444c7fc9d697c9ebb22cfc3020e9bcd60beda1299c29fc82c
b43fc35adf8ae83997bf1a321d830ac9337c3a6e4fc2d6747794f2d30bbf5570a8156e77653918aa
27f95ad826b7e6808d2102dc0302ae76d19a7c84be3b37694eec472e8493d006bb7126239f3768ee
1c5a29d6638e702834aeb2d1a2859e634492e7109e536145732d5ddacbec4c80feac5d5e37923003
1b2e7c2543a836b22319d5b5688abd43293e7e790be24face3da103cb299e2fc3f9f2191980cf4fd
a7e3d247225e3d201052f51582b732c5ce37f8fd041a78fcaf26ea935884568fbe2596c5fa7a9e08
79b19ac48fbfdb1cdffc20b41e05d89915e4580aad8ddb65cbb449f624eff6a63258ad34a0854ef1
a98449c1f94adfdfb4f36809df27ece947e6282a1cd76acdf8eb0a6b044a5b1b4f9f5d49bb688723
1ecda58511ff1bf232ab96d36c9a6592040ee0010e73a7aeaf7a450cf9ba03467c524277248d8afa
c528494e5859b7cbb674a863b7fa4c594f01efd0ba6f909fc97a207dcb7bbefecc9cb1eae62216ea
205859181602babaa72a48476d6ce6ee050c31203c0518eb2f6ea6e8367d8433b555a5dc02b996da
ee11fbbeff5e567deb1313d91000e0530fc8ff6de8450f158b391e526cadc86536d020310d22defc
377fa33310995d42fd0bcd2e4f9a9c504bb3726e2557a3ec059422730df434681f28924c931b4b66
d7be9c658d3e715323da3e596f76c8c9cd13eb1cccba01894b2b6d8308a4633e8c03e841fc69d6cf
aaea9096a42adcca0392139b8bc283a73fa601109e48a7f87376d83707eaaf845f01ac742b773117
10861c4bf8d5044c39112087e78ac20e35a7fcfdae25ff298c4c7851988b685f6e9489da565862ee
d980bcad9160b683ac0a7bfe85fd17143cd322737d3ff8eb69feb5ed60458825be739201576949be
a5864ca77ddbd3592cb74f5e54bd7cf4b66f50e1de83b9d5c4e3e865bca179364b9f5b841f2be9e3
fe173e890371efffbaf60e1691bbb9f7867d67e3253e7dfea8695fb38ecc42f4887b7b99b80594bf
eac4c9b6a7ebd3883c7c7e2f017ac68735301bda13b3e85a3aa8047599d3cb84f510a07edaf30cdc
f75dfa44d5db8de3b9426f0d608d8137710badc9a64de1c1829392a05b333a257b38e6e88aa4d64b
688a39f85f9c21aedd0c83189a48e1e0c7aebc825e966cd0035f4988919fb6d72966399412b98c6c
2e9e3c59601f070915d8a2dbef6d266af6875c7b52eddf9496a8a2dc23a11b38c407c4c79dea7a25
76b09c859054076039125192370157e10217309a388714eb02261bc234384b7e18924f41dbb01944
318d21e8f7353930dd88f7754ddca9a35de0dd387a78e9832fa38e2b523d962859c04bc09eb61070
4453da8ebbc71bfb8c797fbdeb35f537775ec940368d906ac09f4986af306e818655fcfa2e45b1e9
b7586eb5f2aeb95ecaaa1d72839f109cdd4209bbeb9e84aaaa45efad2e3ad524ae69bcf8dce998d7
af558854ad6fefc575c0e8fb8433230bed0519b2d858bad1496432267989c8f84fee2c0608ba0145
487b5419ac4638e484fb1aa267cec85893402a7d5e958c7666407105ca274ee8d5d930c76e872096
f5c3770290d78033f9f4ec10dac71ed340d7d4f8ab3952b40a3c16f6e0d34f3a7fdabb35379f1867
a2b02ddb92305c97fa2f59e6453531e1b6359566d05de796529b685a4f897e9de64a100cb1c6d080
861455e655be4cc8800f8492a8bdb38ad622254ab5b754adab8f9ce2f6c3bb078890c62076d7699e
fc5ee44c7800e50f4536015ec673f553664422f397631a755cf16c66b3aae91fbad414c22f12d848
f68f25f1fd35f726ca65b46d366367302f2a885872201bafa0090c4139a53eb90001c3a6dc89bba8
2b526bd84091e8040c16064dc68864aafee5c3892fe7a3ad209290766008bbd40aeb2828081d36d2
f7cb3b32144e0448b3c84db36ac977fc477f979f8f4de5995c2fba0d30761a656009a2a75f9072e7
4692d82b3d5365fc5773cbd6ec459b4bdd04aa2542b99031543ce561897567e7357228b5a5121761
4b4fb6eab8c2b91f73c5bd5331e31ad205f2368cf744f00ced76135b24b13ad9ba32022d630daa25
d9295faac414a6bf6a21e43ce7bfb39d16d5c13ca133135c76e88583c6985a3bcc9d2e4be09a881c
2f5e8b18a8c15a6ae0590945ca7e667e494bee175bb1a065f094c5f8acb1e3bf9999c05ca4a99cf2
6c605beb6fa918296619f5b7901b8e43cd3554609a8fd166e60c9bcd71fa95032a2e1ce2bc7ab161
b78fbe13e7a5ed399721401a208a9e2073f5d255c0d420a60ad885a246657dd79ba16b5fb5cc9e2a
8255eff1e13fc1b9bdca22f222b59e48f29fa7bb25139325dadf0a8e243e71d92736a3a01d6c66d7
ccd0c2a1b6aeac5f5841ab7f130698bfa7dd375e7fa114f06550975aa6ecd5b95f0dced330eb27ad
66b6c6c07a7b43332c13a0f32110f500643eac497c979727d0344f35e5f6599bde38a9f2e2175031
8db8077bd5facc621112581b498f6ac59f9ba35f7940aece4794219f1b3189a9f634cadc1387b139
df4f5333e8545284886f9f07d54d0de4684d6b9b788059ef17a515866f1d74c23d1e3861c0263a85
f099afd988f26e10630557d59ac8bf757be5e9722fb4d9d0e9c2e0f35fece235e7f33215a4d9857e
7a26f049652adb2443757751bf9ae674c2f151da37d4a9252dbcdedc394020762020024b0c027328
baa7be1eeb8dbfe01c33dec39b60d941b6106b1e4a35b45ddf82be3b857983868fb637866974276a
359706f44444cbcc95860413c435cf95677f4071be27321d5f2a9ab9278006a033220b9af5286096
a023c7b62b9eb7de0f9926daefb9bff7d007b4fe97cc678316e275118578d9ee4629d8036ef6e3bf
248be065e7fd4802f72ef5516afd655c20ba50e639b10d6791a62c7814216d4a1892a57c4fa6ce1e
ac1fe07b7bcc8f399584d8a3b4833f4dbec90971795810e3ec10f198118b7e1dde26d6d96cc2d506
281d4a6672f302cef8f0cd2a37801bb87dab95a031967883b6fb974a7f9dd663e530999c870e8195
34d4068b7be5fa452db4be188c1ad66c9801ea9f821b85f9e475cb873b6587910cfe44ea3d4d67de
8b6450a7bc1073b58c2ffa202643067a2acedfe0ed33ca9e5de857c99b7652bb1b4c959b0d1eee66
f7943212e7f48be10e568619fadadbc791e227aade7d559710fd7c7b96f52533b34f5cb542718455
61ff5c1211636345754b3506dc0f872e92d922eb70b0d676a99d7905131c905fa74c743eaa2f0fc9
315e1848abc8691e72785b7c2ff3d87bab91a110c8a8dc8ecbe2befe8ab6a54a0f61f64c5903093e
14dae7bc604886491255f2ac3795a8d07d994116ebca2711afbff973c36faeb32f0781acc1aae8d9
1157221b0e41b06addf6c11fc8bd0af660254616d607023645e4861ab156f82acd74b43d0a01d9c7
ad0305c7bc4beb8de55b3d88f74605178b6673aa1ae977140d65eae5e48af012ecdec579800de086
d49909a1700c0fdbb3643ef034c9f8324f25212bfb2753960351fe9f3bf175f7d9abfd0b635844c3
21286f94d426a727495c30c6ef74ab0ba093f9df1d8f0a49003c09f8729cf7709cdc378bee3ddab8
d09068c280d38511c0e07541254b0065fa6c7f7c3814673a1847aa83862f450f49509771ed49ace9
fb41a3ae2e4155a6731a1c987b74762776a63fe3726161fcf3212503371f6cd5e0c761ef7962c7a8
8a6900ca204112654b4b0f97d89fb32ec9dc51a81602a2fc09c8f3d6dbfc4a6f52b49373b5ae8cbf
5bb43e5842149776d7cc694de9c3ff62aee86e0fe8a9fd8badf04092be61f50ec17efd8100dac840
2ef549b0ac47c361de6beed33998c42d19afb21a9a166a2021b76b8eeca0c390fe9d1127b9c621c3
28808e7daa94d2c917b8c71f98db58b1bc1238d04694a17c6987ce9a31cea3b6932182f6383733d1
1502bc323683f72e7be0904359487a06f3a911ff15b83c46d084fe9deb8692260dae441903c25f30
1692ba1017fcc5cba1960c928e02121cea89f391c094b11bd75b2b36a40b8d62e5eb6096fcc5c05a
d4f6508bfb0231f24065e5ac70c3bdd913270907e9bef8622a74afc9a3f188ceccd4fa895d0dfc1d
0d6fdf2035d1a645ba140670a805eb11899536fd3a42212d4a2c679c892efa3cf68c7112a0be3a1f
c0438bbdf6319269c32e9267f36f541069ccdf9d692611de4272d951c92b582a3cd764936e7ff853
95fdf7e9a074e7fad06e2e34c87d229eb3287b0d3f6ecf28f617e036716643e143fcbcc03dcbd977
867e93483c93e9f346bb2c80e7d0f9237b07eaf35ccafda541622d1b38e4561dbd38d08dcf7dbf0a
76621b0a41e0e4011d4f0fa2e3f99fbb0a22742c38f6aa453e0b7007bf37834d9cd5bf91ccd84172
32404883af0a1476109f32d18e41b55c118a56c7c0db364221b6d64ef754388e6c6b9f7cc3f4e6e1
d01e0cbd64343a0cbd2d6abde7c4311159d576d1ba9f2b881cf424771c7b76e7eeecd32947e23fb4
37920cfd4e485948ba148079fef7dca954f0dee5677b5c2a15f3533e0505d5d6ff1128c639999e43
ccaed8cab322fb0f60294792f600e6aed3f6469b118041857427b6313210eb552f7d3be59e898b40
05a9df7dda03eb0fd39aeeab574bcb9a315a46a7a0247dac11e78ce8193f35ab99cf0e399f0b35ed
5228ae9eb85f4aca1605327dd41e46510640dcdccf4c946003cdce4baeeb13fb49585f86835f6bc9
2366963d47984a5d882d202127fed5a8389a7ec86820f2ccdc5a9460d63a95a9a223658597606739
ebf34703a10caf310d897580da17d6ed761182647aaafdbf73c9535b2d0142ce83a796122e59602b
294fba220a8f34696c388440e4372b6aaadc108c4fc33489c9672cab50d593e0c6aae73a3fe74e45
29e1abdb9ddb7f39e700470aed488fa844cc52e51b9fd5ed5c00652b45871a29ad8731740657b1d5
0b54fbdd0c3689f5475c8d845552e7bf53534ef17d10b303324bcc67f28ffb9ca434f7fffd6cfd43
25412e2364d209679aec451410edd3735ff64db28ac5352f3335bfa2ba56d32178b174994410032e
f3bb0b3002531d89723ab7b6bc3748a1f5f79779ded281e04c2bdba6d83eb15f5a1190fecd98484c
1612f4f80100f29b2aa8736d52bea98e85961787fd542877eaa3e4e75eca7b95fa880f333657867e
9be07af8a68d1995f954b88da958da85beb3dfbb7b42331d23ac65b9f8a6ac1fc4e6448c86cfc379
db4e1b797502385896ddfb026cf9f70e748c08fb046e20c62e87b2b6ca4f61b378f707d6c576f8c7
eb66ad986e02cd1102f8d0bc6d834645a8da4d0eef16fa2fdddb9f9231a26eb823e5ab20fabdac05
39c5bbe155a1907c77939d2309ade7d493f61df2e4cb6a047470a1df5c999bc7c5108d2e90a7e7e5
726e5b7355d8fc93566ff1782cfd906665d9027f903d527275724a19bcd74f9d52dc2c432817df0f
425e552b191bc8ff7a75e200f489c4484b3ede31b13acb2f0005c587f372ddb8406d25cf0587c502
76a3ad0626a4b770c7ca3b32dc5c7814016bfc2ed120e85f7ce2c002dcab7b079a390887515f4791
fb616d625d57f9b52531ee81cba6c7ecbbfdcd00295191e6ae3b742f5f2aa442ac94da5f1decfdcc
3eec40bf69ae46b5a559ca020d9d41cc94bb4e26bba6c20649f7a671a226d3557c403a58ca255b74
9f70b0a5a7e4f11eeb10ed89fe4940341bf45451fb99ac9115403d814a7ea4d019f6e9f666d3ad0c
fa51eba38afc53a08c1d53c7095e599687741829cb5624f9a3f3f73edcafd172aedab9ae33e6de0f
4136548e108e61649be4c8d5722769591b8b07743391db7b555279be56ac6b2a9102fc2851a706c2
aea68582dd8fa1a5b0a982d130257252a57d8e983b8e9f7c20229f584a3ad6ac4814f4d83b7491c3
b625cc3c215a749297554c03b58763a60220d3a20873ceda382c987f5a898901eb97613713a808a1
52008eb28225a4c4ef945b8941b1b0ef2ede1e8fa5807fa343ceb87a22372897c013059d2af27fb3
218c0ca3f0f7a6fb13097bfc26d2c3bc8c809a0691febbdf3dffc3049c441847754d59a8acd42ce1
69c7f56c3adf08c37ec4d32d5a0757724e23b8474e2ddadfc174898afcb87a7746485a0c03ab14a5
963506660be3d41961f67a1be04fe9e4628bfc38f5c39918ce7a8303b8523808f1fb4f323516d2b0
7db39ef8c5cf5741c80b550e74d470d38cb95cc498b44b0534731f94b9d90ac25c9fbb977c7a265b
ffb1922726a12322866faaafede537f228e3c56d4f3e43fae688e764cbeae2a58c0a0a1861e0d8d5
33a39cc5b8217dbb57b5e4e3f24db8bc2c0b41490e8f74c2b607bb55cea04bf5f30ae59101e4d13c
a9d628c5e591c2c32df3ac7e816ae94af7bc9539535473e40011606f7ee8bfd3fad2dc8b21e9c8fe
d7f7b583c9c41390f4cd8979251aeb323e7ddbfbc36a4fa3c8cdeae13f2aa54232720d254e613dc0
9918a14540883a1d0764b734c6d5e53a2f090319ce1432f6f9296a052e14ff5eb1e73458b3420139
4167e90128f6d7c865613edc533dae6faa874746aaa8c08c91c0ae9664dc0fab522ed21c76209344
ae46db44874414d4c1c039f9f36c06eca0ab3d3d3ac3cf8cffae37d904557363b368d8730dfb56d7
f6e8ba8efd0cf68babf667202f1908a7c9d0da4aa9e5d258b38dbed7c48a3046c53633774473c231
0f80a6d5a6687c823fe9420171583a8c7d2dc78543b904b7dbc83dc33bdc44e014edbaf04f121d7f
69280ef587a8f33e505b6f5b56d62575e0160be2c559b3c7b6b57802d0fe3e12a309aa277634e1a5
05947b781b54b95c25bb8cf8be71a5accdd5b00a535eb17f07ccbf908b7d07e0f94815250f74cff1
2256324bc75ab703299db428b5ee10000d3d8ab98ada4695a3d379021de1ced8eb092a9e2cd3d1ee
aff735ad2133170c7291180588f9840d52a40ab14612e8093948084cf75a943a9bed2fdced7176d4
717dfb36e9f15c45040be54ac4a7792e2f9607cfa7230b3b73819b1e20
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 CP_State_Program PROGRAM  0 -1
 HBW_Move_XZ TASK  0 -1
 HBW_Pick TASK  0 -1
 HBW_Place TASK  0 -1
 SLD_Storage PROGRAM  0 -1
 HBW_SetTarget_XZ <Virtual>  0
 PID_10 PID  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC200 C400 1 0x0 MC210 C410 1 0x0 MC220 C420 1 0x0 MC230 C430 1 0x0 MC240 C440 1 0x0 MC300 C500 1 0x0 MC301 C501 1 0x0 MC302 C502 1 0x0 MC303 C503 1 0x0 MC304 C504 1 0x0 MC305 C505 1 0x0 MC306 C506 1 0x0 MC307 C507 1 0x0 MC350 C550 1 0x0 X32 MHR400 1 0x0 1345 V810 1 0x0 180 V811 1 0x0 175 V812 1 0x0 860 V813 1 0x0 200 V814 1 0x0 50 V815 1 0x0 400 V820 1 0x0 420 V821 1 0x0 440 V822 1"

// Rung VGR_Copy_State#2
// Offset 53
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C800 1 0x0 MC401 C801 1 0x0 MC402 C802 1 0x0 MC403 C803 1 0x0 MC404 C804 1 0x0 MC405 C805 1 0x0 MC406 C806 1 0x0 MC407 C807 1 0x0 MC408 C808 1 0x0 MC409 C809 1 0x0 Y16 MI400 1 0x0 Y43 MI401 1 0x0 MHR800 D1600 1"

// Rung MPO_Copy_State#2
// Offset 31
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MHR1600 V3200 1 0x0 MC800 C1610 1 0x0 MC801 C1650 1 0x0 MC802 C1651 1 0x0 MC803 C1652 1 0x0 MC804 C1653 1 0x0 MC805 C1654 1 0x0 MC806 C1655 1 0x0 MC807 C1611 1 0x0 MC808 C1621 1"

// Rung SLD_Copy_State#2
// Offset 25
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC600 C1200 1"

// Rung SSC_Copy_State#2
// Offset 7
NOP

// Rung SSC_Copy_State#3
// Offset 8
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_SetTarget_XZ
$LGCMOD HBW_SetTarget_XZ

// Rung HBW_SetTarget_XZ#1
// Offset 0
NOP

// Rung HBW_SetTarget_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Set slot X target value for X axis<br> <br>"
"if value greater than 4, fault code 105"
#END

STR ST1
DUPBOOL
ANDE V105 1
MOVE 7640 V140
POPBOOL
DUPBOOL
ANDE V105 2
MOVE 5280 V140
POPBOOL
ANDE V105 3
MOVE 2990 V140

// Rung HBW_SetTarget_XZ#3
// Offset 24
#BEGIN FMT_COMMENT 
"Set slot Y target value for Z axis<br> <br>"
"if value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDE V106 1
MOVE 290 V142
POPBOOL
DUPBOOL
ANDE V106 2
MOVE 1700 V142
POPBOOL
ANDE V106 3
MOVE 3240 V142

// Rung HBW_SetTarget_XZ#4
// Offset 47
NOP

// Rung HBW_SetTarget_XZ#5
// Offset 48
RET

// End of Code Block HBW_SetTarget_XZ
$LGCEND HBW_SetTarget_XZ

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2021 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 09/17/21"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run CP_State Program"
#END

STR ST1
RUN CP_State_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 16
#BEGIN FMT_COMMENT 
"Run SLD_Storage_Program"
#END

STR ST1
RUN SLD_Storage

// Rung $Main#8
// Offset 19
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block CP_State_Program
$PRGRM CP_State_Program

// Rung CP_State_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"<center><FONT tsize=4>This program runs copy state "
"functions at the top of every scan</FONT><br>"
"</center><center><FONT tsize=4>Use this for copy state "
"rungs that need to be executed every scan</FONT><br>"
"</center><center><FONT tsize=4></FONT> <br></center><FONT "
"tsize=4>Feel free to add your copy states here</FONT><br>"
#END

NOP

// Rung CP_State_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"HBW General Copy State"
#END

STR ST1
COPY 0x1 "4 0x0 MC101 C101 1 0x0 MC102 C102 1 0x0 MC103 C103 1 0x0 MC104 C104 1 0x0 MHR105 V105 1 0x0 MHR106 V106 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1 0x0 MHR118 V118 1 0x0 MHR119 V119 1 0x0 MHR120 V120 1 0x0 C130 MC130 1 0x0 V131 MHR131 1 0x0 HBW_Program.S0_15 MHR132 1 0x0 $HBW_Encoder_X.Acc MHR137 1 0x0 $HBW_Encoder_Z.Acc MHR139 1 0x0 C180 MC180 1 0x0 V181 MHR181 1"

// End of Code Block CP_State_Program
$PGMEND CP_State_Program

// Beginning of Code Block HBW_Move_XZ
$TSK HBW_Move_XZ

// Rung HBW_Move_XZ#1
// Offset 0
NOP

// Rung HBW_Move_XZ#2
// Offset 1
#BEGIN FMT_COMMENT 
"Check movement bounds"
#END

STR ST1
RANGECHECK V140 0x0 8100 0 C182
RANGECHECK V142 0x0 3500 0 C82

// Rung HBW_Move_XZ#3
// Offset 10
#BEGIN FMT_COMMENT 
"Check for Movement out of bound error code"
#END

STR C182
OR C183
MOVE 82 V181

// Rung HBW_Move_XZ#4
// Offset 14
#BEGIN FMT_COMMENT 
"X Set direction"
#END

STRLE $HBW_Encoder_X.Acc V140
OUT C51

// Rung HBW_Move_XZ#5
// Offset 19
#BEGIN FMT_COMMENT 
"Z Set direction"
#END

STRLE $HBW_Encoder_Z.Acc V142
OUT C52

// Rung HBW_Move_XZ#6
// Offset 24
#BEGIN FMT_COMMENT 
"Initialize variables"
#END

STR ST1
MOVE 0 D140
MOVE 0 D1
MOVE 0 D142
MOVE 0 D2

// Rung HBW_Move_XZ#7
// Offset 33
REPEAT

// Rung HBW_Move_XZ#8
// Offset 34
#BEGIN FMT_COMMENT 
"X position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D140 "$HBW_Encoder_X.Acc - V140"

// Rung HBW_Move_XZ#9
// Offset 43
STR ST1
PID PID_10 0x60 $HBW_Encoder_X.Acc 0 8100 0.0 8100.0 """""" 20 100 WY0 DST511

// Rung HBW_Move_XZ#10
// Offset 57
STR ST1
MOVE V140 PID_10.SP

// Rung HBW_Move_XZ#11
// Offset 60
STR ST1
MOVE $HBW_Encoder_X.Acc PID_10.PV

// Rung HBW_Move_XZ#12
// Offset 63
#BEGIN FMT_COMMENT 
"X Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 V118

// Rung HBW_Move_XZ#13
// Offset 78
#BEGIN FMT_COMMENT 
"If Direction Left & not at target<br>Move X Left"
#END

STR C51
ANDLE D140 0
OUT Y50

// Rung HBW_Move_XZ#14
// Offset 84
#BEGIN FMT_COMMENT 
"If Direction Right & not at target<br>Move X Right"
#END

STRN C51
ANDGE D140 0
OUT Y51

// Rung HBW_Move_XZ#15
// Offset 90
#BEGIN FMT_COMMENT 
"Z position differance<br>"
"Difference between target and current position"
#END

STR ST1
MATH D142 "$HBW_Encoder_Z.Acc - V142"

// Rung HBW_Move_XZ#16
// Offset 99
#BEGIN FMT_COMMENT 
"Z Move - PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V120

// Rung HBW_Move_XZ#17
// Offset 114
#BEGIN FMT_COMMENT 
"If Direction Down & not at target<br>Move Z Down"
#END

STR C52
ANDLE D142 0
OUT Y4

// Rung HBW_Move_XZ#18
// Offset 120
#BEGIN FMT_COMMENT 
"If Direction Up & not at target<br>Move Z Up"
#END

STRN C52
ANDGE D142 0
OUT Y5

// Rung HBW_Move_XZ#19
// Offset 126
#BEGIN FMT_COMMENT 
"While End condition<br>When both X and Z are in position"
#END

STRGE D140 -40
ANDLE D140 40
ANDGE D142 -40
ANDLE D142 40
ONDTMR T9 500 C150

// Rung HBW_Move_XZ#20
// Offset 145
UNTIL C150

// End of Code Block HBW_Move_XZ
$TSKEND HBW_Move_XZ

// Beginning of Code Block HBW_Pick
$TSK HBW_Pick

// Rung HBW_Pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc - 200"

// Rung HBW_Pick#2
// Offset 10
REPEAT

// Rung HBW_Pick#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Pick#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Pick#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Pick#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y up<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDGE $HBW_Encoder_Z.Acc V142
OUT Y5

// Rung HBW_Pick#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Pick#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRLE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Pick#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Pick
$TSKEND HBW_Pick

// Beginning of Code Block HBW_Place
$TSK HBW_Place

// Rung HBW_Place#1
// Offset 0
#BEGIN FMT_COMMENT 
"Set Target Y value<br>Stage 0"
#END

STR ST1
ANDPDPF
MATH V142 "$HBW_Encoder_Z.Acc + 200"

// Rung HBW_Place#2
// Offset 10
REPEAT

// Rung HBW_Place#3
// Offset 11
#BEGIN FMT_COMMENT 
"Set Y PWM speed<br>Stage 1"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 V119

// Rung HBW_Place#4
// Offset 26
#BEGIN FMT_COMMENT 
"Move arm out<br>Stage 1<br>Using Z encoder as an interlock"
#END

STRN X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y6

// Rung HBW_Place#5
// Offset 32
#BEGIN FMT_COMMENT 
"Set Z PWM<br>Stage 2"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 V118

// Rung HBW_Place#6
// Offset 47
#BEGIN FMT_COMMENT 
"Move Y down<br>Stage 2<br>Enabled by X10"
#END

STR X10
ANDLE $HBW_Encoder_Z.Acc V142
OUT Y4

// Rung HBW_Place#7
// Offset 53
#BEGIN FMT_COMMENT 
"Move Arm in<br>Stage 3<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
ANDN X11
OUT Y7

// Rung HBW_Place#8
// Offset 59
#BEGIN FMT_COMMENT 
"Completion test<br>Stage 4<br>Using Z encoder as an interlock"
#END

STRGE $HBW_Encoder_Z.Acc V142
AND X11
OUT C151

// Rung HBW_Place#9
// Offset 65
UNTIL C151

// End of Code Block HBW_Place
$TSKEND HBW_Place

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
NOP

// Rung HBW_Program#2
// Offset 1
#BEGIN FMT_COMMENT 
"Initialization and Reset stage"
#END

SG HBW_Program.S0

// Rung HBW_Program#3
// Offset 3
#BEGIN FMT_COMMENT 
"Jump to Homing Stage"
#END

STR ST1
JMP HBW_Program.S5

// Rung HBW_Program#4
// Offset 5
#BEGIN FMT_COMMENT 
"Ready Stage<br>"
#END

SG HBW_Program.S1

// Rung HBW_Program#5
// Offset 7
#BEGIN FMT_COMMENT 
"Set Ready status"
#END

STR ST1
OUT C130

// Rung HBW_Program#6
// Offset 9
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 0 V131

// Rung HBW_Program#7
// Offset 12
#BEGIN FMT_COMMENT 
"Update Modbus with current values for XY slots"
#END

STR ST1
COPY 0x1 "4 0x0 V105 MHR105 1 0x0 V106 MHR106 1"

// Rung HBW_Program#8
// Offset 21
#BEGIN FMT_COMMENT 
"Test slot X & Y target value for out of range<br>"
"if X value greater than 4, fault code 105<br>"
"if Y value greater than 4, fault code 106"
#END

STR ST1
DUPBOOL
ANDGE V105 4
JMP HBW_Program.S2
MOVE 105 V181
POPBOOL
ANDGE V106 4
JMP HBW_Program.S2
MOVE 106 V181

// Rung HBW_Program#9
// Offset 38
#BEGIN FMT_COMMENT 
"Task Send<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if conveyor light barriers broken suggesting a pallot "
"is still there."
#END

STR C101
ANDN C102
DUPBOOL
ANDNE V105 0
ANDNE V106 0
AND X1
AND X2
JMP HBW_Program.S7
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
STRN X1
ORN X2
ANDSTR
JMP HBW_Program.S2
MOVE 107 V181

// Rung HBW_Program#10
// Offset 73
#BEGIN FMT_COMMENT 
"Task Recieve<br>"
"Validate X and Y input are not 0 (unselected)<br>Fault if "
"trying to start with X & Y slot values at 0<br>"
"Fault if outer conveyor light barrier no broken suggesting "
"no pallot is there."
#END

STR C102
ANDN C101
DUPBOOL
ANDNE V105 0
ANDNE V106 0
ANDN X2
JMP HBW_Program.S13
POPBOOL
DUPBOOL
STRE V105 0
ORE V106 0
ANDSTR
JMP HBW_Program.S2
MOVE 101 V181
POPBOOL
AND X2
JMP HBW_Program.S2
MOVE 108 V181

// Rung HBW_Program#11
// Offset 105
#BEGIN FMT_COMMENT 
"Task Reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#12
// Offset 107
#BEGIN FMT_COMMENT 
"Manual Control"
#END

STR C104
JMP HBW_Program.S3

// Rung HBW_Program#13
// Offset 109
#BEGIN FMT_COMMENT 
"Task Send - Move to Storage"
#END

SG HBW_Program.S7

// Rung HBW_Program#14
// Offset 111
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#15
// Offset 114
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"

// Rung HBW_Program#16
// Offset 123
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#17
// Offset 128
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S8
HALT HBW_Move_XZ

// Rung HBW_Program#18
// Offset 131
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#19
// Offset 134
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#20
// Offset 136
#BEGIN FMT_COMMENT 
"Task Sent - Pick"
#END

SG HBW_Program.S8

// Rung HBW_Program#21
// Offset 138
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#22
// Offset 141
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#23
// Offset 147
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S9

// Rung HBW_Program#24
// Offset 150
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#25
// Offset 152
#BEGIN FMT_COMMENT 
"Task Send - Move to Conveyor"
#END

SG HBW_Program.S9

// Rung HBW_Program#26
// Offset 154
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 60 V131

// Rung HBW_Program#27
// Offset 157
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2600 V142

// Rung HBW_Program#28
// Offset 162
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#29
// Offset 167
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S10
HALT HBW_Move_XZ

// Rung HBW_Program#30
// Offset 170
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#31
// Offset 173
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#32
// Offset 175
#BEGIN FMT_COMMENT 
"Task Send - Place"
#END

SG HBW_Program.S10

// Rung HBW_Program#33
// Offset 177
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#34
// Offset 180
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#35
// Offset 186
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S11

// Rung HBW_Program#36
// Offset 189
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#37
// Offset 191
#BEGIN FMT_COMMENT 
"Task Send - Conveyor Out"
#END

SG HBW_Program.S11

// Rung HBW_Program#38
// Offset 193
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#39
// Offset 196
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X2
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 100
OUT Y48

// Rung HBW_Program#40
// Offset 212
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x2 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
ONDTMR T4 3000 C80

// Rung HBW_Program#41
// Offset 216
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#42
// Offset 220
NOP

// Rung HBW_Program#43
// Offset 221
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STRN X2
JMP HBW_Program.S1

// Rung HBW_Program#44
// Offset 223
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#45
// Offset 225
#BEGIN FMT_COMMENT 
"Reserved Stage<br>"
"Just incase I need an extra stage for Task Send"
#END

SG HBW_Program.S12

// Rung HBW_Program#46
// Offset 227
#BEGIN FMT_COMMENT 
"Fault<br>Should never hit this reserve stage"
#END

STR ST1
JMP HBW_Program.S2

// Rung HBW_Program#47
// Offset 229
#BEGIN FMT_COMMENT 
"Task Receive - Conveyor In<br>& Move XZ to Conveyor"
#END

SG HBW_Program.S13

// Rung HBW_Program#48
// Offset 231
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 10 V131

// Rung HBW_Program#49
// Offset 234
#BEGIN FMT_COMMENT 
"Conveyor Out On"
#END

STR X1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 45
OUT Y49

// Rung HBW_Program#50
// Offset 250
#BEGIN FMT_COMMENT 
"Conveyor timout fault<br>"
"If this timer expires and x1 light beam hasn't broken, this "
"is a fault.<br>"
"This can be caused by a non-existant pallot or a stuck "
"pallot."
#END

STR ST1
AND X1
ONDTMR T4 3000 C80

// Rung HBW_Program#51
// Offset 255
#BEGIN FMT_COMMENT 
"Fault logic"
#END

STR C80
JMP HBW_Program.S2
MOVE 80 V181

// Rung HBW_Program#52
// Offset 259
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 70 V140
MOVE 2750 V142

// Rung HBW_Program#53
// Offset 264
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#54
// Offset 269
#BEGIN FMT_COMMENT 
"Movements completed<br>"
"Conveyor inner beam broken and XZ move complete"
#END

STR HBW_Move_XZ.Done
ANDN X1
JMP HBW_Program.S14
HALT HBW_Move_XZ

// Rung HBW_Program#55
// Offset 273
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#56
// Offset 276
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#57
// Offset 278
#BEGIN FMT_COMMENT 
"Task Receive - Pick"
#END

SG HBW_Program.S14

// Rung HBW_Program#58
// Offset 280
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 20 V131

// Rung HBW_Program#59
// Offset 283
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Pick 0x1 0 0x1
OUT C11

// Rung HBW_Program#60
// Offset 289
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Pick.Done
AND C11
JMP HBW_Program.S15

// Rung HBW_Program#61
// Offset 292
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#62
// Offset 294
#BEGIN FMT_COMMENT 
"Task Receive - Move to Storage"
#END

SG HBW_Program.S15

// Rung HBW_Program#63
// Offset 296
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 40 V131

// Rung HBW_Program#64
// Offset 299
#BEGIN FMT_COMMENT 
"Set XZ position targets"
#END

STR ST1
CALL HBW_SetTarget_XZ 0x0 DST511 "3" "3"
OUT C99

// Rung HBW_Program#65
// Offset 309
STRPD C99
MATH V142 "V142 - 100"

// Rung HBW_Program#66
// Offset 319
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#67
// Offset 324
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S16
HALT HBW_Move_XZ

// Rung HBW_Program#68
// Offset 327
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#69
// Offset 330
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#70
// Offset 332
#BEGIN FMT_COMMENT 
"Task Receive - Place<br>Place onto storage shelf"
#END

SG HBW_Program.S16

// Rung HBW_Program#71
// Offset 334
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 80 V131

// Rung HBW_Program#72
// Offset 337
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Place 0x1 0 0x1
OUT C11

// Rung HBW_Program#73
// Offset 343
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Place.Done
AND C11
JMP HBW_Program.S17

// Rung HBW_Program#74
// Offset 346
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#75
// Offset 348
#BEGIN FMT_COMMENT 
"Task Receive - Move to Idle"
#END

SG HBW_Program.S17

// Rung HBW_Program#76
// Offset 350
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 90 V131

// Rung HBW_Program#77
// Offset 353
#BEGIN FMT_COMMENT 
"Set X Z coordinates for XZ move"
#END

STR ST1
MOVE 4300 V140
MOVE 1400 V142

// Rung HBW_Program#78
// Offset 358
#BEGIN FMT_COMMENT 
"Enable Movement task"
#END

STR ST1
ENTASK HBW_Move_XZ 0x1 0 0x1

// Rung HBW_Program#79
// Offset 363
#BEGIN FMT_COMMENT 
"Movement completed"
#END

STR HBW_Move_XZ.DoneThisScan
JMP HBW_Program.S1
HALT HBW_Move_XZ

// Rung HBW_Program#80
// Offset 366
#BEGIN FMT_COMMENT 
"Jump to Fault state if errors"
#END

STR C182
OR C183
JMP HBW_Program.S2

// Rung HBW_Program#81
// Offset 369
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#82
// Offset 371
#BEGIN FMT_COMMENT 
"Fault State"
#END

SG HBW_Program.S2

// Rung HBW_Program#83
// Offset 373
#BEGIN FMT_COMMENT 
"Set general fault status"
#END

STR ST1
OUT C180

// Rung HBW_Program#84
// Offset 375
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#85
// Offset 378
#BEGIN FMT_COMMENT 
"Jump to reset"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#86
// Offset 380
#BEGIN FMT_COMMENT 
"HBW Manual Control"
#END

SG HBW_Program.S3

// Rung HBW_Program#87
// Offset 382
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 50 V131

// Rung HBW_Program#88
// Offset 385
#BEGIN FMT_COMMENT 
"Manual X PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 100 V118

// Rung HBW_Program#89
// Offset 400
#BEGIN FMT_COMMENT 
"Manual X Left"
#END

STR C110
OUT Y50

// Rung HBW_Program#90
// Offset 402
#BEGIN FMT_COMMENT 
"Manual X Right"
#END

STR C111
ANDN X0
OUT Y51

// Rung HBW_Program#91
// Offset 405
#BEGIN FMT_COMMENT 
"Manual Y PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 100 V119

// Rung HBW_Program#92
// Offset 420
#BEGIN FMT_COMMENT 
"Manual Y In"
#END

STR C112
ANDN X11
OUT Y7

// Rung HBW_Program#93
// Offset 423
#BEGIN FMT_COMMENT 
"Manual Y Out"
#END

STR C113
ANDN X10
OUT Y6

// Rung HBW_Program#94
// Offset 426
#BEGIN FMT_COMMENT 
"Manual Z PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 100 V120

// Rung HBW_Program#95
// Offset 441
#BEGIN FMT_COMMENT 
"Manual Z Up"
#END

STR C114
ANDN X3
OUT Y5

// Rung HBW_Program#96
// Offset 444
#BEGIN FMT_COMMENT 
"Manual Z Down"
#END

STR C115
OUT Y4

// Rung HBW_Program#97
// Offset 446
#BEGIN FMT_COMMENT 
"Manual Conveyor PWM"
#END

STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 100 V118

// Rung HBW_Program#98
// Offset 461
#BEGIN FMT_COMMENT 
"Manual Conveyor In"
#END

STR C116
OUT Y49

// Rung HBW_Program#99
// Offset 463
#BEGIN FMT_COMMENT 
"Manual Conveyor Out"
#END

STR C117
OUT Y48

// Rung HBW_Program#100
// Offset 465
#BEGIN FMT_COMMENT 
"Manual Control Release<br>"
"Watch for Manual Control Release and jump back to ready "
"without resetting"
#END

STRN C104
JMP HBW_Program.S1

// Rung HBW_Program#101
// Offset 467
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR C103
JMP HBW_Program.S0

// Rung HBW_Program#102
// Offset 469
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Stage</FONT>"
#END

SG HBW_Program.S5

// Rung HBW_Program#103
// Offset 471
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 33 V131

// Rung HBW_Program#104
// Offset 474
#BEGIN FMT_COMMENT 
"Reset Fault code"
#END

STR ST1
MOVE 0 V181

// Rung HBW_Program#105
// Offset 477
#BEGIN FMT_COMMENT 
"Re-Initialize Variables<br>X Z slot values<br>"
"X Y Z PWM duty cycle to 100%25<br>Manual control toggle "
"reset"
#END

STR ST1
COPY 0x1 "4 0x0 0 MC104 1 0x0 0 MHR105 1 0x0 0 MHR106 1 0x0 100 MHR118 1 0x0 100 MHR119 1 0x0 100 MHR120 1"

// Rung HBW_Program#106
// Offset 493
#BEGIN FMT_COMMENT 
"Halt all HBW Tasks"
#END

STR ST1
HALT HBW_Move_XZ
HALT HBW_Pick

// Rung HBW_Program#107
// Offset 496
#BEGIN FMT_COMMENT 
"X Home - PWM"
#END

STRN X0
AND X11
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#108
// Offset 513
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 60 75
OUT Y7

// Rung HBW_Program#109
// Offset 529
#BEGIN FMT_COMMENT 
"Z Home - PWM"
#END

STRN X3
AND X11
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 75
OUT Y5

// Rung HBW_Program#110
// Offset 546
#BEGIN FMT_COMMENT 
"Y Home - PWM"
#END

STRN X11
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 75
OUT Y7

// Rung HBW_Program#111
// Offset 562
#BEGIN FMT_COMMENT 
"Jump to Homing Reset Stage"
#END

STR X0
AND X3
AND X11
JMP HBW_Program.S6

// Rung HBW_Program#112
// Offset 566
#BEGIN FMT_COMMENT 
"<FONT tsize=4>Homing Reset Stage</FONT>"
#END

SG HBW_Program.S6

// Rung HBW_Program#113
// Offset 568
#BEGIN FMT_COMMENT 
"Reset counter for X axis encoder"
#END

STR ST1
RSTCT CT10

// Rung HBW_Program#114
// Offset 570
#BEGIN FMT_COMMENT 
"Set Task Completion %25"
#END

STR ST1
MOVE 66 V131

// Rung HBW_Program#115
// Offset 573
#BEGIN FMT_COMMENT 
"Timer Delay<br>Wait for motor momentom to actually stop"
#END

STR ST1
ONDTMR T3 500 C0

// Rung HBW_Program#116
// Offset 577
#BEGIN FMT_COMMENT 
"Reset X & Z Encoders to 0"
#END

STR T3.Done
OUT $HBW_Encoder_X.ResetEdge
OUT $HBW_Encoder_Z.ResetEdge

// Rung HBW_Program#117
// Offset 580
#BEGIN FMT_COMMENT 
"Jump to Ready"
#END

STR T3.Done
JMP HBW_Program.S1

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#4
// Offset 12
SG VGR_Program.S1

// Rung VGR_Program#5
// Offset 14
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#6
// Offset 22
#BEGIN FMT_COMMENT 
"Rotate Crane CW if limiter is not hit"
#END

STR ST1
ANDN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50
OUT Y26

// Rung VGR_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Retract crane arm on X axis until limiter is hit"
#END

STR ST1
ANDN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50
OUT Y24

// Rung VGR_Program#8
// Offset 56
#BEGIN FMT_COMMENT 
"Retract crane arm on Y axis until limiter is hit"
#END

STR ST1
ANDN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50
OUT Y22

// Rung VGR_Program#9
// Offset 73
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#10
// Offset 77
SG VGR_Program.S2

// Rung VGR_Program#11
// Offset 79
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 87
#BEGIN FMT_COMMENT 
"VGR.T0 - Reset VGR to 0 state"
#END

STR C400
JMP VGR_Program.S2

// Rung VGR_Program#13
// Offset 89
#BEGIN FMT_COMMENT 
"VGR.T1 - Move disk from HBW to MPO"
#END

STR C410
JMP VGR_Program.S3

// Rung VGR_Program#14
// Offset 91
#BEGIN FMT_COMMENT 
"VGR.T2 - Move disk from SLD to Loading Bay"
#END

STR C420
JMP VGR_Program.S9

// Rung VGR_Program#15
// Offset 93
#BEGIN FMT_COMMENT 
"VGR.T3 - Move disk from Loading Bay to HBW"
#END

STR C430
JMP VGR_Program.S10

// Rung VGR_Program#16
// Offset 95
#BEGIN FMT_COMMENT 
"VGR.T4 - Move disk from Loading Bay to Shipping Truck"
#END

STR C440
JMP VGR_Program.S15

// Rung VGR_Program#17
// Offset 97
#BEGIN FMT_COMMENT 
"MANUAL CONTROL"
#END

STR C500
JMP VGR_Program.S20

// Rung VGR_Program#18
// Offset 99
#BEGIN FMT_COMMENT 
"Start of VGR.T1 - Move to HBW"
#END

SG VGR_Program.S3

// Rung VGR_Program#19
// Offset 101
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 109
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#21
// Offset 124
#BEGIN FMT_COMMENT 
"Rotate CCW to HBW"
#END

STRLT X32 V810
OUT Y27

// Rung VGR_Program#22
// Offset 129
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#23
// Offset 144
#BEGIN FMT_COMMENT 
"Extend crane X+ to be over conveyor"
#END

STRLT X30 V811
OUT Y25

// Rung VGR_Program#24
// Offset 149
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#25
// Offset 164
#BEGIN FMT_COMMENT 
"Lower crane Y- onto disk"
#END

STRLT X28 V812
OUT Y23

// Rung VGR_Program#26
// Offset 169
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#27
// Offset 171
#BEGIN FMT_COMMENT 
"When in proper postition, jump to S4 to continue"
#END

STR ST1
JMP VGR_Program.S4

// Rung VGR_Program#28
// Offset 173
#BEGIN FMT_COMMENT 
"Move disk from HBW to MPO"
#END

SG VGR_Program.S4

// Rung VGR_Program#29
// Offset 175
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#30
// Offset 183
STR ST1
SET Y28

// Rung VGR_Program#31
// Offset 185
STR ST1
ONDTMR T50 200 C2

// Rung VGR_Program#32
// Offset 189
STR T50.Done
SET Y29

// Rung VGR_Program#33
// Offset 191
STR ST1
ONDTMR T51 500 C2

// Rung VGR_Program#34
// Offset 195
STR ST1
ONDTMR T52 1000 C1

// Rung VGR_Program#35
// Offset 199
STR T51.Done
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#36
// Offset 214
STR T51.Done
ANDN X25
OUT Y22

// Rung VGR_Program#37
// Offset 217
STR T52.Done
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#38
// Offset 232
STR T52.Done
ANDGE X32 V813
OUT Y26

// Rung VGR_Program#39
// Offset 238
STR T52.Done
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#40
// Offset 253
STR T52.Done
ANDN X26
OUT Y24

// Rung VGR_Program#41
// Offset 256
STR ST1
AND X25
AND X24
ANDGE X32 V813
JMP VGR_Program.S5

// Rung VGR_Program#42
// Offset 264
#BEGIN FMT_COMMENT 
"Drop disk onto MPO"
#END

SG VGR_Program.S5

// Rung VGR_Program#43
// Offset 266
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#44
// Offset 274
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#45
// Offset 289
STR ST1
ANDLT X30 V814
OUT Y25

// Rung VGR_Program#46
// Offset 295
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#47
// Offset 310
STR ST1
ANDLT X28 V815
OUT Y23

// Rung VGR_Program#48
// Offset 316
STRGE X28 V815
ANDGE X30 V814
RST Y29

// Rung VGR_Program#49
// Offset 325
STRGE X28 V815
ANDGE X30 V814
ANDN Y29
RST Y28

// Rung VGR_Program#50
// Offset 335
STRN Y29
ANDN Y28
JMP VGR_Program.S1

// Rung VGR_Program#51
// Offset 338
SG VGR_Program.S6

// Rung VGR_Program#52
// Offset 340
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#53
// Offset 348
STR ST1
JMP VGR_Program.S1

// Rung VGR_Program#54
// Offset 350
SG VGR_Program.S20

// Rung VGR_Program#55
// Offset 352
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#56
// Offset 360
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 200 50

// Rung VGR_Program#57
// Offset 375
#BEGIN FMT_COMMENT 
"Rotate CW"
#END

STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#58
// Offset 378
#BEGIN FMT_COMMENT 
"Rotate CCW"
#END

STR C502
OUT Y27

// Rung VGR_Program#59
// Offset 380
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 200 50

// Rung VGR_Program#60
// Offset 395
#BEGIN FMT_COMMENT 
"Extend Crane x+"
#END

STR C503
OUT Y25

// Rung VGR_Program#61
// Offset 397
#BEGIN FMT_COMMENT 
"Retract Crane x-"
#END

STR C504
ANDN X26
OUT Y24

// Rung VGR_Program#62
// Offset 400
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 200 50

// Rung VGR_Program#63
// Offset 415
#BEGIN FMT_COMMENT 
"Lower Crane Y-"
#END

STR C506
OUT Y23

// Rung VGR_Program#64
// Offset 417
#BEGIN FMT_COMMENT 
"Raise Crane Y+"
#END

STR C505
ANDN X25
OUT Y22

// Rung VGR_Program#65
// Offset 420
#BEGIN FMT_COMMENT 
"Turn on Compressor when in S7"
#END

STR C500
SET Y28

// Rung VGR_Program#66
// Offset 422
#BEGIN FMT_COMMENT 
"Set Vacuum"
#END

STRN C507
SET Y29

// Rung VGR_Program#67
// Offset 424
#BEGIN FMT_COMMENT 
"Release Vacuum"
#END

STR C507
RST Y29

// Rung VGR_Program#68
// Offset 426
#BEGIN FMT_COMMENT 
"Turn off compressor when not in S7"
#END

STRN C500
RST Y28

// Rung VGR_Program#69
// Offset 428
STRN C500
JMP VGR_Program.S1

// Rung VGR_Program#70
// Offset 430
NOP

// Rung VGR_Program#71
// Offset 431
NOP

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
SG MPO_Program.S0

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"This first stage currently sends the crane back to the "
"turn table, resets the compressor, and resets out detection "
"bit. Once it is sent back to the turn table it jumps to "
"stage 1"
#END

STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 10
STRN X16
OUT Y15

// Rung MPO_Program#4
// Offset 12
STR ST1
RST Y17

// Rung MPO_Program#5
// Offset 14
STR ST1
RST Y47

// Rung MPO_Program#6
// Offset 16
STR ST1
RST Y18

// Rung MPO_Program#7
// Offset 18
STR ST1
RST C1000

// Rung MPO_Program#8
// Offset 20
STR ST1
RST Y20

// Rung MPO_Program#9
// Offset 22
STR ST1
RST Y21

// Rung MPO_Program#10
// Offset 24
STRN X12
OUT Y46

// Rung MPO_Program#11
// Offset 26
STR C801
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 28
STR X16
AND X12
ANDN C801
JMP MPO_Program.S1

// Rung MPO_Program#13
// Offset 32
SG MPO_Program.S1

// Rung MPO_Program#14
// Offset 34
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#15
// Offset 42
#BEGIN FMT_COMMENT 
"Always be Detecting if we have something, if we get "
"something set C1000 on"
#END

STRND X24
SET C1000

// Rung MPO_Program#16
// Offset 45
#BEGIN FMT_COMMENT 
"If we have something (C1000) and we get a go from Doug "
"(C800), start by turning on the compressor"
#END

STR C1000
AND C800
ANDN X17
SET Y17

// Rung MPO_Program#17
// Offset 49
#BEGIN FMT_COMMENT 
"If the compressor is on, and we are outside the oven, open "
"the door"
#END

STR Y17
AND X18
SET Y20

// Rung MPO_Program#18
// Offset 52
#BEGIN FMT_COMMENT 
"If the Oven Door is Open, and we are not all the way "
"inside, move the loading tray inside"
#END

STR Y20
ANDN X17
AND C800
OUT Y44

// Rung MPO_Program#19
// Offset 56
STR Y20
AND X17
RST Y20

// Rung MPO_Program#20
// Offset 59
STRND Y20
AND X17
RST Y17

// Rung MPO_Program#21
// Offset 63
STRND Y20
AND X17
OFFDTMR T100 D1600 Y16

// Rung MPO_Program#22
// Offset 69
STRPD T100.Done
AND X17
JMP MPO_Program.S2

// Rung MPO_Program#23
// Offset 73
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#24
// Offset 75
SG MPO_Program.S2

// Rung MPO_Program#25
// Offset 77
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#26
// Offset 85
STR X17
SET Y17

// Rung MPO_Program#27
// Offset 87
STR X17
ANDN Y20
SET Y20

// Rung MPO_Program#28
// Offset 90
STR Y20
ANDN X18
OUT Y52

// Rung MPO_Program#29
// Offset 93
STR X18
RST Y17

// Rung MPO_Program#30
// Offset 95
STR X18
RST Y20

// Rung MPO_Program#31
// Offset 97
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#32
// Offset 99
STR X18
JMP MPO_Program.S3

// Rung MPO_Program#33
// Offset 101
SG MPO_Program.S3

// Rung MPO_Program#34
// Offset 103
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#35
// Offset 111
STRN X19
AND C800
ANDN Y18
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#36
// Offset 129
#BEGIN FMT_COMMENT 
"When we first reach the oven (X19), turn on the compressor(Y17)"
#END

STRPD X19
SET Y17

// Rung MPO_Program#37
// Offset 132
#BEGIN FMT_COMMENT 
"When we reach the oven (X19) go down, and come back up "
"after 3 seconds"
#END

STRPD X19
OFFDTMR T101 3000 Y19

// Rung MPO_Program#38
// Offset 137
#BEGIN FMT_COMMENT 
"Turn on the vacuum in order to pick up disk, before the "
"timer turns the crane down bit off. #TODO finish comment "
"here"
#END

STRLE T101.Acc 750
AND T101.Timing
SET Y18

// Rung MPO_Program#39
// Offset 143
STRPD T101.Done
AND X19
JMP MPO_Program.S4

// Rung MPO_Program#40
// Offset 147
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#41
// Offset 149
SG MPO_Program.S4

// Rung MPO_Program#42
// Offset 151
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#43
// Offset 159
#BEGIN FMT_COMMENT 
"When the vacuum is on [which means we have something] "
"(Y18), we are done timing (T0.Done), and we are not at the "
"turn table position (X16) then run the crane over to the "
"turn table position(Y15)"
#END

STR Y18
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#44
// Offset 176
#BEGIN FMT_COMMENT 
"When we turn off the vacuum(Y18) and are at the turntable "
"positon(X16), jump to the next stage"
#END

STRPD X16
OFFDTMR T102 3000 Y19

// Rung MPO_Program#45
// Offset 181
STRLE T102.Acc 750
AND T102.Timing
RST Y18

// Rung MPO_Program#46
// Offset 187
STR X16
ANDPD T102.Done
JMP MPO_Program.S5

// Rung MPO_Program#47
// Offset 191
#BEGIN FMT_COMMENT 
"This is the reset button"
#END

STR C802
JMP MPO_Program.S0

// Rung MPO_Program#48
// Offset 193
SG MPO_Program.S5

// Rung MPO_Program#49
// Offset 195
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#50
// Offset 203
STRN X15
AND C800
OUT Y45

// Rung MPO_Program#51
// Offset 206
STRPD X15
OFFDTMR T103 3000 Y43

// Rung MPO_Program#52
// Offset 211
STR X15
ANDPD T103.Done
ANDN X13
JMP MPO_Program.S6

// Rung MPO_Program#53
// Offset 216
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#54
// Offset 218
SG MPO_Program.S6

// Rung MPO_Program#55
// Offset 220
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#56
// Offset 228
STR C800
ANDN X13
OUT Y45

// Rung MPO_Program#57
// Offset 231
STRPD X13
SET Y18

// Rung MPO_Program#58
// Offset 234
STRPD X13
OFFDTMR T103 750 Y21

// Rung MPO_Program#59
// Offset 239
STRPD X13
SET Y47

// Rung MPO_Program#60
// Offset 242
STRPD X14
RST Y47

// Rung MPO_Program#61
// Offset 245
STR C802
JMP MPO_Program.S0

// Rung MPO_Program#62
// Offset 247
STRN X14
JMP MPO_Program.S0

// Rung MPO_Program#63
// Offset 249
NOP

// Rung MPO_Program#64
// Offset 250
SG MPO_Program.S7

// Rung MPO_Program#65
// Offset 252
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung MPO_Program#66
// Offset 260
STR ST1
FLASHER 500 500 Y39

// Rung MPO_Program#67
// Offset 265
STR ST1
FLASHER 500 500 Y40

// Rung MPO_Program#68
// Offset 270
STR ST1
FLASHER 500 500 Y41

// Rung MPO_Program#69
// Offset 275
STR C809
ANDN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y53

// Rung MPO_Program#70
// Offset 292
STR C808
ANDN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 200 70
OUT Y15

// Rung MPO_Program#71
// Offset 309
STRN C801
JMP MPO_Program.S0

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"State 0: set 0 value for temp storage arrays."
#END

SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
COPY 0x1 "4 0x0 0 V3202 1 0x0 0 V3203 1 0x0 0 V3204 1"

// Rung SLD_Program#3
// Offset 13
STR ST5
JMP SLD_Program.S1

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S1

// Rung SLD_Program#5
// Offset 17
#BEGIN FMT_COMMENT 
"Listen for Doug's instruction to start module or enter "
"manual mode."
#END

NOP

// Rung SLD_Program#6
// Offset 18
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#7
// Offset 26
#BEGIN FMT_COMMENT 
"Wait for Doug start command to turn on busy bit."
#END

STRPD C1610
COPY 0x1 "4 0x0 1 C1621 1"

// Rung SLD_Program#8
// Offset 33
#BEGIN FMT_COMMENT 
"When busy bit is true, jump to S2"
#END

STRPD C1610
JMP SLD_Program.S2

// Rung SLD_Program#9
// Offset 36
STR C1650
JMP SLD_Program.S10

// Rung SLD_Program#10
// Offset 38
SG SLD_Program.S10

// Rung SLD_Program#11
// Offset 40
#BEGIN FMT_COMMENT 
"Stage 10: manual controls for SLD and manual auto run"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 48
#BEGIN FMT_COMMENT 
"Manual control for conveyor belt"
#END

STR C1651
OUT Y30

// Rung SLD_Program#13
// Offset 50
#BEGIN FMT_COMMENT 
"Manual control for compressor"
#END

STR C1652
OUT Y31

// Rung SLD_Program#14
// Offset 52
#BEGIN FMT_COMMENT 
"Manual White Ejector"
#END

STR C1653
OUT Y32

// Rung SLD_Program#15
// Offset 54
#BEGIN FMT_COMMENT 
"Manual Red Ejector"
#END

STR C1654
OUT Y33

// Rung SLD_Program#16
// Offset 56
#BEGIN FMT_COMMENT 
"Manual Blue Ejector"
#END

STR C1655
OUT Y34

// Rung SLD_Program#17
// Offset 58
STR ST1
SUBSCRIB "4 WX0 V3201 1 0x4"

// Rung SLD_Program#18
// Offset 63
STR C1611
JMP SLD_Program.S2

// Rung SLD_Program#19
// Offset 65
STRN C1650
JMP SLD_Program.S1

// Rung SLD_Program#20
// Offset 67
SG SLD_Program.S2

// Rung SLD_Program#21
// Offset 69
#BEGIN FMT_COMMENT 
"Stage 2: Moves disk from MPO on light barrier trigger "
"underneath color detection."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#22
// Offset 77
#BEGIN FMT_COMMENT 
"When the light barrier is broken, turns on timer to run "
"conveyor belt with disk until the middle of color sensor."
#END

STR ST1
ANDND X35
OFFDTMR T200 2200 Y30

// Rung SLD_Program#23
// Offset 83
#BEGIN FMT_COMMENT 
"This timer gives a delay for the color detection to get "
"correct color."
#END

STRND T200.Timing
OFFDTMR T201 2000 C1601

// Rung SLD_Program#24
// Offset 88
#BEGIN FMT_COMMENT 
"After delay under color detection, jump to Stage 3"
#END

STRND T201.Timing
JMP SLD_Program.S3

// Rung SLD_Program#25
// Offset 91
SG SLD_Program.S3

// Rung SLD_Program#26
// Offset 93
#BEGIN FMT_COMMENT 
"State 3 detects color and increments the counter the "
"changes state based on the color."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#27
// Offset 101
#BEGIN FMT_COMMENT 
"Translate analog color number for EasyBuilder HMI"
#END

STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Program#28
// Offset 106
#BEGIN FMT_COMMENT 
"Color detection range for W"
#END

STR ST1
RANGECHECK V3200 0x1 10000 8000 C1602

// Rung SLD_Program#29
// Offset 111
#BEGIN FMT_COMMENT 
"If disk is in W range, increment W counter (V3202)."
#END

STR C1602
INC V3202

// Rung SLD_Program#30
// Offset 113
#BEGIN FMT_COMMENT 
"Color detection range for R<br>Need to verify variable for R"
#END

STR ST1
RANGECHECK V3200 0x1 20000 18000 C1619

// Rung SLD_Program#31
// Offset 118
#BEGIN FMT_COMMENT 
"If disk is in R range, increment R counter (V3203)."
#END

STR C1619
INC V3203

// Rung SLD_Program#32
// Offset 120
#BEGIN FMT_COMMENT 
"Color detection range for B.<BR>"
"Need to verify variable for B."
#END

STR ST1
RANGECHECK V3200 0x1 24500 21000 C1620

// Rung SLD_Program#33
// Offset 125
#BEGIN FMT_COMMENT 
"If disk is in B range, increment B counter (V3204)."
#END

STR C1620
INC V3204

// Rung SLD_Program#34
// Offset 127
#BEGIN FMT_COMMENT 
"Increment W counter when W is in color detection range."
#END

STRPD C1602
INC V3202

// Rung SLD_Program#35
// Offset 130
#BEGIN FMT_COMMENT 
"While W is in range, and W temp storage %3C 3, jump to S4."
#END

STR C1602
ANDLT V3202 3
JMP SLD_Program.S4

// Rung SLD_Program#36
// Offset 136
#BEGIN FMT_COMMENT 
"While R is in range, and R temp storage %3C 3, jump to S5."
#END

STR C1619
ANDLT V3203 3
JMP SLD_Program.S5

// Rung SLD_Program#37
// Offset 142
#BEGIN FMT_COMMENT 
"While B is in range, and B temp storage %3C 3, jump to S6."
#END

STR C1620
ANDLT V3204 3
JMP SLD_Program.S6

// Rung SLD_Program#38
// Offset 148
#BEGIN FMT_COMMENT 
"While W temp storage is full, and disk is W, jump to S7 "
"for extra W disk to be moved to garbage."
#END

STRN C1619
ANDN C1620
ANDGE V3202 3
JMP SLD_Program.S7

// Rung SLD_Program#39
// Offset 155
#BEGIN FMT_COMMENT 
"While R temp storage is full, and disk is R, jump to S7 "
"for extra R disk to be moved to garbage."
#END

STRN C1602
ANDN C1620
ANDGE V3203 3
JMP SLD_Program.S7

// Rung SLD_Program#40
// Offset 162
STRN C1602
ANDN C1619
ANDGE V3204 3
JMP SLD_Program.S7

// Rung SLD_Program#41
// Offset 169
SG SLD_Program.S4

// Rung SLD_Program#42
// Offset 171
#BEGIN FMT_COMMENT 
"S4: moves disk to W temp storage then jumps to S1 to wait "
"for next command.<br> <br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#43
// Offset 179
#BEGIN FMT_COMMENT 
"On delay timer to manage conveyor time."
#END

STR ST1
ONDTMR T202 2000 C1603

// Rung SLD_Program#44
// Offset 183
#BEGIN FMT_COMMENT 
"When timer is on for %3C 5 sec, C1603 is false and should "
"turn conveyor"
#END

STRN C1603
OUT Y30

// Rung SLD_Program#45
// Offset 185
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor"
#END

STRND X36
OFFDTMR T203 5000 C1604

// Rung SLD_Program#46
// Offset 190
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1604
OUT Y31

// Rung SLD_Program#47
// Offset 192
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 seconds"
#END

STRND Y30
OFFDTMR T204 1500 C1605

// Rung SLD_Program#48
// Offset 197
#BEGIN FMT_COMMENT 
"Activate W ejector."
#END

STR C1605
OUT Y32

// Rung SLD_Program#49
// Offset 199
STRND C1604
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#50
// Offset 206
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S0 to wait for another "
"command from Doug or enter manual start"
#END

STRND C1604
JMP SLD_Program.S1

// Rung SLD_Program#51
// Offset 209
SG SLD_Program.S5

// Rung SLD_Program#52
// Offset 211
#BEGIN FMT_COMMENT 
"S5: Moves Red disk from color detection to temp storage."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#53
// Offset 219
#BEGIN FMT_COMMENT 
"Timer for R will need adjusting"
#END

STR ST1
ONDTMR T205 3000 C1606

// Rung SLD_Program#54
// Offset 223
STRN C1606
OUT Y30

// Rung SLD_Program#55
// Offset 225
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on compressor."
#END

STRND X36
OFFDTMR T206 5000 C1607

// Rung SLD_Program#56
// Offset 230
#BEGIN FMT_COMMENT 
"turn on compressor"
#END

STR C1607
OUT Y31

// Rung SLD_Program#57
// Offset 232
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s<br>"
#END

STRND Y30
OFFDTMR T207 1500 C1608

// Rung SLD_Program#58
// Offset 237
#BEGIN FMT_COMMENT 
"Activate R ejector"
#END

STR C1608
OUT Y33

// Rung SLD_Program#59
// Offset 239
STRND C1607
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#60
// Offset 246
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1607
JMP SLD_Program.S1

// Rung SLD_Program#61
// Offset 249
SG SLD_Program.S6

// Rung SLD_Program#62
// Offset 251
#BEGIN FMT_COMMENT 
"S6: moves the B disk from the color exchanger to front of "
"B ejector. When it passes the light barrier, activate "
"compressor.<br> <br>On D timer starts and activates C1609 "
"for 4 seconds. This timer is subject to change.<br>"
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#63
// Offset 259
STR ST1
ONDTMR T208 4000 C1609

// Rung SLD_Program#64
// Offset 263
#BEGIN FMT_COMMENT 
"activate conveyor"
#END

STRN C1609
OUT Y30

// Rung SLD_Program#65
// Offset 265
#BEGIN FMT_COMMENT 
"When light barrier is broken by disk, turn on "
"compressor.<br>"
#END

STRND X36
OFFDTMR T209 5000 C1612

// Rung SLD_Program#66
// Offset 270
#BEGIN FMT_COMMENT 
"activate compressor"
#END

STR C1612
OUT Y31

// Rung SLD_Program#67
// Offset 272
#BEGIN FMT_COMMENT 
"When conveyor stops, activate ejector timer for 1.5 s"
#END

STRND Y30
OFFDTMR T210 1500 C1613

// Rung SLD_Program#68
// Offset 277
#BEGIN FMT_COMMENT 
"activate blue ejector"
#END

STR C1613
OUT Y34

// Rung SLD_Program#69
// Offset 279
STRND C1612
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#70
// Offset 286
#BEGIN FMT_COMMENT 
"When compressor turns off, jump to S1 to wait for another "
"command from Doug or enter manual start<br>"
#END

STRND C1612
JMP SLD_Program.S1

// Rung SLD_Program#71
// Offset 289
SG SLD_Program.S7

// Rung SLD_Program#72
// Offset 291
#BEGIN FMT_COMMENT 
"S7: moves extra disk to garbage, then jumps to S1 to wait "
"for next command."
#END

STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#73
// Offset 299
#BEGIN FMT_COMMENT 
"sets C1630 to false for 10 sec to move extra disk to garbage."
#END

STR ST1
ONDTMR T211 10000 C1630

// Rung SLD_Program#74
// Offset 303
#BEGIN FMT_COMMENT 
"While C1630 is false, activate compressor"
#END

STRN C1630
OUT Y30

// Rung SLD_Program#75
// Offset 305
STRND Y30
COPY 0x1 "4 0x0 0 C1621 1"

// Rung SLD_Program#76
// Offset 312
#BEGIN FMT_COMMENT 
"When timer is done and conveyor stops moving, jump to S1 "
"to wait for next command."
#END

STRND Y30
JMP SLD_Program.S1

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
SG SSC_Program.S0

// Rung SSC_Program#2
// Offset 2
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#3
// Offset 10
STRN X40
OUT Y36

// Rung SSC_Program#4
// Offset 12
STRN X41
OUT Y38

// Rung SSC_Program#5
// Offset 14
STR X40
AND X41
JMP SSC_Program.S1

// Rung SSC_Program#6
// Offset 17
SG SSC_Program.S1

// Rung SSC_Program#7
// Offset 19
#BEGIN FMT_COMMENT 
"This Stage will be for looking at the High Bay Warehouse"
#END

STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung SSC_Program#8
// Offset 27
#BEGIN FMT_COMMENT 
"If something is detected for pick up for 2 seconds (X42 is "
"not on), write to MI600 to let Doug know we got something."
#END

STRN X42
ONDTMR T150 2000 MI600

// Rung SSC_Program#9
// Offset 31
#BEGIN FMT_COMMENT 
"This means something has been dropped off, but is now "
"being picked up by the crane so turn off MI600"
#END

STRPD X42
AND MI600
RST MI600

// Rung SSC_Program#10
// Offset 35
#BEGIN FMT_COMMENT 
"If something is detected for drop off (x43 is not on), "
"write to MI601 to let Doug know we have something"
#END

STRN X43
ONDTMR T150 2000 MI601

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block SLD_Storage
$PRGRM SLD_Storage

// Rung SLD_Storage#1
// Offset 0
#BEGIN FMT_COMMENT 
"Decrement W counter when light barrier has falling edge"
#END

STRND X37
DEC V3202

// Rung SLD_Storage#2
// Offset 3
#BEGIN FMT_COMMENT 
"Decrement R counter when light barrier has falling edge."
#END

STRND X38
DEC V3203

// Rung SLD_Storage#3
// Offset 6
#BEGIN FMT_COMMENT 
"Decrement B counter when light barrier has falling edge."
#END

STRND X39
DEC V3204

// Rung SLD_Storage#4
// Offset 9
STR ST1
COPY 0x1 "4 0x0 V3202 MC808 1 0x0 V3203 MC809 1 0x0 V3204 MC810 1"

// End of Code Block SLD_Storage
$PGMEND SLD_Storage

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C101","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C180","HBW_Fault","Modbus MC180","Status in Fault State"
"V105","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","HBW_Fault_code","Modbus MHR181","Current Fault code"
"T3","T_HBW_S6","",""
#END

